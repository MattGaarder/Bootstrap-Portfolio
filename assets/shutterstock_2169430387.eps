%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: software architecture and cms and database development s2.eps
%%Creator: Adobe Illustrator(R) 21.1
%%For: 
%%CreationDate: 6/3/2022
%%BoundingBox: 0 0 3000 2000
%%HiResBoundingBox: 0 0 3000 2000
%%CropBox: 0 0 3000 2000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.1.0 x326 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2022-06-03T11:31:05+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2022-06-03T11:31:05+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2022-06-03T11:31:05+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2017 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUHqGs6TpwBvruK2ruqyOAx+S9TleTNCH&#xA;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&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:ef540a55-0b65-314d-8f6d-03d6cef8d6f5</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:ef540a55-0b65-314d-8f6d-03d6cef8d6f5</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:01e640b5-a859-dd4c-bdf4-cd35073e7728</stRef:instanceID>
            <stRef:documentID>xmp.did:01e640b5-a859-dd4c-bdf4-cd35073e7728</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:71037d2d-d4a2-b347-9cd0-370ccea26b11</stEvt:instanceID>
                  <stEvt:when>2022-06-03T11:28:41+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ef540a55-0b65-314d-8f6d-03d6cef8d6f5</stEvt:instanceID>
                  <stEvt:when>2022-06-03T11:31:05+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3000.000000</stDim:w>
            <stDim:h>2000.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2000 li
3000 2000 li
3000 0 li
cp
clp
3000 2000 mo
0 2000 li
0 0 li
3000 0 li
3000 2000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
2086.51 286.936 mo
2063.08 301.024 2044.41 322.766 2033.16 349.388 cv
2010.02 404.15 2022.89 470.769 2064.25 512.239 cv
2086.68 534.727 2115.5 545.754 2143.73 555.936 cv
2172.29 566.236 2200.01 578.18 2227.3 592.159 cv
2281.43 619.884 2334 652.637 2391.27 671.875 cv
2418.03 680.868 2446.12 687.178 2474.06 687.161 cv
2500.99 687.144 2529.55 679.949 2547.59 656.901 cv
2564.73 634.991 2569.34 604.317 2568.63 575.979 cv
2567.88 545.421 2560.96 515.116 2549.45 487.089 cv
2535.53 453.2 2515.25 422.806 2490.84 397.033 cv
2491 396.585 2490.96 396.043 2490.54 395.625 cv
2446.72 352.08 2395.41 317.986 2340.21 295.37 cv
2286.29 273.277 2227.49 260.863 2170.24 263.865 cv
2141.27 265.383 2111.95 271.635 2086.51 286.936 cv
cp
.890196 .458824 .223529 rgb
f
2728.59 1091.31 mo
2703.95 1065.14 2662.44 1062.27 2628.85 1064.77 cv
2588.75 1067.77 2549.98 1080.85 2514.6 1099.63 cv
2478.28 1118.91 2444.89 1144.11 2415.34 1172.65 cv
2387.52 1199.53 2361.07 1232.46 2353.67 1271.42 cv
2353.61 1271.75 2353.56 1272.09 2353.5 1272.42 cv
2352.09 1276.73 2350.8 1281.08 2349.68 1285.48 cv
2345.34 1302.59 2343.18 1320.13 2345.56 1337.71 cv
2347.56 1352.46 2352.64 1367.51 2363.03 1378.51 cv
2375.08 1391.27 2392.61 1395.51 2409.6 1392.33 cv
2430.31 1388.46 2447.26 1375.42 2462.73 1361.87 cv
2479.44 1347.23 2496.04 1333 2515.03 1321.34 cv
2533.73 1309.85 2553.7 1300.56 2574.51 1293.6 cv
2594.41 1286.94 2614.88 1282.1 2634.72 1275.24 cv
2653.61 1268.71 2671.91 1260.14 2687.25 1247.13 cv
2702.62 1234.1 2714.7 1217.56 2724.21 1199.89 cv
2741.55 1167.7 2757.43 1121.94 2728.59 1091.31 cv
cp
f
872.514 572.779 mo
871.307 551.329 862.475 535.578 849.939 519.857 cv
841.172 508.863 829.209 497.461 818.118 488.9 cv
786.246 464.301 746.339 455.928 706.764 456.155 cv
667.885 456.378 628.062 462.532 592.501 478.765 cv
562.328 492.539 535.331 513.098 513.592 538.113 cv
497.574 556.546 484.442 577.419 474.886 599.836 cv
466.875 614.839 460.412 630.612 456.222 647.239 cv
446.893 684.264 450.676 725.723 471.444 758.378 cv
481.599 774.345 495.805 787.434 512.853 795.731 cv
531.178 804.651 551.791 807.899 572.045 807.058 cv
617.007 805.189 657.069 783.997 693.39 758.99 cv
712.856 745.588 731.565 731.13 750.913 717.561 cv
770.108 704.099 790.291 692.071 809.165 678.149 cv
842.611 653.479 875.017 617.28 872.514 572.779 cv
cp
f
2457.3 1066.35 mo
2418.53 1106.81 2373.15 1140.86 2337.34 1184.17 cv
2320.62 1204.35 2306.13 1226.51 2297.68 1251.49 cv
2286.71 1283.93 2276.66 1316.49 2261.05 1347.11 cv
2243.53 1381.45 2219.87 1411.38 2191.35 1437.24 cv
2175.29 1451.79 2158.03 1465.06 2140.4 1477.67 cv
2086.32 1490.68 2031.04 1500.18 1976.25 1510.22 cv
1874.32 1528.93 1774.4 1553 1677.63 1587.12 cv
1628.47 1604.48 1580.27 1623.99 1533.28 1645.59 cv
1485.73 1667.45 1439.9 1692.14 1392.45 1714.19 cv
1347.55 1735.06 1301.03 1752.88 1251.76 1763.83 cv
1206.25 1773.94 1159.27 1778.64 1112.22 1778.58 cv
1088.43 1778.55 1064.66 1777.31 1041 1774.97 cv
1035.2 1773.94 1029.42 1772.81 1023.67 1771.58 cv
965.307 1759.06 909.429 1734.98 867.038 1691.97 cv
844.449 1669.04 825.498 1642.85 803.046 1619.79 cv
782.33 1598.49 758.295 1580.64 731.841 1567.11 cv
705.28 1553.51 676.618 1544.4 647.118 1540.09 cv
613.905 1535.23 580.099 1535.54 547.098 1529.08 cv
498.755 1519.62 457.383 1492.19 426.834 1454.42 cv
413.21 1433.2 401.962 1410.65 393.697 1386.63 cv
365.096 1303.41 371.291 1213.06 404.702 1132.98 cv
439.209 1050.28 500.597 979.179 574.604 922.738 cv
615.108 891.854 658.778 864.623 701.109 835.869 cv
743.104 807.329 782.833 776.597 819.289 742.349 cv
871.056 693.716 996.8 539.31 1014.12 516.996 cv
1014.75 516.188 1016.12 517.102 1015.49 517.894 cv
997.835 540.649 1061.69 497.238 1124.89 468.394 cv
1202.58 432.927 1288.95 419.38 1376.26 427.25 cv
1480.26 436.642 1579.17 471.56 1677.35 503.038 cv
1728.16 519.309 1779.3 535.018 1831.65 546.403 cv
1886.96 558.413 1942.8 563.147 1999.24 566.754 cv
2055.71 570.362 2261.02 691.524 2312.66 712.028 cv
2376.24 737.295 2423.78 769.793 2458.5 806.629 cv
2464.91 814.057 2470.98 821.744 2476.67 829.689 cv
2498.14 859.66 2515.23 894.548 2518.33 931.749 cv
2522.81 985.1 2492.63 1029.49 2457.3 1066.35 cv
cp
f
1831.14 706.188 mo
1831.06 705.198 1829.57 704.956 1829.66 705.951 cv
1836.14 784.407 1838.88 862.39 1837.79 939.52 cv
1837.66 949.285 1837.46 959.038 1837.2 968.775 cv
1836.98 977.23 1837.03 985.919 1835.19 993.87 cv
1833.4 1001.58 1829.5 1008.07 1822.59 1011.23 cv
1816.26 1014.13 1808.62 1014.19 1801.22 1013.55 cv
1783.25 1012 1764.92 1008.52 1746.85 1005.9 cv
1728.11 1003.19 1709.38 1000.47 1690.64 997.753 cv
1647.75 991.535 1604.86 985.316 1561.97 979.099 cv
1561.01 978.96 1561.09 980.494 1562.04 980.633 cv
1601.48 986.351 1640.92 992.068 1680.37 997.787 cv
1718.8 1003.36 1757.33 1009.59 1795.71 1014.48 cv
1808.8 1016.14 1823.51 1016.59 1831.43 1006.35 cv
1839.98 995.3 1838.51 976.968 1838.85 962.269 cv
1839.8 922.292 1839.72 882.074 1838.62 841.667 cv
1837.39 796.713 1834.89 751.529 1831.14 706.188 cv
cp
.25098 .145098 .145098 rgb
f
409.349 1063.45 mo
408.818 1063.79 408.288 1064.14 407.758 1064.48 cv
411.804 1063.81 415.775 1062.81 419.643 1061.5 cv
419.072 1061.22 418.567 1060.85 418.118 1060.43 cv
416.866 1060.83 415.602 1061.2 414.329 1061.54 cv
412.658 1062.15 410.994 1062.78 409.349 1063.45 cv
cp
1 1 1 rgb
f
1328.08 1181.51 mo
1304.52 1181.96 1280.96 1182.41 1257.4 1182.87 cv
1246.31 1183.08 1235.2 1183.51 1224.1 1183.43 cv
1213.69 1183.36 1202.78 1182.41 1193.7 1176.85 cv
1178.48 1167.51 1173.86 1148.86 1172.44 1132.21 cv
1170.69 1111.78 1171.93 1090.95 1172 1070.47 cv
1172.3 976.229 1171.79 881.988 1170.48 787.758 cv
1169.75 734.564 1168.75 681.373 1167.5 628.188 cv
1167.48 627.212 1165.96 627.172 1165.98 628.154 cv
1168.25 724.899 1169.68 821.664 1170.26 918.435 cv
1170.55 966.566 1170.63 1014.7 1170.5 1062.83 cv
1170.44 1084.79 1169.27 1107.02 1170.68 1128.95 cv
1171.66 1144.18 1174.62 1161.02 1185.7 1172.38 cv
1201.36 1188.43 1226.53 1184.98 1246.84 1184.59 cv
1273.91 1184.07 1300.98 1183.55 1328.05 1183.03 cv
1329.03 1183.01 1329.07 1181.49 1328.08 1181.51 cv
cp
.25098 .145098 .145098 rgb
f
1979.7 1119.86 mo
1979.47 1105.72 1980.69 1087.45 1969.73 1075.88 cv
1964.31 1070.16 1956.9 1067.79 1949.69 1066.44 cv
1939.82 1064.58 1929.85 1063.42 1919.95 1061.96 cv
1878.49 1055.84 1837.03 1049.72 1795.57 1043.61 cv
1749.18 1036.76 1702.78 1029.91 1656.39 1023.07 cv
1655.43 1022.93 1655.32 1024.44 1656.28 1024.58 cv
1736.73 1036.45 1817.18 1048.33 1897.63 1060.2 cv
1907.99 1061.73 1918.36 1063.25 1928.72 1064.78 cv
1937.9 1066.14 1947.57 1066.76 1956.58 1069.66 cv
1965.02 1072.37 1971.42 1078.13 1974.63 1086.73 cv
1977.67 1094.88 1977.91 1103.66 1978.08 1112.05 cv
1978.91 1152.97 1978.56 1193.83 1977.09 1234.54 cv
1975.42 1280.78 1972.27 1326.84 1967.68 1372.63 cv
1967.59 1373.61 1969.07 1373.84 1969.17 1372.87 cv
1977.54 1289.25 1981.09 1204.73 1979.7 1119.86 cv
cp
f
1378.28 1215.1 mo
1288.21 1219.25 1198.15 1225.12 1108.17 1232.75 cv
1083.04 1234.88 1057.92 1237.16 1032.8 1239.56 cv
1031.83 1239.65 1031.82 1241.17 1032.8 1241.08 cv
1122.72 1232.48 1212.74 1225.61 1302.81 1220.5 cv
1327.96 1219.07 1353.12 1217.78 1378.28 1216.63 cv
1379.26 1216.58 1379.26 1215.06 1378.28 1215.1 cv
cp
f
1593.96 1269.86 mo
1593.58 1269.5 1593.21 1269.14 1592.83 1268.79 cv
1579.57 1256.85 1563.45 1247.99 1547.73 1239.73 cv
1531 1230.94 1513.67 1223.28 1495.9 1216.81 cv
1487.16 1213.63 1478.31 1210.75 1469.38 1208.14 cv
1468.44 1207.86 1468.03 1209.33 1468.97 1209.61 cv
1506.32 1220.52 1543.02 1236.31 1575.63 1257.67 cv
1581.79 1261.7 1587.51 1266.09 1592.65 1270.97 cv
1593.04 1270.56 1593.48 1270.18 1593.96 1269.86 cv
cp
f
2228.28 1511.69 mo
2227.69 1511.69 2227.1 1511.65 2226.51 1511.58 cv
1856.88 1466.54 li
1849.75 1465.67 1844.38 1459.73 1844.38 1452.72 cv
1844.38 1161.32 li
1844.38 1157.33 1846.14 1153.52 1849.21 1150.88 cv
1852.27 1148.23 1856.36 1147 1860.42 1147.5 cv
2230.05 1192.53 li
2237.18 1193.4 2242.56 1199.35 2242.56 1206.36 cv
2242.56 1497.75 li
2242.56 1501.75 2240.8 1505.55 2237.73 1508.2 cv
2235.11 1510.46 2231.74 1511.69 2228.28 1511.69 cv
cp
.509804 .266667 .152941 rgb
f
2225.31 1182.24 mo
2225.31 1480.77 li
2225.31 1488.9 2218.18 1495.19 2210.12 1494.18 cv
1840.5 1448.03 li
1833.72 1447.2 1828.65 1441.44 1828.65 1434.62 cv
1828.65 1136.1 li
1828.65 1127.97 1835.78 1121.69 1843.84 1122.69 cv
2213.47 1168.83 li
2220.22 1169.68 2225.31 1175.43 2225.31 1182.24 cv
cp
.803922 .713726 .713726 rgb
f
2225.31 1182.24 mo
2225.31 1216.73 li
1828.65 1167.21 li
1828.65 1136.1 li
1828.65 1127.97 1835.78 1121.69 1843.84 1122.69 cv
2213.47 1168.83 li
2220.22 1169.68 2225.31 1175.43 2225.31 1182.24 cv
cp
.25098 .145098 .145098 rgb
f
1901.01 1249.44 mo
1922.84 1252.24 li
1923.5 1252.32 1924.08 1251.81 1924.08 1251.14 cv
1924.05 1227.48 li
1924.04 1226.92 1923.63 1226.45 1923.08 1226.38 cv
1901.26 1223.59 li
1900.6 1223.5 1900.01 1224.02 1900.01 1224.68 cv
1900.05 1248.35 li
1900.05 1248.9 1900.46 1249.37 1901.01 1249.44 cv
cp
.407843 .454902 .741176 rgb
f
1900.63 1301.19 mo
1922.46 1303.99 li
1923.12 1304.08 1923.7 1303.56 1923.7 1302.89 cv
1923.67 1279.23 li
1923.66 1278.67 1923.25 1278.21 1922.7 1278.14 cv
1900.88 1275.34 li
1900.22 1275.25 1899.63 1275.77 1899.63 1276.44 cv
1899.67 1300.1 li
1899.67 1300.66 1900.08 1301.12 1900.63 1301.19 cv
cp
f
1900.38 1354.47 mo
1922.21 1357.26 li
1922.87 1357.35 1923.45 1356.83 1923.45 1356.17 cv
1923.41 1332.5 li
1923.41 1331.95 1923 1331.48 1922.45 1331.41 cv
1900.62 1328.61 li
1899.96 1328.53 1899.38 1329.04 1899.38 1329.71 cv
1899.42 1353.38 li
1899.42 1353.93 1899.83 1354.4 1900.38 1354.47 cv
cp
f
1900.63 1406.22 mo
1922.46 1409.02 li
1923.12 1409.1 1923.7 1408.59 1923.7 1407.92 cv
1923.67 1384.26 li
1923.66 1383.7 1923.25 1383.23 1922.7 1383.16 cv
1900.88 1380.37 li
1900.22 1380.28 1899.63 1380.8 1899.63 1381.46 cv
1899.67 1405.13 li
1899.67 1405.68 1900.08 1406.15 1900.63 1406.22 cv
cp
f
1947.94 1244.3 mo
2034.58 1255.31 li
2035.67 1255.45 2036.63 1254.59 2036.62 1253.49 cv
2036.48 1242.06 li
2036.47 1241.16 2035.8 1240.4 2034.9 1240.29 cv
1948.26 1229.27 li
1947.17 1229.13 1946.21 1229.99 1946.22 1231.09 cv
1946.36 1242.52 li
1946.37 1243.42 1947.04 1244.18 1947.94 1244.3 cv
cp
.25098 .145098 .145098 rgb
f
2054.49 1310.51 mo
2141.13 1321.53 li
2142.22 1321.67 2143.18 1320.81 2143.17 1319.71 cv
2143.03 1308.27 li
2143.02 1307.37 2142.35 1306.61 2141.45 1306.5 cv
2054.81 1295.48 li
2053.72 1295.34 2052.76 1296.2 2052.77 1297.3 cv
2052.91 1308.73 li
2052.92 1309.64 2053.59 1310.4 2054.49 1310.51 cv
cp
f
1991.14 1301.56 mo
2037.12 1307.3 li
2038.21 1307.44 2039.17 1306.58 2039.16 1305.48 cv
2039.03 1295.4 li
2039.01 1294.5 2038.34 1293.74 2037.44 1293.63 cv
1991.47 1287.89 li
1990.38 1287.75 1989.42 1288.61 1989.43 1289.71 cv
1989.56 1299.78 li
1989.57 1300.69 1990.25 1301.44 1991.14 1301.56 cv
cp
f
2092.37 1261.22 mo
2138.34 1266.96 li
2139.43 1267.1 2140.39 1266.24 2140.38 1265.14 cv
2140.25 1255.06 li
2140.24 1254.16 2139.56 1253.4 2138.67 1253.29 cv
2092.69 1247.55 li
2091.6 1247.41 2090.64 1248.27 2090.65 1249.37 cv
2090.78 1259.45 li
2090.79 1260.35 2091.47 1261.11 2092.37 1261.22 cv
cp
f
2091.22 1417.62 mo
2137.2 1423.36 li
2138.29 1423.5 2139.25 1422.64 2139.24 1421.54 cv
2139.11 1411.46 li
2139.1 1410.56 2138.42 1409.8 2137.52 1409.69 cv
2091.55 1403.95 li
2090.46 1403.81 2089.5 1404.67 2089.51 1405.77 cv
2089.64 1415.85 li
2089.65 1416.75 2090.33 1417.51 2091.22 1417.62 cv
cp
f
2050.13 1360.54 mo
2096.1 1366.28 li
2097.19 1366.42 2098.16 1365.56 2098.14 1364.46 cv
2098.01 1354.38 li
2098 1353.48 2097.32 1352.72 2096.43 1352.61 cv
2050.45 1346.87 li
2049.36 1346.73 2048.4 1347.59 2048.41 1348.69 cv
2048.54 1358.77 li
2048.56 1359.67 2049.23 1360.43 2050.13 1360.54 cv
cp
f
1979.59 1288.01 mo
1979.58 1287.11 1978.9 1286.35 1978.01 1286.24 cv
1948.85 1282.67 li
1947.76 1282.54 1946.8 1283.4 1946.81 1284.5 cv
1946.95 1294.57 li
1946.96 1295.48 1947.63 1296.23 1948.53 1296.35 cv
1977.68 1299.91 li
1978.77 1300.05 1979.74 1299.19 1979.72 1298.09 cv
1979.59 1288.01 li
cp
f
2080.05 1404.2 mo
2080.04 1403.3 2079.37 1402.54 2078.47 1402.43 cv
2049.32 1398.87 li
2048.22 1398.73 2047.26 1399.59 2047.28 1400.69 cv
2047.41 1410.76 li
2047.42 1411.67 2048.09 1412.42 2048.99 1412.54 cv
2078.14 1416.1 li
2079.24 1416.24 2080.2 1415.38 2080.18 1414.28 cv
2080.05 1404.2 li
cp
f
2140.24 1359.93 mo
2140.23 1359.03 2139.55 1358.28 2138.66 1358.16 cv
2114.2 1355.29 li
2113.1 1355.16 2112.14 1356.01 2112.16 1357.12 cv
2112.29 1367.19 li
2112.3 1368.09 2112.98 1368.85 2113.87 1368.96 cv
2138.33 1371.83 li
2139.42 1371.97 2140.39 1371.11 2140.37 1370.01 cv
2140.24 1359.93 li
cp
f
2078.28 1247.3 mo
2078.26 1246.39 2077.59 1245.64 2076.69 1245.52 cv
2047.54 1241.96 li
2046.45 1241.82 2045.49 1242.68 2045.5 1243.78 cv
2045.63 1253.85 li
2045.64 1254.76 2046.32 1255.51 2047.21 1255.63 cv
2076.37 1259.19 li
2077.46 1259.33 2078.42 1258.47 2078.41 1257.37 cv
2078.28 1247.3 li
cp
f
1948.07 1349.13 mo
2034.71 1360.15 li
2035.8 1360.29 2036.76 1359.43 2036.75 1358.33 cv
2036.61 1346.9 li
2036.6 1345.99 2035.92 1345.24 2035.03 1345.12 cv
1948.39 1334.11 li
1947.3 1333.97 1946.33 1334.83 1946.35 1335.93 cv
1946.48 1347.36 li
1946.49 1348.26 1947.17 1349.02 1948.07 1349.13 cv
cp
f
2036.47 1398.53 mo
2036.46 1397.62 2035.79 1396.87 2034.89 1396.75 cv
1948.25 1385.74 li
1947.16 1385.6 1946.2 1386.46 1946.21 1387.56 cv
1946.34 1397.63 li
1946.36 1398.54 1947.03 1399.29 1947.93 1399.41 cv
2034.57 1410.42 li
2035.66 1410.56 2036.62 1409.7 2036.61 1408.6 cv
2036.47 1398.53 li
cp
f
2173.63 1198.07 mo
2192.83 1200.01 li
2194.84 1200.21 2196.58 1198.63 2196.57 1196.61 cv
2196.48 1183.1 li
2196.47 1181.37 2195.16 1179.92 2193.43 1179.75 cv
2174.23 1177.8 li
2172.22 1177.6 2170.49 1179.18 2170.5 1181.2 cv
2170.58 1194.71 li
2170.59 1196.45 2171.91 1197.89 2173.63 1198.07 cv
cp
.411765 .266667 .219608 rgb
f
2128.98 1193.5 mo
2148.18 1195.44 li
2150.19 1195.65 2151.93 1194.06 2151.92 1192.05 cv
2151.83 1178.53 li
2151.82 1176.8 2150.51 1175.35 2148.78 1175.18 cv
2129.58 1173.24 li
2127.58 1173.03 2125.84 1174.62 2125.85 1176.63 cv
2125.93 1190.15 li
2125.95 1191.88 2127.26 1193.32 2128.98 1193.5 cv
cp
f
1006.67 721.104 mo
1003.54 720.969 1000.48 719.673 998.135 717.447 cv
995.47 714.922 993.927 711.406 993.904 707.799 cv
991.482 348.65 li
991.438 341.789 996.736 336.349 1003.54 336.267 cv
1438.16 331.012 li
1441.71 330.957 1445.06 332.355 1447.63 334.917 cv
1450.2 337.476 1451.62 340.847 1451.62 344.41 cv
1451.62 683.754 li
1451.62 690.375 1446.68 695.655 1440.13 696.034 cv
1007.94 721.094 li
1007.52 721.119 1007.09 721.122 1006.67 721.104 cv
cp
.509804 .266667 .152941 rgb
f
1487.37 293.792 mo
1487.37 666.762 li
1487.37 672.074 1483.37 676.352 1478.12 676.656 cv
1021.73 703.111 li
1015.7 703.461 1010.47 698.499 1010.42 692.41 cv
1008.11 346.869 li
1007.86 310.702 li
1007.82 305.177 1012.1 300.778 1017.58 300.717 cv
1476.52 283 li
1482.41 282.923 1487.37 287.855 1487.37 293.792 cv
cp
.968627 .937255 .92549 rgb
f
1432 383.183 mo
1432 622.928 li
1432 625.247 1430.19 627.164 1427.87 627.297 cv
1209.57 639.878 li
1207.05 640.023 1204.94 638.025 1204.94 635.509 cv
1204.94 393.654 li
1204.94 391.318 1206.77 389.395 1209.1 389.282 cv
1427.41 378.81 li
1429.91 378.69 1432 380.683 1432 383.183 cv
cp
f
1116.21 567.576 mo
1091.88 568.776 li
1089.38 568.899 1087.28 566.906 1087.28 564.404 cv
1087.28 536.889 li
1087.28 534.556 1089.11 532.632 1091.44 532.517 cv
1115.78 531.317 li
1118.28 531.193 1120.37 533.187 1120.37 535.688 cv
1120.37 563.204 li
1120.37 565.537 1118.54 567.46 1116.21 567.576 cv
cp
.407843 .454902 .741176 rgb
f
1171.35 564.667 mo
1147.01 565.868 li
1144.52 565.991 1142.42 563.998 1142.42 561.496 cv
1142.42 533.981 li
1142.42 531.647 1144.25 529.724 1146.58 529.609 cv
1170.92 528.409 li
1173.42 528.286 1175.51 530.278 1175.51 532.78 cv
1175.51 560.296 li
1175.51 562.629 1173.68 564.553 1171.35 564.667 cv
cp
f
1117.73 625.505 mo
1093.39 626.706 li
1090.89 626.829 1088.8 624.836 1088.8 622.334 cv
1088.8 594.819 li
1088.8 592.485 1090.63 590.562 1092.96 590.447 cv
1117.29 589.247 li
1119.79 589.123 1121.89 591.116 1121.89 593.618 cv
1121.89 621.133 li
1121.89 623.467 1120.06 625.39 1117.73 625.505 cv
cp
f
1170.77 623.063 mo
1146.43 624.263 li
1143.93 624.386 1141.84 622.393 1141.84 619.891 cv
1141.84 592.376 li
1141.84 590.042 1143.67 588.119 1146 588.004 cv
1170.34 586.804 li
1172.84 586.68 1174.93 588.673 1174.93 591.176 cv
1174.93 618.69 li
1174.93 621.024 1173.1 622.948 1170.77 623.063 cv
cp
f
1306.57 422.079 mo
1230.4 425.835 li
1227.93 425.958 1225.85 424.01 1225.81 421.537 cv
1225.71 415.397 li
1225.67 413.036 1227.51 411.069 1229.87 410.953 cv
1306.04 407.196 li
1308.51 407.074 1310.59 409.022 1310.63 411.495 cv
1310.73 417.635 li
1310.77 419.996 1308.93 421.963 1306.57 422.079 cv
cp
.25098 .145098 .145098 rgb
f
1304.48 595.868 mo
1228.31 599.625 li
1225.84 599.747 1223.76 597.799 1223.72 595.326 cv
1223.61 589.186 li
1223.58 586.825 1225.42 584.858 1227.78 584.742 cv
1303.94 580.985 li
1306.41 580.863 1308.5 582.811 1308.54 585.284 cv
1308.64 591.424 li
1308.68 593.785 1306.84 595.752 1304.48 595.868 cv
cp
f
1388.67 456.96 mo
1229.7 464.437 li
1227.23 464.553 1225.15 462.606 1225.11 460.138 cv
1225.01 453.998 li
1224.97 451.632 1226.82 449.664 1229.18 449.552 cv
1388.16 442.075 li
1390.62 441.959 1392.7 443.906 1392.74 446.375 cv
1392.84 452.515 li
1392.88 454.88 1391.03 456.849 1388.67 456.96 cv
cp
f
1264.12 502.7 mo
1229.71 504.462 li
1227.24 504.589 1225.15 502.64 1225.11 500.164 cv
1225.01 494.024 li
1224.97 491.667 1226.81 489.701 1229.16 489.581 cv
1263.57 487.818 li
1266.04 487.691 1268.13 489.641 1268.17 492.117 cv
1268.27 498.255 li
1268.31 500.614 1266.48 502.579 1264.12 502.7 cv
cp
f
1373.35 591.688 mo
1338.94 593.45 li
1336.47 593.577 1334.38 591.628 1334.34 589.152 cv
1334.24 583.013 li
1334.2 580.655 1336.04 578.689 1338.39 578.569 cv
1372.8 576.807 li
1375.27 576.68 1377.36 578.629 1377.4 581.105 cv
1377.5 587.244 li
1377.54 589.602 1375.71 591.568 1373.35 591.688 cv
cp
f
1408.04 494.467 mo
1290.85 501.462 li
1288.36 501.611 1286.25 499.657 1286.21 497.166 cv
1286.11 491.03 li
1286.07 488.686 1287.88 486.727 1290.22 486.587 cv
1407.41 479.592 li
1409.9 479.444 1412.01 481.398 1412.05 483.889 cv
1412.15 490.024 li
1412.19 492.369 1410.38 494.327 1408.04 494.467 cv
cp
f
1347.2 545.417 mo
1230.01 552.412 li
1227.52 552.561 1225.41 550.607 1225.37 548.116 cv
1225.27 541.98 li
1225.23 539.636 1227.05 537.677 1229.39 537.538 cv
1346.58 530.542 li
1349.06 530.394 1351.17 532.348 1351.21 534.839 cv
1351.32 540.975 li
1351.35 543.319 1349.54 545.277 1347.2 545.417 cv
cp
f
1083.78 500.126 mo
1083.78 506.408 li
1083.78 508.909 1085.87 510.902 1088.37 510.779 cv
1175.42 506.511 li
1177.75 506.397 1179.59 504.473 1179.59 502.139 cv
1179.59 495.857 li
1179.59 493.356 1177.49 491.363 1174.99 491.485 cv
1087.94 495.754 li
1085.61 495.868 1083.78 497.792 1083.78 500.126 cv
cp
.803922 .713726 .713726 rgb
f
1174.07 453.167 mo
1087.02 457.435 li
1084.69 457.549 1082.86 459.473 1082.86 461.807 cv
1082.86 468.088 li
1082.86 470.59 1084.95 472.583 1087.45 472.46 cv
1174.5 468.192 li
1176.83 468.078 1178.66 466.154 1178.66 463.82 cv
1178.66 457.539 li
1178.66 455.037 1176.57 453.044 1174.07 453.167 cv
cp
f
1173.61 415.442 mo
1086.56 419.711 li
1084.23 419.825 1082.4 421.749 1082.4 424.083 cv
1082.4 430.364 li
1082.4 432.866 1084.49 434.859 1086.99 434.736 cv
1174.04 430.468 li
1176.37 430.354 1178.2 428.43 1178.2 426.096 cv
1178.2 419.814 li
1178.2 417.313 1176.11 415.32 1173.61 415.442 cv
cp
f
1487.37 293.792 mo
1487.37 329.075 li
1008.11 346.869 li
1007.86 310.702 li
1007.82 305.177 1012.1 300.778 1017.58 300.717 cv
1476.52 283 li
1482.41 282.923 1487.37 287.855 1487.37 293.792 cv
cp
.25098 .145098 .145098 rgb
f
1411.8 318.678 mo
1392.6 319.743 li
1390.6 319.854 1388.86 318.192 1388.87 316.176 cv
1388.96 302.667 li
1388.97 300.935 1390.28 299.549 1392.01 299.453 cv
1411.21 298.388 li
1413.21 298.277 1414.95 299.939 1414.94 301.956 cv
1414.86 315.464 li
1414.84 317.196 1413.53 318.583 1411.8 318.678 cv
cp
.411765 .266667 .219608 rgb
f
1456.45 316.154 mo
1437.25 317.219 li
1435.25 317.33 1433.51 315.668 1433.52 313.651 cv
1433.61 300.143 li
1433.62 298.411 1434.93 297.025 1436.66 296.929 cv
1455.86 295.864 li
1457.86 295.753 1459.6 297.415 1459.59 299.431 cv
1459.5 312.94 li
1459.49 314.672 1458.18 316.058 1456.45 316.154 cv
cp
f
560.615 1386.62 mo
559.023 1386.64 557.47 1386.08 556.276 1385.04 cv
554.921 1383.86 554.138 1382.17 554.125 1380.39 cv
551.162 938.715 li
551.139 935.334 553.833 932.517 557.294 932.302 cv
1085.7 899.601 li
1087.51 899.477 1089.21 900.087 1090.51 901.284 cv
1091.82 902.481 1092.54 904.106 1092.54 905.864 cv
1092.54 1324.33 li
1092.54 1327.6 1090.03 1330.32 1086.7 1330.68 cv
561.26 1386.58 li
561.045 1386.61 560.83 1386.62 560.615 1386.62 cv
cp
.509804 .266667 .152941 rgb
f
1100.5 861.924 mo
1100.5 1308.17 li
1100.5 1311.08 1098.29 1313.51 1095.38 1313.82 cv
575.905 1367.2 li
572.587 1367.53 569.695 1364.93 569.664 1361.58 cv
569.497 1335.95 li
569.056 1268.93 li
567.062 963.862 li
567 955.262 li
566.727 913.57 li
566.711 910.557 569.071 908.045 572.085 907.893 cv
1094.51 856.277 li
1097.77 856.094 1100.5 858.682 1100.5 861.924 cv
cp
.968627 .937255 .92549 rgb
f
1100.5 861.924 mo
1100.5 909.034 li
567.062 963.862 li
567 955.262 li
566.727 913.57 li
566.711 910.557 569.071 908.045 572.085 907.893 cv
1094.51 856.277 li
1097.77 856.094 1100.5 858.682 1100.5 861.924 cv
cp
.25098 .145098 .145098 rgb
f
644.65 939.301 mo
625.451 941.244 li
623.444 941.448 621.704 939.865 621.717 937.848 cv
621.803 924.335 li
621.814 922.603 623.129 921.157 624.854 920.982 cv
644.053 919.039 li
646.06 918.836 647.8 920.418 647.787 922.436 cv
647.701 935.948 li
647.69 937.681 646.375 939.126 644.65 939.301 cv
cp
.411765 .266667 .219608 rgb
f
689.3 934.735 mo
670.101 936.678 li
668.094 936.881 666.354 935.298 666.367 933.281 cv
666.453 919.769 li
666.463 918.036 667.779 916.59 669.503 916.416 cv
688.703 914.473 li
690.71 914.27 692.449 915.852 692.437 917.869 cv
692.351 931.381 li
692.34 933.114 691.024 934.56 689.3 934.735 cv
cp
f
1077.45 894.145 mo
1058.25 896.087 li
1056.24 896.291 1054.5 894.708 1054.51 892.691 cv
1054.6 879.179 li
1054.61 877.446 1055.93 876 1057.65 875.825 cv
1076.85 873.882 li
1078.86 873.679 1080.6 875.262 1080.58 877.278 cv
1080.5 890.791 li
1080.49 892.524 1079.17 893.97 1077.45 894.145 cv
cp
f
689.739 1017.95 mo
689.739 1080.3 li
689.739 1082.7 687.924 1084.71 685.536 1084.95 cv
626.404 1091.01 li
623.658 1091.29 621.266 1089.14 621.248 1086.38 cv
620.836 1024.07 li
620.82 1021.66 622.64 1019.63 625.039 1019.38 cv
684.583 1013.29 li
687.342 1013.01 689.739 1015.17 689.739 1017.95 cv
cp
.803922 .713726 .713726 rgb
f
790.781 1006.8 mo
790.781 1069.15 li
790.781 1071.55 788.965 1073.56 786.578 1073.8 cv
727.446 1079.86 li
724.7 1080.14 722.308 1078 722.29 1075.24 cv
721.877 1012.92 li
721.862 1010.51 723.681 1008.48 726.081 1008.23 cv
785.625 1002.14 li
788.384 1001.86 790.781 1004.02 790.781 1006.8 cv
cp
f
890.081 996.343 mo
890.081 1058.7 li
890.081 1061.1 888.265 1063.11 885.878 1063.35 cv
826.746 1069.41 li
824 1069.69 821.608 1067.54 821.589 1064.78 cv
821.177 1002.47 li
821.161 1000.05 822.981 998.025 825.38 997.779 cv
884.925 991.688 li
887.683 991.405 890.081 993.57 890.081 996.343 cv
cp
f
1039.49 981.157 mo
1040.84 1249.55 li
1040.85 1251.93 1039.07 1253.95 1036.7 1254.22 cv
921.574 1267.48 li
918.808 1267.8 916.377 1265.65 916.359 1262.87 cv
914.554 994.515 li
914.538 992.125 916.325 990.108 918.698 989.834 cv
1034.28 976.531 li
1037.05 976.213 1039.48 978.37 1039.49 981.157 cv
cp
f
1021.78 1000.31 mo
1021.82 1008.73 li
1021.84 1011.12 1020.05 1013.13 1017.68 1013.41 cv
939.156 1022.38 li
936.392 1022.69 933.964 1020.54 933.945 1017.76 cv
933.889 1009.34 li
933.873 1006.95 935.662 1004.93 938.037 1004.66 cv
1016.57 995.689 li
1019.34 995.373 1021.77 997.529 1021.78 1000.31 cv
cp
.407843 .454902 .741176 rgb
f
1021.78 1040.73 mo
1021.82 1049.15 li
1021.84 1051.54 1020.05 1053.55 1017.68 1053.82 cv
939.156 1062.79 li
936.392 1063.11 933.964 1060.96 933.945 1058.17 cv
933.889 1049.76 li
933.873 1047.37 935.662 1045.35 938.037 1045.08 cv
1016.57 1036.11 li
1019.34 1035.79 1021.77 1037.95 1021.78 1040.73 cv
cp
f
969.809 1088.21 mo
969.851 1096.63 li
969.863 1099.03 968.063 1101.05 965.681 1101.31 cv
939.6 1104.17 li
936.842 1104.47 934.429 1102.32 934.41 1099.54 cv
934.354 1091.12 li
934.337 1088.72 936.138 1086.7 938.523 1086.44 cv
964.62 1083.58 li
967.38 1083.28 969.795 1085.43 969.809 1088.21 cv
cp
f
969.809 1123.75 mo
969.851 1132.17 li
969.863 1134.57 968.063 1136.58 965.681 1136.85 cv
939.6 1139.7 li
936.842 1140.01 934.429 1137.86 934.41 1135.08 cv
934.354 1126.66 li
934.337 1124.26 936.138 1122.24 938.523 1121.98 cv
964.62 1119.12 li
967.38 1118.82 969.795 1120.97 969.809 1123.75 cv
cp
f
969.809 1160.68 mo
969.851 1169.1 li
969.863 1171.5 968.063 1173.52 965.681 1173.78 cv
939.6 1176.64 li
936.842 1176.94 934.429 1174.79 934.41 1172.02 cv
934.354 1163.59 li
934.337 1161.2 936.138 1159.17 938.523 1158.91 cv
964.62 1156.05 li
967.38 1155.75 969.795 1157.9 969.809 1160.68 cv
cp
f
969.809 1196.22 mo
969.851 1204.64 li
969.863 1207.04 968.063 1209.06 965.681 1209.32 cv
939.6 1212.18 li
936.842 1212.48 934.429 1210.33 934.41 1207.55 cv
934.354 1199.13 li
934.337 1196.73 936.138 1194.71 938.523 1194.45 cv
964.62 1191.59 li
967.38 1191.29 969.795 1193.44 969.809 1196.22 cv
cp
f
689.042 1120.38 mo
689.042 1182.73 li
689.042 1185.13 687.227 1187.14 684.839 1187.39 cv
625.707 1193.44 li
622.961 1193.73 620.569 1191.58 620.551 1188.82 cv
620.139 1126.5 li
620.123 1124.09 621.943 1122.06 624.342 1121.82 cv
683.886 1115.73 li
686.645 1115.44 689.042 1117.61 689.042 1120.38 cv
cp
.803922 .713726 .713726 rgb
f
790.084 1109.23 mo
790.084 1171.58 li
790.084 1173.98 788.269 1176 785.881 1176.24 cv
726.749 1182.29 li
724.003 1182.58 721.611 1180.43 721.593 1177.67 cv
721.181 1115.35 li
721.165 1112.94 722.984 1110.91 725.384 1110.67 cv
784.928 1104.58 li
787.687 1104.29 790.084 1106.46 790.084 1109.23 cv
cp
f
889.384 1098.78 mo
889.384 1161.13 li
889.384 1163.53 887.568 1165.54 885.181 1165.79 cv
826.049 1171.84 li
823.302 1172.12 820.911 1169.98 820.893 1167.22 cv
820.48 1104.9 li
820.464 1102.49 822.284 1100.46 824.684 1100.21 cv
884.228 1094.12 li
886.986 1093.84 889.384 1096.01 889.384 1098.78 cv
cp
f
691.133 1227 mo
691.133 1289.35 li
691.133 1291.75 689.317 1293.76 686.93 1294 cv
627.798 1300.06 li
625.051 1300.34 622.66 1298.2 622.642 1295.44 cv
622.229 1233.12 li
622.213 1230.71 624.033 1228.68 626.433 1228.43 cv
685.977 1222.34 li
688.735 1222.06 691.133 1224.22 691.133 1227 cv
cp
f
792.175 1215.85 mo
792.175 1278.2 li
792.175 1280.6 790.359 1282.61 787.972 1282.86 cv
728.84 1288.91 li
726.093 1289.19 723.702 1287.05 723.683 1284.29 cv
723.271 1221.97 li
723.255 1219.56 725.075 1217.53 727.475 1217.28 cv
787.019 1211.19 li
789.777 1210.91 792.175 1213.08 792.175 1215.85 cv
cp
f
891.475 1205.4 mo
891.475 1267.75 li
891.475 1270.15 889.659 1272.16 887.271 1272.4 cv
828.139 1278.46 li
825.393 1278.74 823.001 1276.59 822.983 1273.83 cv
822.571 1211.52 li
822.555 1209.11 824.375 1207.08 826.774 1206.83 cv
886.318 1200.74 li
889.077 1200.46 891.475 1202.62 891.475 1205.4 cv
cp
f
657.639 1268.75 mo
654.576 1269.07 651.999 1266.8 651.887 1263.67 cv
651.775 1260.54 654.171 1257.74 657.234 1257.41 cv
660.303 1257.09 662.88 1259.36 662.992 1262.5 cv
663.104 1265.62 660.708 1268.42 657.639 1268.75 cv
cp
676.994 1255.61 mo
676.259 1252.81 674.937 1250.31 673.181 1248.21 cv
671.498 1246.19 669.405 1244.56 667.028 1243.42 cv
665.004 1242.45 662.774 1241.83 660.418 1241.63 cv
659.228 1241.54 658.009 1241.56 656.762 1241.69 cv
655.253 1241.85 653.789 1242.18 652.387 1242.65 cv
649.654 1243.56 647.159 1245.03 645.011 1246.91 cv
642.958 1248.71 641.232 1250.88 639.945 1253.3 cv
638.711 1255.6 637.871 1258.12 637.509 1260.77 cv
637.353 1261.96 637.288 1263.18 637.332 1264.41 cv
637.387 1265.97 637.614 1267.47 637.986 1268.89 cv
638.551 1271.07 639.47 1273.06 640.668 1274.83 cv
642.159 1277.03 644.092 1278.87 646.33 1280.24 cv
648.666 1281.67 651.336 1282.59 654.203 1282.88 cv
655.51 1283 656.857 1283 658.232 1282.86 cv
659.62 1282.71 660.963 1282.43 662.265 1282.02 cv
665.171 1281.09 667.831 1279.55 670.089 1277.55 cv
672.204 1275.67 673.965 1273.4 675.254 1270.87 cv
676.376 1268.68 677.145 1266.29 677.479 1263.8 cv
677.642 1262.6 677.707 1261.37 677.663 1260.14 cv
677.606 1258.57 677.379 1257.05 676.994 1255.61 cv
cp
.25098 .145098 .145098 rgb
f
660.421 1241.35 mo
660.502 1243.62 658.759 1245.66 656.527 1245.9 cv
654.303 1246.13 652.427 1244.48 652.346 1242.2 cv
652.317 1241.4 652.52 1240.62 652.894 1239.94 cv
654.133 1239.59 655.401 1239.34 656.706 1239.2 cv
657.69 1239.1 658.665 1239.06 659.622 1239.08 cv
660.093 1239.7 660.39 1240.48 660.421 1241.35 cv
cp
f
662.275 1282.15 mo
662.313 1283.19 661.97 1284.18 661.362 1284.97 cv
660.383 1285.21 659.381 1285.39 658.358 1285.49 cv
657.329 1285.6 656.31 1285.64 655.308 1285.61 cv
655.301 1285.61 li
654.648 1284.95 654.237 1284.04 654.2 1283 cv
654.119 1280.73 655.863 1278.69 658.094 1278.45 cv
660.325 1278.21 662.194 1279.87 662.275 1282.15 cv
cp
f
641.191 1264.48 mo
641.272 1266.76 639.529 1268.79 637.297 1269.03 cv
636.594 1269.1 635.929 1268.99 635.342 1268.73 cv
635.072 1267.45 634.909 1266.12 634.86 1264.75 cv
634.822 1263.69 634.855 1262.63 634.953 1261.6 cv
635.547 1261.16 636.249 1260.87 637.003 1260.79 cv
639.235 1260.55 641.11 1262.21 641.191 1264.48 cv
cp
f
680.197 1259.95 mo
680.23 1260.86 680.211 1261.77 680.14 1262.66 cv
679.476 1263.28 678.63 1263.69 677.703 1263.79 cv
675.479 1264.02 673.603 1262.37 673.521 1260.1 cv
673.44 1257.82 675.184 1255.78 677.409 1255.54 cv
678.259 1255.46 679.062 1255.64 679.73 1256.03 cv
679.73 1256.04 li
679.987 1257.3 680.149 1258.6 680.197 1259.95 cv
cp
f
674.459 1245.72 mo
674.156 1247.66 672.576 1249.25 670.613 1249.46 cv
668.388 1249.69 666.513 1248.04 666.432 1245.77 cv
666.367 1243.94 667.475 1242.27 669.061 1241.56 cv
671.076 1242.64 672.897 1244.05 674.459 1245.72 cv
cp
f
645.689 1249 mo
645.771 1251.28 644.034 1253.32 641.802 1253.55 cv
640.223 1253.72 638.829 1252.95 638.115 1251.67 cv
639.432 1249.35 641.103 1247.26 643.054 1245.46 cv
644.546 1245.92 645.628 1247.28 645.689 1249 cv
cp
f
647.188 1277.49 mo
647.261 1279.53 645.876 1281.37 643.976 1281.9 cv
642.16 1280.64 640.558 1279.09 639.204 1277.31 cv
639.204 1277.3 li
639.588 1275.47 641.126 1273.99 643.006 1273.79 cv
645.238 1273.55 647.106 1275.21 647.188 1277.49 cv
cp
f
676.815 1273.24 mo
676.815 1273.25 li
675.697 1275.17 674.335 1276.94 672.767 1278.5 cv
670.646 1278.6 668.907 1276.98 668.829 1274.79 cv
668.748 1272.51 670.491 1270.47 672.722 1270.24 cv
674.724 1270.03 676.426 1271.33 676.815 1273.24 cv
cp
f
776.237 1142.47 mo
776.237 1144.15 776.043 1145.76 775.652 1147.31 cv
775.596 1147.51 775.555 1147.7 775.499 1147.9 cv
774.37 1151.94 771.987 1155.46 768.795 1158.03 cv
767.458 1159.12 765.966 1160.02 764.363 1160.75 cv
762.58 1161.54 760.657 1162.08 758.65 1162.32 cv
758.44 1162.33 758.246 1162.36 758.036 1162.38 cv
757.451 1162.43 756.852 1162.46 756.252 1162.46 cv
755.945 1162.46 755.653 1162.46 755.347 1162.43 cv
755.166 1162.43 754.984 1162.42 754.803 1162.4 cv
754.733 1162.4 754.663 1162.4 754.594 1162.39 cv
752.852 1162.25 751.166 1161.89 749.591 1161.32 cv
744.253 1159.42 739.96 1155.34 737.8 1150.14 cv
737.73 1149.97 737.661 1149.79 737.591 1149.61 cv
737.061 1148.24 736.699 1146.81 736.49 1145.33 cv
736.351 1144.4 736.281 1143.45 736.281 1142.47 cv
736.281 1141.96 736.295 1141.46 736.351 1140.96 cv
736.587 1137.74 737.591 1134.74 739.18 1132.11 cv
739.263 1131.97 739.361 1131.83 739.444 1131.69 cv
742.176 1127.45 746.44 1124.33 751.458 1123.09 cv
752.085 1122.93 752.727 1122.81 753.368 1122.71 cv
753.716 1122.66 754.064 1122.61 754.413 1122.59 cv
754.942 1122.53 755.472 1122.52 756.015 1122.5 cv
756.252 1122.5 li
756.573 1122.5 756.894 1122.52 757.214 1122.53 cv
757.827 1122.56 758.412 1122.61 759.012 1122.7 cv
764.141 1123.41 768.656 1126.06 771.764 1129.89 cv
771.875 1130.01 771.973 1130.14 772.071 1130.27 cv
773.45 1132.05 774.523 1134.06 775.234 1136.24 cv
775.708 1137.64 776.015 1139.1 776.154 1140.63 cv
776.209 1141.23 776.237 1141.85 776.237 1142.47 cv
cp
f
874.016 1225.41 mo
874.016 1250.96 li
874.016 1253.12 872.386 1254.92 870.242 1255.14 cv
846.183 1257.61 li
843.716 1257.86 841.568 1255.93 841.552 1253.45 cv
841.383 1227.92 li
841.369 1225.75 843.003 1223.93 845.158 1223.71 cv
869.386 1221.23 li
871.863 1220.98 874.016 1222.92 874.016 1225.41 cv
cp
f
671.933 1037.96 mo
671.933 1063.51 li
671.933 1065.67 670.302 1067.47 668.158 1067.69 cv
644.099 1070.16 li
641.632 1070.41 639.484 1068.48 639.468 1066 cv
639.299 1040.47 li
639.285 1038.3 640.919 1036.48 643.074 1036.26 cv
667.302 1033.78 li
669.78 1033.53 671.933 1035.47 671.933 1037.96 cv
cp
f
772.216 1031.92 mo
772.141 1045.25 li
772.141 1047.4 770.51 1049.21 768.366 1049.43 cv
744.307 1051.89 li
741.84 1052.14 739.692 1050.22 739.676 1047.74 cv
739.583 1034.42 li
739.568 1032.26 741.203 1030.43 743.357 1030.21 cv
767.586 1027.73 li
770.063 1027.48 772.216 1029.42 772.216 1031.92 cv
cp
f
662.112 1047.18 mo
662.112 1057.41 li
662.112 1058.27 661.46 1058.99 660.602 1059.08 cv
650.975 1060.07 li
649.988 1060.17 649.129 1059.4 649.123 1058.4 cv
649.055 1048.19 li
649.049 1047.32 649.703 1046.59 650.565 1046.5 cv
660.26 1045.51 li
661.251 1045.41 662.112 1046.19 662.112 1047.18 cv
cp
.803922 .713726 .713726 rgb
f
672.629 1139.7 mo
672.629 1165.25 li
672.629 1167.41 670.999 1169.21 668.855 1169.43 cv
644.795 1171.9 li
642.329 1172.15 640.181 1170.22 640.165 1167.74 cv
639.996 1142.21 li
639.981 1140.04 641.616 1138.22 643.771 1138 cv
667.999 1135.52 li
670.477 1135.27 672.629 1137.21 672.629 1139.7 cv
cp
.25098 .145098 .145098 rgb
f
873.415 1005.53 mo
873.386 1005.17 873.119 1004.81 872.718 1004.83 cv
870.021 1004.97 866.573 1005.08 864.156 1006.43 cv
862.057 1007.61 862.063 1010.07 860.984 1011.85 cv
844.925 1013.5 li
842.771 1013.72 841.136 1015.54 841.15 1017.71 cv
841.319 1043.24 li
841.335 1045.72 843.484 1047.65 845.95 1047.39 cv
870.009 1044.93 li
872.154 1044.71 873.784 1042.9 873.784 1040.75 cv
873.784 1040.75 874.034 1013.21 873.415 1005.53 cv
cp
f
854.949 1152.99 mo
843.854 1152.99 835.102 1143.96 835.438 1132.87 cv
835.774 1121.77 845.074 1112.75 856.169 1112.75 cv
867.264 1112.75 876.017 1121.77 875.68 1132.87 cv
875.344 1143.96 866.044 1152.99 854.949 1152.99 cv
cp
f
766.664 1248.23 mo
766.664 1252.85 763.232 1256.59 758.999 1256.59 cv
754.765 1256.59 751.333 1252.85 751.333 1248.23 cv
751.333 1243.61 754.765 1239.87 758.999 1239.87 cv
763.232 1239.87 766.664 1243.61 766.664 1248.23 cv
cp
f
1631.66 1358.03 mo
1627.53 1340.84 1622.16 1323.98 1615.48 1307.62 cv
1609.57 1293.13 1603.06 1278.33 1591.78 1267.16 cv
1591.08 1266.47 1590 1267.54 1590.7 1268.23 cv
1602.43 1279.85 1609.05 1295.55 1615.07 1310.65 cv
1621.26 1326.19 1626.28 1342.17 1630.19 1358.43 cv
1630.42 1359.38 1631.89 1358.98 1631.66 1358.03 cv
cp
.411765 .266667 .219608 rgb
f
1520.86 1590.68 mo
1503.61 1590.68 li
1503.61 1378.55 li
1520.86 1378.55 li
1520.86 1590.68 li
cp
.25098 .145098 .145098 rgb
f
1291.2 1312.13 mo
1283.26 1312.36 1275.29 1314.7 1268.22 1317.92 cv
1256.15 1323.43 1245.49 1331.45 1236.83 1340.87 cv
1229.01 1349.39 1221.36 1359.92 1208.95 1362.71 cv
1208.51 1362.47 1207.89 1362.6 1207.64 1362.98 cv
1207.54 1363 1207.45 1363.03 1207.35 1363.04 cv
1206.19 1363.23 1206.59 1364.84 1207.75 1364.65 cv
1207.79 1364.65 1207.83 1364.63 1207.88 1364.63 cv
1211.5 1376.41 1214.11 1388.45 1215.54 1400.67 cv
1217.01 1413.32 1216.64 1426.03 1217.24 1438.73 cv
1218.38 1462.94 1227.85 1485.14 1233.95 1508.37 cv
1237.31 1521.17 1238.3 1533.86 1238.88 1547.02 cv
1239.31 1556.73 1245.03 1577.89 1251.34 1586.09 cv
1256.64 1592.98 1260.2 1586.56 1269.26 1587.16 cv
1274.92 1587.54 1280.63 1586.92 1286.22 1585.99 cv
1291.95 1585.05 1298.18 1584.18 1303.61 1582.13 cv
1308.23 1580.39 1311.32 1577.08 1313.61 1573.17 cv
1325.12 1571.41 1336.54 1569.05 1347.77 1566.08 cv
1353.49 1564.56 1359.17 1562.89 1364.79 1561.07 cv
1367.61 1560.16 1371.33 1559.44 1373.83 1557.87 cv
1377.81 1555.38 1376.92 1552.1 1376.79 1548.62 cv
1375.94 1526.85 1374.72 1505.1 1373.22 1483.38 cv
1367.14 1395.47 1356.93 1340.7 1346.05 1253.31 cv
1327.77 1272.92 1309.49 1292.52 1291.2 1312.13 cv
cp
.631373 .329412 .188235 rgb
f
1699.79 1262.05 mo
1698.88 1256 1698.19 1248.92 1695.64 1243.29 cv
1693.59 1238.81 1689.42 1237.06 1684.69 1236.96 cv
1677.81 1236.82 1670.63 1238.61 1663.92 1239.94 cv
1647.99 1243.1 1632.33 1247.49 1616.65 1251.7 cv
1584.83 1260.24 1553.02 1268.79 1521.2 1277.33 cv
1489.83 1285.75 1458.21 1293.59 1427.13 1303.05 cv
1413.54 1307.18 1399.47 1311.51 1388.02 1320.22 cv
1376.71 1328.81 1368.93 1341.15 1357.5 1349.59 cv
1354.95 1351.47 1352.25 1353.1 1349.42 1354.42 cv
1349.42 1351.33 1349.22 1348.24 1348.68 1345.15 cv
1348.52 1344.19 1347.05 1344.6 1347.22 1345.55 cv
1347.77 1348.74 1347.93 1351.92 1347.89 1355.11 cv
1344.6 1356.47 1341.12 1357.37 1337.47 1357.62 cv
1336.5 1357.69 1336.49 1359.21 1337.47 1359.14 cv
1341.13 1358.89 1344.59 1358.03 1347.86 1356.73 cv
1347.5 1367.49 1345.09 1378.26 1347.26 1388.98 cv
1349.72 1401.09 1358.16 1407.95 1369.76 1411.03 cv
1385.09 1415.1 1401.01 1417.5 1416.56 1420.64 cv
1432.6 1423.87 1448.64 1427.1 1464.68 1430.33 cv
1479.83 1433.38 1495.51 1437.89 1511.09 1437.46 cv
1525.16 1437.07 1537.95 1431.06 1549.87 1424.05 cv
1577.81 1407.64 1605.06 1389.9 1632.29 1372.35 cv
1654.66 1357.92 1682.21 1343.82 1694.12 1318.63 cv
1699.55 1307.14 1701.55 1294.35 1701.45 1281.72 cv
1701.4 1275.13 1700.78 1268.56 1699.79 1262.05 cv
cp
.25098 .145098 .145098 rgb
f
1716.74 972.087 mo
1711.01 956.809 1698.9 946.147 1683.33 940.91 cv
1666.23 935.159 1582.75 918.208 1559.3 918.445 cv
1540.65 918.633 1521.46 918.92 1503.35 924.601 cv
1486.94 929.749 1473.09 939.804 1463.96 954.349 cv
1454.55 969.347 1450.31 986.705 1446.02 1003.47 cv
1444.75 1008.41 1443.47 1013.34 1442.08 1018.25 cv
1440.1 1020.15 1438.86 1023.05 1440.02 1025.17 cv
1439.68 1026.26 1439.35 1027.36 1439 1028.44 cv
1438.69 1029.37 1440.15 1029.76 1440.45 1028.84 cv
1440.71 1028.06 1440.96 1027.27 1441.2 1026.48 cv
1441.39 1026.61 1441.57 1026.74 1441.79 1026.86 cv
1442.64 1027.31 1443.45 1026.02 1442.61 1025.56 cv
1442.22 1025.36 1441.93 1025.12 1441.7 1024.86 cv
1442.28 1022.96 1442.84 1021.03 1443.38 1019.07 cv
1445.86 1016.99 1448.67 1017.37 1450.97 1019.43 cv
1454.38 1022.47 1455.25 1027.6 1456.1 1031.88 cv
1458.35 1043.15 1460.26 1054.49 1461.97 1065.86 cv
1465.38 1088.56 1467.88 1111.4 1470.07 1134.28 cv
1472.27 1157.25 1474.14 1180.27 1476.29 1203.25 cv
1478.28 1224.62 1480.1 1246.16 1483.59 1267.3 cv
1486.52 1285.03 1491.68 1303.22 1504.31 1316.48 cv
1516.1 1328.87 1532.77 1335.21 1549.68 1338.1 cv
1568.27 1341.28 1587.65 1341 1606.56 1339.62 cv
1626.94 1338.13 1647.44 1334.55 1666.57 1326.75 cv
1675.07 1323.28 1684.1 1319.21 1691 1313.02 cv
1697.98 1306.76 1700.39 1298.53 1701.26 1289.7 cv
1703.57 1266.27 1704.59 1242.69 1706.23 1219.23 cv
1709.53 1172.05 1712.82 1124.88 1716.11 1077.71 cv
1717.74 1054.37 1719.17 1048.77 1720.78 1025.43 cv
1722.01 1007.66 1723.04 988.863 1716.74 972.087 cv
cp
f
1677.13 1171.02 mo
1674.93 1190.57 1672.73 1210.12 1670.54 1229.67 cv
1668.45 1248.22 1667.66 1267.75 1661.16 1285.42 cv
1649.21 1317.89 1615.51 1334.67 1588 1352 cv
1580 1357.04 1572.06 1362.17 1564.24 1367.48 cv
1564.14 1368.17 1564.02 1368.86 1563.88 1369.55 cv
1571.48 1364.37 1579.2 1359.36 1586.97 1354.45 cv
1601.63 1345.18 1616.82 1336.54 1630.6 1325.98 cv
1642.7 1316.71 1653.73 1305.6 1660.23 1291.62 cv
1667.68 1275.6 1668.93 1257.52 1670.87 1240.2 cv
1673.47 1217.14 1676.06 1194.08 1678.65 1171.02 cv
1678.76 1170.05 1677.24 1170.06 1677.13 1171.02 cv
cp
.411765 .266667 .219608 rgb
f
1608.05 1241.4 mo
1607.99 1230.73 1608.09 1219.38 1597.27 1213.9 cv
1592.86 1211.66 1587.89 1210.73 1583.02 1210.09 cv
1576.19 1209.21 1569.29 1208.57 1562.43 1208.07 cv
1537.92 1206.25 1510.98 1208.23 1492.04 1225.8 cv
1491.36 1226.44 1490.74 1227.11 1490.08 1227.78 cv
1452.48 1224.86 1414.61 1222.74 1376.97 1223.21 cv
1357.67 1223.44 1303.21 1209.62 1251.13 1268.75 cv
1232.49 1289.93 1220.78 1318.3 1197.18 1334.28 cv
1185.65 1342.08 1173.31 1348.64 1162.18 1357.02 cv
1151.72 1364.88 1143.11 1374.54 1135.15 1384.86 cv
1126.88 1395.55 1119.23 1406.74 1110.09 1416.72 cv
1100.47 1427.25 1051.09 1450.07 1041.27 1460.39 cv
1037.54 1464.3 1033.83 1468.65 1032.02 1473.81 cv
1031.79 1474.45 1031.61 1475.09 1031.44 1475.76 cv
1029.95 1481.94 1068.78 1473.73 1070.17 1479.78 cv
1073.04 1492.28 1077.6 1504.41 1083.59 1515.75 cv
1089.7 1527.28 1097.32 1537.99 1106.21 1547.54 cv
1114.54 1556.44 1124.98 1565.68 1137.61 1567.13 cv
1141.22 1567.54 1144.52 1567.13 1147.57 1566.14 cv
1154.6 1563.82 1160.32 1558.4 1165.59 1552.74 cv
1170.2 1547.75 1170.26 1573.76 1175.79 1569.75 cv
1181.22 1565.81 1197.86 1535.61 1203.57 1532.08 cv
1215.14 1524.94 1218.71 1512.95 1227.65 1502.68 cv
1237.22 1491.69 1246.42 1481.26 1258.53 1472.95 cv
1269.61 1465.32 1281.44 1458.81 1291.79 1450.15 cv
1302.07 1441.53 1311.02 1431.49 1320.01 1421.59 cv
1329.24 1411.46 1338.63 1401.32 1349.59 1393.02 cv
1352.33 1390.97 1355.16 1389.03 1358.05 1387.22 cv
1367.88 1383.62 1378.31 1381.64 1388.68 1380.34 cv
1418.16 1376.61 1495.26 1382.58 1510.2 1383.37 cv
1522.7 1384.03 1547.66 1379.98 1559 1374.3 cv
1578.41 1364.59 1591.61 1345.11 1598.63 1325.07 cv
1608 1298.3 1608.25 1269.42 1608.05 1241.4 cv
cp
.631373 .329412 .188235 rgb
f
1588.58 1229.59 mo
1586.51 1243.08 1583.72 1256.44 1580.18 1269.62 cv
1577.1 1281.02 1574.03 1293.03 1568.56 1303.55 cv
1558.93 1322.08 1539.17 1327.01 1519.66 1326.17 cv
1498.07 1325.24 1476.67 1319.7 1455.51 1315.64 cv
1433.52 1311.42 1411.14 1307.95 1388.68 1309.7 cv
1369.27 1311.19 1349.66 1316.44 1333.53 1327.66 cv
1315.83 1339.95 1306.22 1359.75 1290.51 1374.07 cv
1275.98 1387.31 1258.37 1396.4 1241.77 1406.74 cv
1223.43 1418.17 1208.1 1432.32 1193.57 1448.25 cv
1179.67 1463.45 1166.17 1478.83 1150.45 1492.19 cv
1137.77 1502.97 1124.29 1513.47 1114.86 1527.23 cv
1114.52 1526.82 1114.19 1526.41 1113.85 1526 cv
1124.26 1511 1139.35 1499.88 1153.05 1487.96 cv
1170.66 1472.65 1185.2 1454.41 1201.36 1437.68 cv
1215.5 1423.02 1231.09 1411.32 1248.5 1400.85 cv
1265.88 1390.4 1283.85 1380.27 1297.42 1364.88 cv
1304.38 1356.98 1310.24 1348.21 1317.18 1340.33 cv
1323.39 1333.29 1330.56 1327.3 1338.66 1322.59 cv
1354.88 1313.17 1373.68 1308.94 1392.27 1307.93 cv
1413.67 1306.78 1434.98 1310.16 1455.92 1314.18 cv
1477.65 1318.35 1499.73 1324.24 1521.96 1324.72 cv
1531.36 1324.94 1541.15 1323.98 1549.78 1319.94 cv
1559.6 1315.36 1565.79 1307.04 1569.8 1297.2 cv
1578.55 1275.7 1583.59 1252.04 1587.12 1229.18 cv
1587.27 1228.22 1588.73 1228.63 1588.58 1229.59 cv
cp
.25098 .145098 .145098 rgb
f
1679.88 1016.95 mo
1678.51 1007.66 1676.89 997.874 1671.7 989.776 cv
1670.94 988.588 1670.11 987.432 1669.18 986.321 cv
1668.2 985.148 1667.18 984.038 1666.12 982.987 cv
1660.42 977.279 1653.54 973.048 1646.04 969.699 cv
1645.98 969.684 1645.93 969.668 1645.89 969.638 cv
1645.48 969.456 1645.08 969.273 1644.67 969.105 cv
1630.64 963.108 1615.83 957.431 1600.76 952.849 cv
1598.53 952.164 1596.31 951.509 1594.07 950.9 cv
1586.22 948.693 1578.32 946.821 1570.45 945.406 cv
1564.33 944.294 1558.15 943.549 1551.94 943.153 cv
1550.91 943.077 1550.91 944.599 1551.94 944.675 cv
1552.37 944.706 1552.81 944.736 1553.24 944.781 cv
1540.14 946.547 1527.02 948.206 1513.95 950.124 cv
1511.48 950.474 1509.02 950.839 1506.55 951.235 cv
1504.92 951.479 1503.29 951.738 1501.67 951.997 cv
1486.09 954.523 1470.31 958.1 1456.61 965.848 cv
1452.26 968.314 1448.28 971.19 1444.62 974.372 cv
1441.33 977.218 1438.28 980.308 1435.44 983.581 cv
1431.4 988.163 1427.73 993.079 1424.29 998.087 cv
1414.02 1013.06 1404.43 1028.48 1394.67 1043.77 cv
1383.96 1060.56 1373.38 1077.44 1362.88 1094.35 cv
1362.6 1093.21 1362.33 1092.06 1362.07 1090.92 cv
1361.84 1089.96 1360.29 1090.37 1360.52 1091.32 cv
1360.9 1092.98 1361.29 1094.62 1361.69 1096.26 cv
1361.34 1096.83 1360.97 1097.39 1360.62 1097.96 cv
1360.11 1098.81 1361.49 1099.57 1362.02 1098.73 cv
1362.07 1098.62 1362.13 1098.53 1362.19 1098.44 cv
1362.34 1099.04 1362.48 1099.64 1362.63 1100.25 cv
1360.76 1099.92 1358.98 1099.29 1357.32 1098.2 cv
1356.47 1097.62 1355.68 1098.94 1356.51 1099.51 cv
1358.57 1100.88 1360.75 1101.56 1363.01 1101.88 cv
1363.74 1104.96 1364.47 1108.05 1365.2 1111.14 cv
1365.43 1112.1 1366.99 1111.7 1366.76 1110.74 cv
1366.07 1107.83 1365.39 1104.94 1364.7 1102.05 cv
1370.3 1102.4 1376.26 1100.92 1381.81 1102.03 cv
1389.53 1103.56 1389.67 1110.57 1389.96 1116.69 cv
1390.17 1121.12 1391.29 1125.03 1394.19 1128.6 cv
1397.17 1132.28 1401.17 1135.08 1405.13 1137.76 cv
1405.71 1138.15 1406.3 1138.55 1406.88 1138.95 cv
1409.06 1140.44 1411.2 1141.94 1413.33 1143.47 cv
1415.98 1145.38 1418.6 1147.33 1421.17 1149.34 cv
1431.17 1157.17 1440.63 1165.58 1450.02 1174.08 cv
1454.66 1178.28 1459.38 1182.57 1464.19 1186.83 cv
1466.31 1188.72 1468.45 1190.61 1470.61 1192.48 cv
1492.65 1211.58 1516.84 1229.54 1545.03 1237.37 cv
1547.31 1238.01 1549.63 1238.57 1551.97 1239.07 cv
1558.43 1240.44 1565.09 1241.26 1571.99 1241.45 cv
1591.08 1241.95 1610.19 1237.03 1625.07 1225.77 cv
1627.04 1224.28 1628.95 1222.66 1630.77 1220.93 cv
1631.52 1220.21 1632.26 1219.5 1632.96 1218.75 cv
1646.88 1204.46 1654.46 1185.63 1660.32 1167.3 cv
1661.92 1162.28 1663.48 1157.23 1664.99 1152.14 cv
1677.94 1108.37 1686.58 1062.14 1679.88 1016.95 cv
cp
.968627 .937255 .92549 rgb
f
1588.82 875.558 mo
1588.86 873.768 1588.9 871.977 1588.95 870.187 cv
1589.16 861.073 1589.48 851.963 1589.88 842.84 cv
1587.24 843.677 1584.61 844.543 1581.99 845.424 cv
1566.24 850.681 1550.69 856.664 1535.32 863.269 cv
1534.69 882.195 1534.63 901.125 1535.14 920.001 cv
1535.49 933.305 1536.11 946.604 1537.03 959.854 cv
1554.51 957.563 1571.97 954.979 1589.4 952.129 cv
1588.49 926.645 1588.29 901.111 1588.82 875.558 cv
cp
.988235 .654902 .494118 rgb
f
1587.87 862.359 mo
1587.86 860.514 1588.53 859.103 1589.53 858.077 cv
1587.87 846.2 1588.6 834.175 1591.65 822.312 cv
1591.67 822.244 1591.7 822.182 1591.71 822.115 cv
1588.42 812.503 1583.03 803.662 1579.52 793.865 cv
1578.49 790.982 1577.51 788.347 1576.44 785.95 cv
1567.27 787.168 1558.09 788.274 1548.9 789.356 cv
1537.14 790.741 1525.39 792.203 1513.63 793.606 cv
1507.98 794.28 1502.32 794.922 1496.76 796.125 cv
1493.38 796.854 1490.19 798.036 1486.96 799.108 cv
1484.91 805.544 1483.96 812.345 1483.73 819.276 cv
1483.14 837.617 1485.86 859.545 1488.38 878.51 cv
1490.43 893.875 1496.89 913.704 1516.42 920.613 cv
1523.61 923.158 1531.22 923.02 1538.56 921.273 cv
1555.33 917.345 1567.72 905.103 1574.51 897.563 cv
1577.94 893.755 1584.07 884.942 1588.36 871.357 cv
1587.98 868.407 1587.87 865.383 1587.87 862.359 cv
cp
f
1534.56 851.314 mo
1534.62 855.464 1536.84 858.794 1539.5 858.751 cv
1542.17 858.708 1544.27 855.309 1544.21 851.158 cv
1544.14 847.008 1541.92 843.678 1539.26 843.721 cv
1536.6 843.764 1534.49 847.163 1534.56 851.314 cv
cp
.25098 .145098 .145098 rgb
f
1497.69 850.712 mo
1497.75 854.862 1499.97 858.192 1502.63 858.149 cv
1505.29 858.106 1507.4 854.707 1507.33 850.557 cv
1507.27 846.406 1505.05 843.076 1502.39 843.119 cv
1499.72 843.162 1497.62 846.562 1497.69 850.712 cv
cp
f
1548.85 771.302 mo
1531.16 770.034 1513.08 773.733 1499.56 783.808 cv
1489.14 791.571 1485.96 800.288 1485.16 806.099 cv
1485.08 806.665 1485.48 807.185 1486.1 807.035 cv
1500.75 803.469 1515.84 802.149 1530.88 803.314 cv
1538.81 803.928 1547.11 805.141 1554.48 808.278 cv
1559.58 811.302 1563.49 815.758 1565.14 821.977 cv
1566.98 828.869 1564.94 837.214 1568.45 843.602 cv
1569.97 846.377 1572.5 847.675 1575.11 849.253 cv
1579.96 852.179 1580.65 855.956 1580.84 861.222 cv
1581.06 867.487 1588.78 885.905 1588.86 884.124 cv
1591.65 857.486 1607.09 834.549 1597.49 805.734 cv
1587.59 776.052 1560.99 772.169 1548.85 771.302 cv
cp
f
1580.7 845.066 mo
1576.92 842.757 1572.14 842.967 1568.74 845.839 cv
1564.71 849.255 1564.07 854.483 1565.36 859.37 cv
1565.99 861.738 1567.88 862.684 1569.77 862.586 cv
1569.74 864.909 1570.2 867.179 1571.39 869.023 cv
1573.92 872.91 1578.98 873.085 1582.12 869.918 cv
1588.49 863.516 1589.03 850.171 1580.7 845.066 cv
cp
.988235 .654902 .494118 rgb
f
1510.47 827.662 mo
1508.24 822.441 1501.19 821.507 1496.35 823.901 cv
1494.23 824.756 1492.39 826.582 1491.67 829.002 cv
1490.82 831.814 1491.98 834.992 1494.65 835.77 cv
1496.9 836.424 1499.68 836.092 1502.01 836.189 cv
1504.06 836.275 1506.45 836.782 1508.42 835.949 cv
1511.43 834.676 1511.69 830.522 1510.47 827.662 cv
cp
.25098 .145098 .145098 rgb
f
1548.52 827.662 mo
1546.29 822.441 1539.24 821.507 1534.41 823.901 cv
1532.28 824.756 1530.45 826.582 1529.72 829.002 cv
1528.88 831.814 1530.03 834.992 1532.7 835.77 cv
1534.96 836.424 1537.74 836.092 1540.06 836.189 cv
1542.11 836.275 1544.5 836.782 1546.47 835.949 cv
1549.48 834.676 1549.75 830.522 1548.52 827.662 cv
cp
f
1571.88 853.003 mo
1570.93 852.751 1570.53 854.219 1571.47 854.471 cv
1575.83 855.629 1576.51 864.105 1571.64 864.983 cv
1570.67 865.157 1571.08 866.624 1572.04 866.451 cv
1578.46 865.295 1577.64 854.535 1571.88 853.003 cv
cp
.741176 .356863 .14902 rgb
f
1528.24 875.191 mo
1522.82 872.891 1514.81 869.871 1514.69 863.025 cv
1514.58 856.809 1517.27 849.691 1519.67 844.071 cv
1520.05 843.181 1518.74 842.404 1518.36 843.303 cv
1516.87 846.78 1515.61 850.329 1514.69 854.001 cv
1513.85 857.404 1512.67 861.581 1513.24 865.115 cv
1514.24 871.276 1522.54 874.413 1527.48 876.505 cv
1528.37 876.883 1529.14 875.572 1528.24 875.191 cv
cp
f
1536.63 886.931 mo
1532.04 890.513 1526.31 891.649 1520.69 890.189 cv
1519.74 889.943 1519.34 891.411 1520.29 891.657 cv
1526.47 893.264 1532.67 891.933 1537.71 888.008 cv
1538.48 887.406 1537.39 886.336 1536.63 886.931 cv
cp
f
1594.07 950.9 mo
1573.45 1036.63 1557.98 1123.57 1547.88 1211.16 cv
1546.87 1219.89 1545.91 1228.63 1545.03 1237.37 cv
1547.31 1238.01 1549.63 1238.57 1551.97 1239.07 cv
1559.86 1162.05 1571.84 1085.46 1587.88 1009.7 cv
1591.91 990.689 1596.21 971.739 1600.76 952.849 cv
1598.53 952.164 1596.31 951.509 1594.07 950.9 cv
cp
.890196 .458824 .223529 rgb
f
1497.01 1244.67 mo
1281.58 1223.59 li
1348.19 1201.51 li
1567.68 1214.18 li
1567.55 1222.8 li
1497.01 1244.67 li
cp
.25098 .145098 .145098 rgb
f
1506.55 951.235 mo
1488.15 1028.93 1473.98 1107.61 1464.19 1186.83 cv
1466.31 1188.72 1468.45 1190.61 1470.61 1192.48 cv
1478.33 1128.76 1488.83 1065.4 1502.14 1002.61 cv
1505.85 985.073 1509.79 967.568 1513.95 950.124 cv
1511.48 950.474 1509.02 950.839 1506.55 951.235 cv
cp
.890196 .458824 .223529 rgb
f
1435.44 983.581 mo
1424.05 1035.01 1414.51 1086.83 1406.88 1138.95 cv
1409.06 1140.44 1411.2 1141.94 1413.33 1143.47 cv
1420.09 1096.6 1428.39 1049.95 1438.21 1003.61 cv
1440.28 993.855 1442.41 984.099 1444.62 974.372 cv
1441.33 977.218 1438.28 980.308 1435.44 983.581 cv
cp
f
1497.52 1236.04 mo
1278.15 1214.75 li
1348.69 1192.89 li
1568.06 1214.18 li
1497.52 1236.04 li
cp
.25098 .145098 .145098 rgb
f
1611 1677.38 mo
1610.14 1670.47 1609.29 1663.55 1608.38 1656.65 cv
1607.36 1648.82 1605.87 1639.83 1601.11 1632.26 cv
1592.86 1619.13 1578.01 1612.35 1564.92 1606.37 cv
1562.81 1605.41 li
1523.99 1587.6 1474.04 1566.71 1441.15 1555.96 cv
1430.22 1552.39 1422.54 1554.39 1418.35 1561.9 cv
1415.83 1566.41 1415.02 1571.53 1414.3 1576.06 cv
1414.07 1577.46 li
1413.19 1582.91 1412.73 1588.63 1412.71 1594.45 cv
1412.7 1596.09 1413.54 1597.46 1414.96 1598.1 cv
1416.4 1598.76 1418.2 1598.54 1419.65 1597.55 cv
1421.07 1596.56 1421.93 1595 1421.93 1593.35 cv
1421.96 1585.57 1422.41 1575.54 1425.71 1566.95 cv
1426.5 1564.9 1427.44 1564.24 1428.08 1563.93 cv
1431.47 1562.25 1437.99 1564.73 1442.31 1566.38 cv
1443.3 1566.75 1444.23 1567.11 1445.08 1567.4 cv
1461.06 1572.98 1557.26 1613.44 1558.74 1614.09 cv
1570.65 1619.41 1582.96 1624.91 1590.79 1634.56 cv
1596.3 1641.35 1598.1 1650.19 1599.22 1658.73 cv
1600.12 1665.61 1600.97 1672.51 1601.82 1679.4 cv
1602.23 1682.73 1602.64 1686.06 1603.06 1689.39 cv
1603.27 1691.02 1604.32 1692.28 1605.87 1692.74 cv
1606.47 1692.92 1607.11 1692.97 1607.74 1692.89 cv
1608.73 1692.77 1609.71 1692.34 1610.5 1691.65 cv
1611.79 1690.54 1612.43 1688.93 1612.23 1687.35 cv
1611.82 1684.03 1611.41 1680.71 1611 1677.38 cv
cp
f
1392.92 1653.6 mo
1393.82 1646.89 1394.73 1640.19 1395.68 1633.51 cv
1396.77 1625.93 1398.35 1617.31 1403.39 1610.91 cv
1412.12 1599.82 1427.83 1596.7 1441.69 1593.95 cv
1443.93 1593.5 li
1485.02 1585.26 1566.21 1574.5 1601.02 1571.86 cv
1612.6 1570.99 1620.72 1574.88 1625.17 1583.43 cv
1627.83 1588.55 1628.69 1593.88 1629.45 1598.58 cv
1629.69 1600.04 li
1630.63 1605.71 1631.12 1611.54 1631.13 1617.36 cv
1631.14 1619.01 1630.25 1620.17 1628.75 1620.46 cv
1627.22 1620.76 1625.32 1620.11 1623.79 1618.75 cv
1622.28 1617.42 1621.37 1615.64 1621.37 1613.99 cv
1621.34 1606.2 1620.86 1596.06 1617.37 1586.66 cv
1616.54 1584.42 1615.54 1583.53 1614.86 1583.05 cv
1611.27 1580.54 1604.37 1581.41 1599.8 1581.99 cv
1598.75 1582.13 1597.76 1582.25 1596.87 1582.34 cv
1579.95 1583.97 1563 1586.02 1546.46 1588.43 cv
1529.89 1590.84 1469.01 1599.14 1452.87 1602.31 cv
1451.34 1602.61 1449.8 1602.9 1448.24 1603.19 cv
1435.63 1605.57 1422.59 1608.03 1414.3 1615.76 cv
1408.47 1621.19 1406.57 1629.59 1405.39 1637.85 cv
1404.43 1644.51 1403.53 1651.19 1402.63 1657.88 cv
1402.19 1661.11 1401.76 1664.34 1401.32 1667.56 cv
1401.1 1669.14 1399.99 1670.14 1398.34 1670.22 cv
1397.7 1670.25 1397.03 1670.14 1396.36 1669.91 cv
1395.32 1669.54 1394.28 1668.88 1393.44 1667.98 cv
1392.08 1666.56 1391.4 1664.79 1391.61 1663.26 cv
1392.05 1660.04 1392.48 1656.82 1392.92 1653.6 cv
cp
f
1419.38 1675.37 mo
1419.38 1687.7 1409.5 1697.69 1397.31 1697.69 cv
1385.12 1697.69 1375.24 1687.7 1375.24 1675.37 cv
1375.24 1663.04 1385.12 1653.04 1397.31 1653.04 cv
1409.5 1653.04 1419.38 1663.04 1419.38 1675.37 cv
cp
f
1626.39 1694.65 mo
1626.39 1706.98 1616.51 1716.97 1604.32 1716.97 cv
1592.13 1716.97 1582.25 1706.98 1582.25 1694.65 cv
1582.25 1682.32 1592.13 1672.32 1604.32 1672.32 cv
1616.51 1672.32 1626.39 1682.32 1626.39 1694.65 cv
cp
f
1650.24 1623.11 mo
1650.24 1635.44 1640.36 1645.43 1628.17 1645.43 cv
1615.98 1645.43 1606.1 1635.44 1606.1 1623.11 cv
1606.1 1610.78 1615.98 1600.78 1628.17 1600.78 cv
1640.36 1600.78 1650.24 1610.78 1650.24 1623.11 cv
cp
f
1436.13 1599.26 mo
1436.13 1611.59 1426.24 1621.59 1414.05 1621.59 cv
1401.86 1621.59 1391.98 1611.59 1391.98 1599.26 cv
1391.98 1586.93 1401.86 1576.94 1414.05 1576.94 cv
1426.24 1576.94 1436.13 1586.93 1436.13 1599.26 cv
cp
f
1361.47 1554.88 mo
1358.95 1555.57 1356.42 1556.3 1353.94 1557.04 cv
1353.38 1557.2 1352.83 1557.38 1352.25 1557.55 cv
1343.88 1560.01 1335.6 1562.63 1327.06 1564.58 cv
1326.74 1564.65 1326.44 1564.71 1326.12 1564.79 cv
1319.19 1566.36 1312.2 1567.7 1305.19 1568.89 cv
1301.05 1569.57 1296.88 1570.21 1292.7 1570.82 cv
1290.76 1571.12 1288.81 1571.4 1286.84 1571.66 cv
1286.13 1571.76 1285.4 1571.87 1284.67 1571.96 cv
1278.33 1572.84 1265.03 1573.89 1264.44 1574.06 cv
1258.49 1575.93 1249.7 1579.43 1251.21 1585.6 cv
1252.7 1591.67 1264.26 1591.78 1270.47 1592.14 cv
1277.3 1592.56 1284.2 1592.4 1291.09 1591.84 cv
1294.21 1591.6 1297.33 1591.28 1300.45 1590.88 cv
1304.5 1590.38 1308.53 1589.77 1312.57 1589.05 cv
1316.28 1588.42 1319.98 1587.71 1323.66 1586.97 cv
1328.23 1586.04 1332.75 1585.05 1337.24 1584.05 cv
1342.69 1582.86 1348.2 1581.49 1353.39 1579.59 cv
1353.65 1579.51 1353.89 1579.42 1354.12 1579.34 cv
1357.91 1577.91 1361.52 1576.19 1364.85 1574.06 cv
1370.94 1570.1 1377.61 1563.6 1377.47 1557.26 cv
1377.27 1550 1367.18 1553.34 1361.47 1554.88 cv
cp
f
1305.19 1568.89 mo
1301.05 1569.57 1296.88 1570.21 1292.7 1570.82 cv
1290.76 1571.12 1288.81 1571.4 1286.84 1571.66 cv
1287.57 1575.16 1288.32 1578.67 1289.04 1582.17 cv
1289.1 1582.45 1289.16 1582.71 1289.2 1582.98 cv
1289.84 1585.93 1290.47 1588.89 1291.09 1591.84 cv
1291.99 1596.06 1292.89 1600.29 1293.78 1604.52 cv
1294.15 1606.22 1294.5 1607.93 1294.87 1609.62 cv
1295.95 1614.61 1297.01 1619.6 1298.09 1624.58 cv
1298.79 1627.84 1298.44 1631.83 1302.16 1632.13 cv
1305.03 1632.38 1309.2 1630.93 1312.04 1630.44 cv
1318.23 1629.38 1318.76 1632.69 1318.87 1629.76 cv
1318.95 1627.76 1321.43 1606.5 1323.66 1586.97 cv
1323.97 1584.23 1324.29 1581.5 1324.58 1578.89 cv
1325.16 1573.67 1325.69 1568.81 1326.12 1564.79 cv
1319.19 1566.36 1312.2 1567.7 1305.19 1568.89 cv
cp
.968627 .584314 .403922 rgb
f
1325.5 1676.66 mo
1323.47 1681.13 1320.33 1684.8 1316.43 1687.73 cv
1311.66 1691.33 1306.14 1693.94 1301.86 1698.16 cv
1294.91 1705.01 1292.86 1715.04 1290.43 1724.11 cv
1288.38 1731.71 1286.05 1739.91 1280.03 1745.38 cv
1272.71 1752.04 1260.37 1752.86 1251.92 1747.71 cv
1249.33 1746.11 1247.92 1744.02 1247.31 1741.65 cv
1247.18 1741.17 1247.1 1740.68 1247.04 1740.18 cv
1246.23 1733.31 1251.11 1724.67 1253.76 1719.3 cv
1259.79 1707.13 1266.83 1695.48 1273.04 1683.38 cv
1285.03 1660.09 1292.57 1634.88 1295.15 1608.81 cv
1303.9 1606.67 1313.67 1606.35 1322.1 1603.24 cv
1324.38 1617.54 1325.25 1628.72 1327.37 1643.05 cv
1327.86 1646.27 1328.29 1649.61 1328.56 1652.99 cv
1328.67 1654.3 1328.75 1655.63 1328.78 1656.95 cv
1329 1663.73 1328.29 1670.51 1325.5 1676.66 cv
cp
.25098 .145098 .145098 rgb
f
1594.74 948.598 mo
1594.13 946.356 1593.35 944.156 1592.41 942.032 cv
1591.83 940.727 1591.07 937.911 1589.57 937.333 cv
1588.16 936.794 1586.29 937.694 1584.96 938.015 cv
1581.56 938.838 1578.17 939.674 1574.77 940.525 cv
1569.14 941.936 1562.21 942.71 1557.45 946.312 cv
1554.44 948.584 1552.46 951.811 1550.39 954.947 cv
1547.07 949.518 1542.8 944.202 1537.74 940.979 cv
1535.81 939.751 1534.12 939.883 1533 941.974 cv
1530.99 945.705 1530.56 951.112 1529.53 955.222 cv
1529.47 955.461 1529.52 955.665 1529.63 955.822 cv
1530.75 960.019 1533.41 963.253 1536.48 966.251 cv
1539.93 969.622 1542.9 972.164 1547.85 972.611 cv
1559.5 973.662 1571.94 971.598 1583 968.005 cv
1587.04 966.692 1587.04 961.315 1589.88 957.948 cv
1592.76 954.531 1595.79 952.44 1594.74 948.598 cv
cp
.968627 .937255 .92549 rgb
f
1706.42 1058.41 mo
1705.07 1039.31 1701.13 1019.78 1689.67 1003.2 cv
1684.98 996.413 1679.27 990.263 1672.78 985.012 cv
1670.82 983.383 1668.8 981.846 1666.7 980.43 cv
1661.11 976.579 1655.08 973.337 1648.75 970.825 cv
1647.93 970.49 1647.01 970.095 1646.04 969.699 cv
1645.98 969.684 1645.93 969.668 1645.89 969.638 cv
1642.92 968.451 1639.53 967.355 1636.88 968.451 cv
1633.32 969.912 1632.84 974.539 1632.13 977.721 cv
1629.39 989.989 1626.98 1002.33 1624.96 1014.75 cv
1623.71 1022.33 1622.61 1029.96 1621.64 1037.6 cv
1614.49 1053.72 1608.85 1084.86 1603.07 1101.41 cv
1600.12 1109.87 1597.32 1119.33 1602.92 1127.79 cv
1605.31 1131.41 1619.6 1137.04 1635.95 1142.63 cv
1638.17 1143.41 1640.44 1144.17 1642.72 1144.93 cv
1650.3 1147.44 1658.03 1149.92 1664.99 1152.14 cv
1671.73 1154.29 1677.76 1156.21 1682.19 1157.73 cv
1685.69 1158.93 1690.76 1161.52 1694.37 1159.84 cv
1697.73 1158.26 1698.71 1153.42 1699.79 1150.32 cv
1703.17 1140.54 1705.11 1130.32 1706.17 1120 cv
1708.23 1099.77 1707.87 1078.82 1706.42 1058.41 cv
cp
f
1694.99 1155.51 mo
1693.82 1151.5 1690.26 1149.34 1686.59 1147.85 cv
1685.65 1147.46 1684.7 1147.12 1683.79 1146.8 cv
1668.8 1141.53 1653.64 1136.45 1638.08 1133.15 cv
1637.99 1133.06 1637.88 1132.98 1637.73 1132.93 cv
1635.84 1132.42 1632.04 1131.44 1627.91 1130.83 cv
1619.31 1129.54 1609.3 1129.84 1612.37 1139.24 cv
1613.72 1143.38 1618.02 1145.9 1622.13 1147.85 cv
1623.63 1148.55 1625.11 1149.19 1626.42 1149.78 cv
1633.1 1152.83 1640.03 1155.29 1647.09 1157.29 cv
1654.56 1159.4 1662.17 1161 1669.83 1162.31 cv
1673.65 1162.97 1677.5 1163.53 1681.35 1164.05 cv
1681.96 1164.14 1682.59 1164.23 1683.21 1164.33 cv
1685.34 1164.66 1687.55 1164.97 1689.65 1164.66 cv
1694.22 1163.96 1696.26 1159.77 1694.99 1155.51 cv
cp
.25098 .145098 .145098 rgb
f
1666.7 980.43 mo
1666.5 981.282 1666.3 982.135 1666.12 982.987 cv
1654.09 1035.81 1644.02 1089.07 1635.95 1142.63 cv
1632.2 1167.44 1628.89 1192.31 1626.01 1217.25 cv
1625.69 1220.09 1625.35 1222.92 1625.07 1225.77 cv
1627.04 1224.28 1628.95 1222.66 1630.77 1220.93 cv
1631.52 1220.21 1632.26 1219.5 1632.96 1218.75 cv
1635.8 1194.09 1639.05 1169.48 1642.72 1144.93 cv
1649.18 1101.65 1656.97 1058.59 1666.03 1015.79 cv
1667.87 1007.1 1669.75 998.437 1671.7 989.776 cv
1672.05 988.193 1672.42 986.595 1672.78 985.012 cv
1670.82 983.383 1668.8 981.846 1666.7 980.43 cv
cp
.890196 .458824 .223529 rgb
f
1637.76 1009.99 mo
1629.62 1047.5 1622.59 1085.24 1616.68 1123.17 cv
1616.53 1124.13 1617.99 1124.54 1618.14 1123.58 cv
1624.06 1085.65 1631.09 1047.9 1639.23 1010.39 cv
1639.43 1009.44 1637.97 1009.03 1637.76 1009.99 cv
cp
.670588 .454902 .396078 rgb
f
1683.79 1146.8 mo
1668.8 1141.53 1653.64 1136.45 1638.08 1133.15 cv
1637.99 1133.06 1637.88 1132.98 1637.73 1132.93 cv
1635.84 1132.42 1632.04 1131.44 1627.91 1130.83 cv
1626.39 1136.46 1624.76 1142.05 1622.42 1147.26 cv
1622.33 1147.46 1622.23 1147.65 1622.13 1147.85 cv
1619.58 1153.38 1616.18 1158.37 1611.47 1162.08 cv
1606.17 1166.28 1599.63 1168.81 1593.01 1170.85 cv
1578.88 1175.19 1499.67 1185.52 1495.9 1186.04 cv
1494.15 1186.29 1491.89 1186.18 1490.33 1186.82 cv
1487.68 1187.87 1488.73 1190.73 1489.18 1193.21 cv
1489.87 1197.08 1490.57 1200.93 1491.25 1204.79 cv
1491.62 1206.8 1491.73 1209.25 1492.41 1211.23 cv
1492.73 1212.19 1492.3 1212.51 1493.4 1213.23 cv
1493.72 1213.46 1495.5 1213.38 1496.02 1213.41 cv
1504.08 1213.99 1572.89 1218.46 1589.02 1219.6 cv
1618.69 1221.69 1652.19 1224.13 1668.75 1199.18 cv
1675.6 1188.84 1680.08 1176.91 1683.21 1164.33 cv
1684.57 1158.93 1685.66 1153.42 1686.59 1147.85 cv
1685.65 1147.46 1684.7 1147.12 1683.79 1146.8 cv
cp
.988235 .654902 .494118 rgb
f
1496.5 1244.6 mo
1283.66 1223.95 li
1279.84 1223.58 1276.78 1220.62 1276.27 1216.82 cv
1257.2 1073.91 li
1256.59 1069.35 1260.38 1065.41 1264.96 1065.86 cv
1469.73 1085.73 li
1473.04 1086.05 1475.68 1088.6 1476.12 1091.89 cv
1496.5 1244.6 li
cp
.25098 .145098 .145098 rgb
f
1592.04 953.504 mo
1586.1 959.571 1579.81 966.426 1572.31 970.565 cv
1568.14 972.865 1561.54 975.246 1557.58 971.286 cv
1554.24 967.951 1552.66 962.023 1551.15 957.702 cv
1551.08 957.501 1550.95 957.373 1550.8 957.29 cv
1550.48 956.785 1549.58 956.71 1549.43 957.448 cv
1548.79 960.606 1547.23 963.187 1545.24 965.681 cv
1544.59 966.486 1543.7 967.834 1542.86 968.454 cv
1538.11 971.985 1536.49 967.729 1535.48 965.178 cv
1533.41 959.974 1531.87 954.534 1530.57 949.095 cv
1530.34 948.143 1528.87 948.546 1529.1 949.5 cv
1530.3 954.502 1531.74 959.439 1533.52 964.269 cv
1534.46 966.818 1535.47 970.017 1538.21 971.153 cv
1541.4 972.47 1543.65 969.944 1545.53 967.709 cv
1547.24 965.673 1548.73 963.567 1549.77 961.213 cv
1537.43 1018.56 1522.39 1075.48 1515.25 1133.81 cv
1513.2 1150.49 1511.85 1167.25 1511.36 1184.06 cv
1511.33 1185.04 1512.85 1185.04 1512.88 1184.06 cv
1514.6 1124.94 1527.46 1067.03 1540.52 1009.59 cv
1544.1 993.817 1547.69 978.049 1551.1 962.24 cv
1552.39 965.934 1554 969.853 1556.5 972.362 cv
1559.35 975.202 1563.49 975.314 1567.17 974.336 cv
1577.54 971.582 1585.9 961.946 1593.11 954.58 cv
1593.8 953.879 1592.72 952.802 1592.04 953.504 cv
cp
.670588 .454902 .396078 rgb
f
1456.64 996.938 mo
1448.72 1024.58 1443.28 1052.86 1440.36 1081.46 cv
1440.26 1082.43 1441.78 1082.43 1441.88 1081.46 cv
1444.79 1052.99 1450.23 1024.85 1458.11 997.342 cv
1458.38 996.398 1456.91 995.996 1456.64 996.938 cv
cp
f
1551.7 1013.51 mo
1547.78 1013.51 1547.77 1019.59 1551.7 1019.59 cv
1555.62 1019.59 1555.62 1013.51 1551.7 1013.51 cv
cp
f
1540.66 1082.38 mo
1536.74 1082.38 1536.74 1088.47 1540.66 1088.47 cv
1544.58 1088.47 1544.59 1082.38 1540.66 1082.38 cv
cp
f
1531.53 1155.45 mo
1527.61 1155.45 1527.61 1161.53 1531.53 1161.53 cv
1535.45 1161.53 1535.45 1155.45 1531.53 1155.45 cv
cp
f
1589.16 789.558 mo
1592.24 781.375 1592.04 771.915 1586.32 764.862 cv
1580.13 757.224 1569.85 754.474 1560.37 755.297 cv
1554.57 755.802 1549.06 757.534 1543.63 759.569 cv
1540.59 760.711 1537.48 761.831 1534.18 761.687 cv
1531.15 761.556 1528.23 760.471 1525.19 760.323 cv
1515.44 759.85 1505.82 764.584 1499.21 771.572 cv
1491.06 780.204 1487.29 791.874 1485.82 803.434 cv
1485.76 803.91 1486.1 804.147 1486.47 804.154 cv
1486.36 804.356 1486.32 804.604 1486.47 804.867 cv
1488.67 808.994 1492.68 811.412 1497.23 812.236 cv
1502.87 813.256 1507.94 811.362 1513.44 810.742 cv
1518.56 810.164 1520.43 812.843 1523.7 815.875 cv
1525.93 817.942 1528.24 819.939 1530.76 821.643 cv
1535.07 824.554 1540.15 826.679 1545.42 826.638 cv
1548.29 826.616 1551.05 825.796 1553.89 825.51 cv
1557.83 825.113 1560.54 826.328 1563.02 829.285 cv
1566.36 833.255 1570.02 837.143 1575.14 838.708 cv
1579.95 840.178 1584.33 839.179 1587.36 836.582 cv
1591.33 836.854 1595.61 835.946 1598.78 834.824 cv
1605.75 832.355 1611.04 826.35 1613.26 819.367 cv
1618.18 803.852 1604.9 788.6 1589.16 789.558 cv
cp
.25098 .145098 .145098 rgb
f
1593.02 829.909 mo
1589.06 833.568 1585.39 835.047 1579.94 834.961 cv
1576.07 834.899 1572.34 834.409 1569.19 831.992 cv
1568.41 831.397 1567.65 832.718 1568.42 833.307 cv
1572.12 836.14 1576.68 836.534 1581.21 836.487 cv
1586.6 836.432 1590.18 834.602 1594.09 830.985 cv
1594.81 830.318 1593.73 829.244 1593.02 829.909 cv
cp
.411765 .266667 .219608 rgb
f
1588.74 799.274 mo
1582.1 793.897 1572.98 793.608 1565 795.525 cv
1563 788.649 1556.5 783.99 1549.29 784.427 cv
1548.32 784.486 1548.31 786.009 1549.29 785.949 cv
1556.11 785.536 1562.14 789.981 1563.74 796.636 cv
1563.83 797.041 1564.29 797.269 1564.67 797.168 cv
1571.92 795.289 1580.21 795.217 1586.63 799.604 cv
1592.57 803.658 1595.77 811.254 1593.36 818.176 cv
1593.04 819.103 1594.51 819.501 1594.83 818.581 cv
1597.27 811.575 1594.41 803.865 1588.74 799.274 cv
cp
f
1160.44 1532.77 mo
1155 1527.96 1149.32 1523.43 1143.49 1519.11 cv
1133.37 1511.65 1122.74 1504.85 1111.87 1498.5 cv
1103.55 1493.62 1095.08 1489 1086.58 1484.53 cv
1079.1 1480.6 1071.58 1476.77 1064.06 1472.96 cv
1057.85 1469.83 1051.43 1466.14 1044.34 1465.61 cv
1038.4 1465.15 1032.25 1466.43 1028.83 1474.79 cv
1023.97 1486.64 1031.88 1499.07 1039.4 1508.41 cv
1048.32 1519.46 1059.21 1528.78 1070.85 1536.86 cv
1073.94 1538.99 1077.08 1541.05 1080.26 1543.05 cv
1087.96 1547.87 1095.92 1552.28 1103.96 1556.51 cv
1105.62 1557.39 1107.28 1558.26 1108.95 1559.13 cv
1122.21 1565.98 1136.18 1572.86 1150.96 1575.66 cv
1161.33 1577.64 1175.77 1575.55 1178.68 1563.33 cv
1181.68 1550.74 1168.7 1540.01 1160.44 1532.77 cv
cp
.25098 .145098 .145098 rgb
f
1335.97 1405.88 mo
1323.62 1424.09 1308.48 1440.02 1291.14 1453.55 cv
1272.13 1468.37 1252.4 1482.32 1233.01 1496.63 cv
1232.23 1497.21 1232.99 1498.53 1233.78 1497.94 cv
1253.28 1483.56 1273.11 1469.53 1292.21 1454.63 cv
1309.66 1441.02 1324.86 1424.97 1337.29 1406.65 cv
1337.84 1405.84 1336.52 1405.08 1335.97 1405.88 cv
cp
f
1111.87 1498.5 mo
1105.95 1506.2 1100.09 1513.82 1097.37 1517.8 cv
1096.62 1518.88 1095.88 1519.98 1095.15 1521.06 cv
1094.26 1522.35 1093.38 1523.65 1092.51 1524.94 cv
1089.53 1529.29 1086.54 1533.68 1083.59 1538.03 cv
1082.42 1539.77 1080.76 1541.38 1080.26 1543.05 cv
1079.95 1544.08 1080.06 1545.11 1080.94 1546.19 cv
1082.76 1548.44 1086.68 1550.45 1088.98 1552.16 cv
1093.9 1555.81 1097.2 1560.06 1103.96 1556.51 cv
1104.13 1556.43 1104.31 1556.34 1104.49 1556.24 cv
1106.97 1554.82 1109.26 1552.07 1111.4 1550.16 cv
1112.12 1549.55 1113.44 1548.2 1115.13 1546.43 cv
1121.17 1540.13 1131.72 1528.64 1134.26 1526.42 cv
1135.89 1524.99 1137.51 1523.54 1139.15 1522.13 cv
1139.53 1521.79 1141.51 1520.45 1143.49 1519.11 cv
1133.37 1511.65 1122.74 1504.85 1111.87 1498.5 cv
cp
.968627 .584314 .403922 rgb
f
1069.27 1601.25 mo
1055.92 1601.26 1043 1592.46 1031.35 1586.94 cv
1019.39 1581.27 1007.69 1578.15 994.572 1576.71 cv
987.538 1575.94 980.493 1575 973.631 1573.12 cv
937.316 1563.17 938.192 1549.43 942.558 1544.78 cv
943.461 1543.81 944.999 1543.08 946.255 1542.54 cv
952.697 1539.76 1014.12 1555.4 1038.38 1554.03 cv
1060.64 1552.77 1081.53 1541.35 1095.13 1523.9 cv
1102.92 1530.36 1111.52 1530.58 1121.36 1532.72 cv
1111.53 1542.95 1103.29 1558.37 1096.58 1570.89 cv
1090.21 1582.78 1085.79 1601.23 1069.27 1601.25 cv
cp
f
1095.92 1571.94 mo
1096.03 1571.74 1096.16 1571.52 1096.27 1571.32 cv
1083.17 1566.05 1071.01 1558.43 1060.4 1548.82 cv
1055.99 1549.85 1051.14 1550.46 1045.71 1550.66 cv
1021.3 1551.53 950.641 1538.04 944.201 1540.68 cv
943.397 1541 942.49 1541.4 941.686 1541.89 cv
941.225 1542.18 940.816 1542.48 940.484 1542.83 cv
940.322 1543.02 940.159 1543.21 940.002 1543.43 cv
936.146 1548.45 935.016 1563.04 970.243 1573.26 cv
977.172 1575.28 986.772 1576.77 993.87 1577.67 cv
1007.09 1579.37 1018.33 1580.7 1030.43 1586.58 cv
1042.24 1592.31 1055.37 1601.33 1068.79 1601.58 cv
1076.03 1601.7 1080.93 1598.32 1084.65 1593.48 cv
1085.16 1592.84 1085.65 1592.18 1086.09 1591.47 cv
1090.1 1585.44 1092.76 1577.86 1095.92 1571.94 cv
cp
.25098 .145098 .145098 rgb
f
1086.09 1591.47 mo
1085.65 1592.18 1085.16 1592.84 1084.65 1593.48 cv
1065.54 1589.04 1046.96 1580.37 1028.65 1573.54 cv
1010.83 1566.88 992.688 1564.42 974.365 1560.07 cv
961.812 1557.1 949.406 1552.23 940.002 1543.43 cv
940.159 1543.21 940.322 1543.02 940.484 1542.83 cv
940.816 1542.48 941.225 1542.18 941.686 1541.89 cv
952.812 1552.25 968.077 1556.65 982.886 1559.56 cv
998.786 1562.68 1014.16 1565.69 1029.49 1571.41 cv
1047.99 1578.32 1066.76 1587.17 1086.09 1591.47 cv
cp
.411765 .266667 .219608 rgb
f
1328.78 1656.95 mo
1326.77 1663.06 1323.73 1668.67 1318.46 1672.95 cv
1314.67 1676.01 1310.37 1678.32 1306.38 1681.08 cv
1301.63 1684.38 1297.92 1688.5 1295.14 1693.56 cv
1290.36 1702.33 1288.38 1712.26 1284.18 1721.28 cv
1280.58 1728.98 1275.23 1736.36 1266.99 1739.45 cv
1260.9 1741.72 1254.05 1742.22 1247.31 1741.65 cv
1247.18 1741.17 1247.1 1740.68 1247.04 1740.18 cv
1257.52 1741.14 1268.49 1739.49 1275.67 1731.81 cv
1283.99 1722.93 1286.33 1710.52 1290.76 1699.58 cv
1292.67 1694.84 1295.01 1690.22 1298.32 1686.31 cv
1302.09 1681.83 1307.09 1678.89 1311.95 1675.77 cv
1317.74 1672.05 1322.55 1667.89 1325.54 1661.57 cv
1326.85 1658.82 1327.79 1655.93 1328.56 1652.99 cv
1328.67 1654.3 1328.75 1655.63 1328.78 1656.95 cv
cp
f
1494.28 1215.04 mo
1494.12 1214.08 1492.65 1214.48 1492.81 1215.44 cv
1497.18 1241.06 li
1497.34 1242.02 1498.81 1241.61 1498.64 1240.65 cv
1497.19 1232.11 1495.74 1223.58 1494.28 1215.04 cv
cp
f
1376.14 1155.92 mo
1376.67 1162.12 1373 1167.15 1367.96 1167.15 cv
1362.92 1167.15 1358.4 1162.12 1357.88 1155.92 cv
1357.35 1149.72 1361.01 1144.7 1366.06 1144.7 cv
1371.1 1144.7 1375.62 1149.72 1376.14 1155.92 cv
cp
f
2397.42 968.806 mo
2396.63 968.806 2395.84 968.759 2395.06 968.66 cv
1744.43 887.444 li
1734.91 886.254 1727.74 878.124 1727.74 868.532 cv
1727.74 340.938 li
1727.74 335.475 1730.08 330.267 1734.18 326.651 cv
1738.28 323.036 1743.73 321.345 1749.16 322.026 cv
2399.78 403.242 li
2409.3 404.431 2416.47 412.562 2416.47 422.153 cv
2416.47 949.75 li
2416.47 955.213 2414.13 960.419 2410.03 964.036 cv
2406.53 967.126 2402.03 968.806 2397.42 968.806 cv
cp
.509804 .266667 .152941 rgb
f
2398.22 386.938 mo
2398.22 929.725 li
2398.22 940.91 2388.41 949.57 2377.31 948.187 cv
1707.96 864.638 li
1698.63 863.476 1691.66 855.558 1691.66 846.176 cv
1691.66 303.39 li
1691.66 292.205 1701.46 283.545 1712.57 284.928 cv
2381.92 368.477 li
2391.22 369.64 2398.22 377.557 2398.22 386.938 cv
cp
.803922 .713726 .713726 rgb
f
2398.22 386.938 mo
2398.22 434.286 li
1691.66 346.086 li
1691.66 303.39 li
1691.66 292.205 1701.46 283.545 1712.57 284.928 cv
2381.92 368.477 li
2391.22 369.64 2398.22 377.557 2398.22 386.938 cv
cp
.25098 .145098 .145098 rgb
f
1885.57 788.583 mo
2020.83 805.264 li
2023.04 805.535 2024.99 803.813 2024.99 801.59 cv
2024.99 484.538 li
2024.99 482.667 2023.59 481.091 2021.74 480.864 cv
1886.47 464.182 li
1884.26 463.912 1882.32 465.633 1882.32 467.856 cv
1882.32 784.909 li
1882.32 786.779 1883.71 788.355 1885.57 788.583 cv
cp
.803922 .713726 .713726 rgb
f
2057.8 717.506 mo
2284.31 746.584 li
2286.52 746.868 2288.47 745.154 2288.48 742.929 cv
2289.58 516.696 li
2289.59 514.797 2288.16 513.201 2286.28 513 cv
2059.8 484.663 li
2057.62 484.431 2055.72 486.133 2055.71 488.325 cv
2054.57 713.816 li
2054.56 715.686 2055.94 717.269 2057.8 717.506 cv
cp
.407843 .454902 .741176 rgb
f
2057.23 778.4 mo
2282.37 807.022 li
2284.56 807.301 2286.6 805.614 2286.72 803.424 cv
2286.81 790.939 li
2286.9 789.07 2285.55 787.499 2283.67 787.301 cv
2058.54 759.41 li
2056.37 759.181 2054.38 760.856 2054.27 763.014 cv
2054.17 774.769 li
2054.08 776.608 2055.39 778.167 2057.23 778.4 cv
cp
.25098 .145098 .145098 rgb
f
1795.69 455.707 mo
1795.69 480.296 li
1795.69 482.172 1797.09 483.751 1798.95 483.972 cv
1846.15 489.558 li
1848.36 489.819 1850.29 488.099 1850.29 485.883 cv
1850.29 461.293 li
1850.29 459.417 1848.89 457.838 1847.02 457.617 cv
1799.82 452.031 li
1797.62 451.771 1795.69 453.49 1795.69 455.707 cv
cp
f
1798.95 556.077 mo
1846.15 561.663 li
1848.36 561.923 1850.29 560.204 1850.29 557.987 cv
1850.29 533.429 li
1850.29 531.553 1848.89 529.974 1847.02 529.753 cv
1799.82 524.167 li
1797.62 523.907 1795.69 525.626 1795.69 527.843 cv
1795.69 552.401 li
1795.69 554.277 1797.09 555.856 1798.95 556.077 cv
cp
f
1798.95 628.416 mo
1846.15 634.002 li
1848.36 634.262 1850.29 632.543 1850.29 630.326 cv
1850.29 605.768 li
1850.29 603.892 1848.89 602.313 1847.02 602.092 cv
1799.82 596.506 li
1797.62 596.246 1795.69 597.965 1795.69 600.182 cv
1795.69 624.74 li
1795.69 626.616 1797.09 628.195 1798.95 628.416 cv
cp
f
1798.95 700.314 mo
1846.15 705.9 li
1848.36 706.161 1850.29 704.441 1850.29 702.225 cv
1850.29 677.637 li
1850.29 675.76 1848.89 674.181 1847.02 673.961 cv
1799.82 668.402 li
1797.62 668.144 1795.69 669.863 1795.69 672.078 cv
1795.69 696.639 li
1795.69 698.515 1797.09 700.094 1798.95 700.314 cv
cp
f
1798.95 775.47 mo
1846.15 781.056 li
1848.36 781.316 1850.29 779.597 1850.29 777.38 cv
1850.29 752.791 li
1850.29 750.915 1848.89 749.335 1847.02 749.115 cv
1799.82 743.529 li
1797.62 743.268 1795.69 744.988 1795.69 747.204 cv
1795.69 771.794 li
1795.69 773.67 1797.09 775.249 1798.95 775.47 cv
cp
f
1994.77 522.54 mo
1994.77 532.928 li
1994.77 535.156 1992.82 536.879 1990.61 536.601 cv
1916.85 527.298 li
1915 527.065 1913.61 525.491 1913.61 523.626 cv
1913.61 513.226 li
1913.61 510.998 1915.57 509.274 1917.78 509.554 cv
1991.54 518.868 li
1993.39 519.102 1994.77 520.675 1994.77 522.54 cv
cp
f
1994.77 595.523 mo
1994.77 605.924 li
1994.77 608.152 1992.82 609.875 1990.61 609.596 cv
1916.85 600.281 li
1915 600.047 1913.61 598.474 1913.61 596.609 cv
1913.61 586.221 li
1913.61 583.993 1915.57 582.27 1917.78 582.549 cv
1991.54 591.851 li
1993.39 592.084 1994.77 593.658 1994.77 595.523 cv
cp
f
1994.77 666.838 mo
1994.77 677.24 li
1994.77 679.467 1992.82 681.19 1990.61 680.912 cv
1916.85 671.622 li
1915 671.389 1913.61 669.815 1913.61 667.95 cv
1913.61 657.548 li
1913.61 655.321 1915.57 653.598 1917.78 653.876 cv
1991.53 663.166 li
1993.38 663.399 1994.77 664.973 1994.77 666.838 cv
cp
f
1994.77 734.684 mo
1994.77 745.098 li
1994.77 747.326 1992.82 749.048 1990.61 748.77 cv
1916.85 739.467 li
1915 739.234 1913.61 737.66 1913.61 735.795 cv
1913.61 725.393 li
1913.61 723.166 1915.57 721.443 1917.78 721.721 cv
1991.53 731.011 li
1993.38 731.244 1994.77 732.818 1994.77 734.684 cv
cp
f
1994.01 806.985 mo
1994.01 817.399 li
1994.01 819.627 1992.06 821.35 1989.85 821.072 cv
1916.09 811.769 li
1914.24 811.536 1912.85 809.962 1912.85 808.097 cv
1912.85 797.695 li
1912.85 795.467 1914.81 793.745 1917.02 794.023 cv
1990.77 803.313 li
1992.62 803.546 1994.01 805.12 1994.01 806.985 cv
cp
f
2081.04 536.807 mo
2081.04 547.221 li
2081.04 549.091 2082.43 550.667 2084.29 550.895 cv
2257.19 572.138 li
2259.39 572.409 2261.34 570.687 2261.34 568.464 cv
2261.34 558.05 li
2261.34 556.18 2259.94 554.604 2258.09 554.376 cv
2085.19 533.133 li
2082.98 532.862 2081.04 534.583 2081.04 536.807 cv
cp
f
2081.49 575.801 mo
2081.49 586.218 li
2081.49 588.092 2082.88 589.67 2084.75 589.893 cv
2131.21 595.465 li
2133.41 595.729 2135.35 594.009 2135.35 591.791 cv
2135.35 581.374 li
2135.35 579.5 2133.95 577.922 2132.09 577.699 cv
2085.63 572.126 li
2083.42 571.862 2081.49 573.582 2081.49 575.801 cv
cp
f
2205.57 633.975 mo
2205.57 644.392 li
2205.57 646.266 2206.97 647.843 2208.83 648.066 cv
2255.29 653.639 li
2257.49 653.903 2259.43 652.183 2259.43 649.964 cv
2259.43 639.547 li
2259.43 637.673 2258.03 636.095 2256.17 635.872 cv
2209.71 630.3 li
2207.5 630.036 2205.57 631.756 2205.57 633.975 cv
cp
f
2177.54 670.731 mo
2177.54 681.15 li
2177.54 683.026 2178.95 684.606 2180.81 684.826 cv
2254.29 693.5 li
2256.49 693.76 2258.42 692.041 2258.42 689.824 cv
2258.42 679.406 li
2258.42 677.529 2257.02 675.95 2255.16 675.73 cv
2181.68 667.056 li
2179.48 666.796 2177.54 668.515 2177.54 670.731 cv
cp
f
2080.92 659.515 mo
2080.92 669.936 li
2080.92 671.814 2082.33 673.395 2084.2 673.612 cv
2104.43 675.961 li
2106.63 676.217 2108.56 674.499 2108.56 672.285 cv
2108.56 661.865 li
2108.56 659.986 2107.15 658.405 2105.29 658.188 cv
2085.05 655.838 li
2082.85 655.583 2080.92 657.302 2080.92 659.515 cv
cp
f
2127.33 665.063 mo
2127.33 675.483 li
2127.33 677.363 2128.74 678.943 2130.6 679.16 cv
2150.84 681.51 li
2153.04 681.765 2154.97 680.047 2154.97 677.833 cv
2154.97 667.413 li
2154.97 665.534 2153.56 663.953 2151.69 663.737 cv
2131.46 661.387 li
2129.26 661.131 2127.33 662.85 2127.33 665.063 cv
cp
f
2154.57 584.985 mo
2154.57 595.404 li
2154.57 597.28 2155.97 598.859 2157.83 599.08 cv
2256.75 610.778 li
2258.96 611.039 2260.89 609.319 2260.89 607.103 cv
2260.89 596.685 li
2260.89 594.808 2259.49 593.229 2257.62 593.009 cv
2158.7 581.31 li
2156.5 581.049 2154.57 582.769 2154.57 584.985 cv
cp
f
2082.27 618.611 mo
2082.27 629.03 li
2082.27 630.906 2083.67 632.485 2085.54 632.706 cv
2184.46 644.405 li
2186.66 644.665 2188.59 642.946 2188.59 640.729 cv
2188.59 630.311 li
2188.59 628.435 2187.19 626.855 2185.33 626.635 cv
2086.41 614.936 li
2084.2 614.676 2082.27 616.395 2082.27 618.611 cv
cp
f
2277.24 405.877 mo
2244.63 402.413 li
2241.22 402.051 2238.27 398.763 2238.29 395.357 cv
2238.44 372.538 li
2238.46 369.611 2240.69 367.629 2243.62 367.939 cv
2276.22 371.404 li
2279.63 371.766 2282.58 375.053 2282.56 378.459 cv
2282.42 401.279 li
2282.4 404.205 2280.16 406.188 2277.24 405.877 cv
cp
.411765 .266667 .219608 rgb
f
2353.06 413.852 mo
2320.45 410.388 li
2317.04 410.026 2314.09 406.738 2314.11 403.332 cv
2314.26 380.513 li
2314.28 377.586 2316.51 375.604 2319.44 375.915 cv
2352.04 379.379 li
2355.45 379.741 2358.4 383.028 2358.38 386.435 cv
2358.24 409.254 li
2358.22 412.18 2355.98 414.163 2353.06 413.852 cv
cp
f
1931.1 519.079 mo
1910.03 517.394 1888.99 515.349 1867.99 512.918 cv
1862.8 512.318 1857.62 511.695 1852.44 511.049 cv
1847.71 510.46 1841.36 510.704 1837.11 508.453 cv
1832 505.751 1832.63 497.678 1832.36 492.726 cv
1832.05 487.257 1832.03 481.783 1832.21 476.31 cv
1832.24 475.331 1830.72 475.289 1830.69 476.269 cv
1830.49 482.24 1830.54 488.211 1830.93 494.175 cv
1831.18 498.106 1830.99 503.191 1833.04 506.721 cv
1834.75 509.664 1837.76 510.58 1840.95 511.098 cv
1846.94 512.073 1853.03 512.66 1859.06 513.389 cv
1883.01 516.283 1907.02 518.677 1931.06 520.6 cv
1932.04 520.679 1932.08 519.157 1931.1 519.079 cv
cp
.25098 .145098 .145098 rgb
f
1930.34 590.239 mo
1909.27 588.554 1888.23 586.509 1867.23 584.079 cv
1862.04 583.479 1856.86 582.855 1851.67 582.209 cv
1846.95 581.62 1840.6 581.864 1836.34 579.613 cv
1831.24 576.912 1831.87 568.838 1831.6 563.886 cv
1831.29 558.417 1831.27 552.943 1831.45 547.47 cv
1831.48 546.491 1829.96 546.449 1829.93 547.429 cv
1829.73 553.4 1829.78 559.372 1830.17 565.335 cv
1830.42 569.266 1830.23 574.352 1832.28 577.881 cv
1833.99 580.824 1837 581.74 1840.19 582.258 cv
1846.18 583.233 1852.27 583.82 1858.3 584.549 cv
1882.25 587.443 1906.25 589.837 1930.3 591.761 cv
1931.28 591.839 1931.32 590.317 1930.34 590.239 cv
cp
f
1831.14 648.661 mo
1832.85 651.604 1835.86 652.52 1839.04 653.038 cv
1845.04 654.013 1851.13 654.6 1857.16 655.329 cv
1881.11 658.223 1905.11 660.617 1929.16 662.54 cv
1930.14 662.618 1930.17 661.097 1929.2 661.019 cv
1908.13 659.333 1887.09 657.289 1866.09 654.858 cv
1860.9 654.258 1855.72 653.635 1850.53 652.989 cv
1845.81 652.4 1839.46 652.644 1835.2 650.393 cv
1830.1 647.691 1830.73 639.618 1830.46 634.666 cv
1830.15 629.197 1830.13 623.723 1830.31 618.25 cv
1830.34 617.271 1828.82 617.229 1828.79 618.209 cv
1828.59 624.18 1828.64 630.151 1829.02 636.115 cv
1829.28 640.046 1829.09 645.131 1831.14 648.661 cv
cp
f
1929.58 730.276 mo
1908.51 728.591 1887.47 726.546 1866.47 724.116 cv
1861.28 723.516 1856.1 722.893 1850.91 722.247 cv
1846.19 721.658 1839.84 721.901 1835.58 719.65 cv
1830.48 716.949 1831.11 708.875 1830.84 703.923 cv
1830.53 698.454 1830.51 692.981 1830.69 687.508 cv
1830.72 686.528 1829.2 686.486 1829.17 687.466 cv
1828.97 693.438 1829.02 699.409 1829.4 705.372 cv
1829.66 709.303 1829.47 714.389 1831.52 717.918 cv
1833.23 720.861 1836.24 721.777 1839.43 722.295 cv
1845.42 723.271 1851.51 723.857 1857.54 724.586 cv
1881.49 727.48 1905.49 729.875 1929.54 731.798 cv
1930.52 731.876 1930.56 730.354 1929.58 730.276 cv
cp
f
1927.68 804.48 mo
1906.61 802.795 1885.57 800.75 1864.57 798.32 cv
1859.38 797.72 1854.19 797.097 1849.01 796.451 cv
1844.29 795.862 1837.93 796.106 1833.68 793.855 cv
1828.58 791.153 1829.21 783.08 1828.93 778.127 cv
1828.63 772.659 1828.61 767.185 1828.79 761.712 cv
1828.82 760.733 1827.3 760.691 1827.27 761.671 cv
1827.07 767.642 1827.12 773.613 1827.5 779.577 cv
1827.75 783.508 1827.57 788.593 1829.62 792.123 cv
1831.33 795.065 1834.34 795.981 1837.52 796.5 cv
1843.52 797.475 1849.61 798.062 1855.64 798.791 cv
1879.58 801.685 1903.59 804.079 1927.64 806.002 cv
1928.62 806.081 1928.65 804.559 1927.68 804.48 cv
cp
f
850.198 597.079 mo
853.263 723.863 li
853.263 726.393 851.279 728.561 848.741 728.806 cv
609.485 751.922 li
606.732 752.188 604.412 750.1 604.412 747.356 cv
601.348 618.272 li
601.348 615.725 603.358 613.547 605.915 613.325 cv
845.171 592.509 li
847.907 592.271 850.198 594.354 850.198 597.079 cv
cp
f
832.914 617.097 mo
832.794 617.097 832.673 617.104 832.552 617.114 cv
593.296 637.93 li
591.125 638.119 589.424 639.958 589.424 642.119 cv
592.488 765.095 li
592.489 766.217 592.929 767.223 593.729 767.949 cv
594.54 768.686 595.608 769.038 596.728 768.922 cv
835.984 745.806 li
838.133 745.6 839.816 743.761 839.816 741.622 cv
836.752 620.926 li
836.752 619.831 836.317 618.829 835.526 618.104 cv
834.811 617.448 833.896 617.097 832.914 617.097 cv
cp
596.341 770.464 mo
594.993 770.464 593.692 769.972 592.706 769.077 cv
591.584 768.059 590.967 766.651 590.967 765.114 cv
587.902 642.138 li
587.902 639.176 590.214 636.669 593.165 636.414 cv
832.42 615.598 li
833.967 615.464 835.435 615.954 836.555 616.981 cv
837.661 617.997 838.272 619.394 838.274 620.917 cv
841.339 741.603 li
841.339 744.535 839.05 747.04 836.129 747.322 cv
596.874 770.438 li
596.696 770.455 596.518 770.464 596.341 770.464 cv
cp
f
2379.39 1093.71 mo
2376.33 1220.4 li
2376.33 1222.93 2378.31 1225.16 2380.85 1225.47 cv
2620.35 1255.58 li
2623.11 1255.92 2625.43 1253.9 2625.43 1251.16 cv
2628.5 1122.16 li
2628.5 1119.62 2626.49 1117.38 2623.93 1117.08 cv
2384.43 1089.28 li
2381.69 1088.96 2379.39 1090.98 2379.39 1093.71 cv
cp
f
2399.08 1111.32 mo
2398.14 1111.32 2397.27 1111.64 2396.59 1112.25 cv
2395.81 1112.95 2395.38 1113.93 2395.38 1115.02 cv
2395.38 1115.03 li
2392.31 1241.73 li
2392.31 1243.86 2394 1245.76 2396.17 1246.03 cv
2635.67 1276.13 li
2636.8 1276.27 2637.86 1275.96 2638.67 1275.25 cv
2639.46 1274.55 2639.89 1273.56 2639.89 1272.47 cv
2642.96 1143.46 li
2642.96 1141.3 2641.25 1139.4 2639.06 1139.15 cv
2399.56 1111.35 li
2399.4 1111.33 2399.24 1111.32 2399.08 1111.32 cv
cp
2636.18 1277.68 mo
2635.94 1277.68 2635.71 1277.67 2635.48 1277.64 cv
2395.98 1247.54 li
2393.07 1247.17 2390.79 1244.61 2390.79 1241.71 cv
2393.86 1115.01 li
2393.86 1113.48 2394.47 1112.1 2395.58 1111.11 cv
2396.69 1110.12 2398.21 1109.66 2399.74 1109.83 cv
2639.24 1137.64 li
2642.18 1137.98 2644.48 1140.54 2644.48 1143.47 cv
2641.41 1272.49 li
2641.41 1274 2640.8 1275.4 2639.67 1276.39 cv
2638.72 1277.23 2637.47 1277.68 2636.18 1277.68 cv
cp
f
2443.85 1148.89 mo
2444.72 1149.5 2444.89 1150.73 2444.2 1151.55 cv
2436 1161.28 li
2436 1161.49 li
2449.25 1161.47 li
2450.25 1161.47 2451.07 1162.29 2451.07 1163.29 cv
2451.07 1165.94 li
2451.07 1167.12 2449.96 1167.99 2448.81 1167.7 cv
2436 1164.48 li
2436 1164.69 li
2444.26 1176.13 li
2444.94 1177.07 2444.58 1178.39 2443.52 1178.86 cv
2441.01 1179.97 li
2440.07 1180.38 2438.97 1179.93 2438.59 1178.98 cv
2433.3 1165.93 li
2433.1 1165.9 li
2427.59 1177.16 li
2427.09 1178.19 2425.76 1178.5 2424.85 1177.81 cv
2422.46 1175.98 li
2421.63 1175.34 2421.5 1174.13 2422.19 1173.34 cv
2430.41 1163.84 li
2430.41 1163.65 li
2417.45 1163.6 li
2416.45 1163.6 2415.63 1162.79 2415.63 1161.78 cv
2415.63 1159.15 li
2415.63 1157.96 2416.76 1157.09 2417.92 1157.39 cv
2430.31 1160.63 li
2430.31 1160.43 li
2422.19 1148.8 li
2421.54 1147.86 2421.9 1146.55 2422.95 1146.09 cv
2425.32 1145.04 li
2426.25 1144.63 2427.34 1145.06 2427.73 1146 cv
2433.2 1159.01 li
2433.4 1159.04 li
2438.58 1147.81 li
2439.05 1146.78 2440.34 1146.43 2441.27 1147.08 cv
2443.85 1148.89 li
cp
.407843 .454902 .741176 rgb
f
2511.21 1158.3 mo
2511.79 1158.7 2511.89 1159.51 2511.44 1160.05 cv
2502.8 1170.31 li
2502.8 1170.51 li
2516.68 1170.5 li
2517.34 1170.49 2517.88 1171.03 2517.88 1171.69 cv
2517.88 1175.76 li
2517.88 1176.54 2517.14 1177.11 2516.39 1176.92 cv
2502.8 1173.51 li
2502.8 1173.71 li
2511.52 1185.78 li
2511.96 1186.39 2511.73 1187.26 2511.03 1187.57 cv
2507.22 1189.25 li
2506.61 1189.52 2505.88 1189.23 2505.63 1188.6 cv
2500.1 1174.95 li
2499.91 1174.92 li
2494.06 1186.87 li
2493.73 1187.55 2492.86 1187.75 2492.26 1187.29 cv
2488.74 1184.6 li
2488.19 1184.18 2488.11 1183.39 2488.56 1182.87 cv
2497.21 1172.87 li
2497.21 1172.67 li
2483.63 1172.63 li
2482.97 1172.62 2482.44 1172.09 2482.44 1171.43 cv
2482.44 1167.37 li
2482.44 1166.58 2483.18 1166.01 2483.94 1166.21 cv
2497.11 1169.65 li
2497.11 1169.46 li
2488.56 1157.2 li
2488.13 1156.58 2488.37 1155.72 2489.06 1155.42 cv
2492.7 1153.81 li
2493.32 1153.54 2494.03 1153.82 2494.29 1154.44 cv
2500.01 1168.04 li
2500.21 1168.06 li
2505.69 1156.16 li
2506.01 1155.48 2506.86 1155.25 2507.47 1155.68 cv
2511.21 1158.3 li
cp
f
2579.88 1165.93 mo
2580.88 1166.63 2581.06 1168.03 2580.28 1168.96 cv
2572.25 1178.48 li
2572.25 1178.69 li
2585.26 1178.67 li
2586.4 1178.67 2587.33 1179.6 2587.33 1180.74 cv
2587.33 1182.82 li
2587.33 1184.17 2586.06 1185.15 2584.75 1184.83 cv
2572.25 1181.68 li
2572.25 1181.89 li
2580.34 1193.08 li
2581.11 1194.14 2580.7 1195.65 2579.5 1196.18 cv
2577.5 1197.06 li
2576.43 1197.53 2575.18 1197.03 2574.75 1195.95 cv
2569.56 1183.13 li
2569.36 1183.1 li
2563.98 1194.09 li
2563.41 1195.26 2561.9 1195.62 2560.87 1194.82 cv
2558.93 1193.34 li
2557.98 1192.62 2557.84 1191.24 2558.62 1190.34 cv
2566.66 1181.04 li
2566.66 1180.85 li
2553.95 1180.8 li
2552.81 1180.8 2551.89 1179.88 2551.89 1178.73 cv
2551.89 1176.67 li
2551.89 1175.32 2553.17 1174.33 2554.48 1174.67 cv
2566.57 1177.83 li
2566.57 1177.63 li
2558.62 1166.24 li
2557.88 1165.18 2558.29 1163.69 2559.48 1163.17 cv
2561.34 1162.34 li
2562.4 1161.88 2563.64 1162.37 2564.09 1163.43 cv
2569.46 1176.21 li
2569.66 1176.24 li
2574.71 1165.28 li
2575.25 1164.11 2576.72 1163.71 2577.77 1164.45 cv
2579.88 1165.93 li
cp
f
788.894 648.872 mo
789.816 648.259 791.098 648.662 791.57 649.712 cv
796.703 661.155 li
796.9 661.137 li
802.326 648.351 li
802.718 647.428 803.797 647.04 804.721 647.491 cv
807.072 648.636 li
808.111 649.143 808.473 650.462 807.822 651.375 cv
799.77 662.676 li
799.77 662.871 li
812.063 660.146 li
813.207 659.892 814.325 660.809 814.325 662.001 cv
814.325 664.632 li
814.325 665.635 813.52 666.416 812.525 666.377 cv
799.673 665.886 li
799.673 666.082 li
807.822 675.919 li
808.502 676.741 808.38 677.943 807.554 678.546 cv
805.185 680.273 li
804.279 680.934 802.966 680.567 802.465 679.514 cv
797.001 668.028 li
796.803 668.046 li
791.561 680.882 li
791.178 681.818 790.091 682.218 789.159 681.765 cv
786.667 680.554 li
785.614 680.043 785.257 678.703 785.93 677.792 cv
794.127 666.694 li
794.127 666.49 li
781.423 669.18 li
780.283 669.421 779.177 668.506 779.177 667.321 cv
779.177 664.676 li
779.177 663.67 779.987 662.888 780.985 662.931 cv
794.127 663.492 li
794.127 663.289 li
785.996 653.218 li
785.312 652.372 785.472 651.145 786.34 650.568 cv
788.894 648.872 li
cp
f
723.239 654.728 mo
723.846 654.325 724.688 654.59 724.998 655.28 cv
730.441 667.415 li
730.639 667.397 li
736.309 654.034 li
736.566 653.428 737.276 653.173 737.883 653.469 cv
741.498 655.231 li
742.181 655.564 742.418 656.431 741.991 657.031 cv
733.509 668.936 li
733.509 669.131 li
746.577 666.233 li
747.329 666.066 748.063 666.669 748.063 667.453 cv
748.063 671.513 li
748.063 672.172 747.535 672.686 746.881 672.661 cv
733.412 672.146 li
733.412 672.341 li
741.991 682.699 li
742.438 683.238 742.357 684.028 741.814 684.424 cv
738.323 686.971 li
737.728 687.405 736.865 687.164 736.536 686.472 cv
730.74 674.288 li
730.542 674.306 li
725.06 687.729 li
724.809 688.344 724.094 688.606 723.481 688.309 cv
719.704 686.474 li
719.013 686.138 718.778 685.257 719.221 684.658 cv
727.866 672.954 li
727.866 672.75 li
714.392 675.603 li
713.643 675.762 712.916 675.16 712.916 674.381 cv
712.916 670.311 li
712.916 669.649 713.448 669.136 714.104 669.164 cv
727.866 669.752 li
727.866 669.548 li
719.298 658.938 li
718.849 658.381 718.954 657.575 719.525 657.196 cv
723.239 654.728 li
cp
f
653.503 660.595 mo
654.551 659.898 656.009 660.356 656.544 661.55 cv
661.554 672.718 li
661.751 672.7 li
667.08 660.143 li
667.525 659.094 668.752 658.653 669.802 659.165 cv
671.649 660.065 li
672.83 660.642 673.241 662.141 672.502 663.178 cv
664.621 674.238 li
664.621 674.434 li
676.605 671.776 li
677.905 671.488 679.176 672.531 679.176 673.886 cv
679.176 675.947 li
679.176 677.087 678.262 677.974 677.131 677.931 cv
664.524 677.449 li
664.524 677.644 li
672.502 687.275 li
673.275 688.209 673.136 689.575 672.197 690.26 cv
670.274 691.662 li
669.246 692.413 667.753 691.996 667.184 690.799 cv
661.852 679.591 li
661.654 679.609 li
656.507 692.211 li
656.073 693.275 654.837 693.729 653.777 693.215 cv
651.796 692.252 li
650.601 691.672 650.195 690.148 650.96 689.112 cv
658.978 678.256 li
658.978 678.053 li
646.581 680.678 li
645.285 680.952 644.028 679.912 644.028 678.564 cv
644.028 676.487 li
644.028 675.344 644.948 674.456 646.083 674.504 cv
658.978 675.055 li
658.978 674.851 li
651.02 664.996 li
650.244 664.034 650.425 662.64 651.412 661.984 cv
653.503 660.595 li
cp
f
1421.75 774.701 mo
1421.14 824.858 li
1421.14 826.475 1419.93 827.815 1418.33 827.959 cv
1222.85 844.049 li
1221.01 844.214 1219.42 842.754 1219.41 840.901 cv
1219.31 799.115 li
1219.23 788.11 li
1219.22 786.429 1220.52 785.048 1222.19 784.977 cv
1418.45 771.521 li
1420.24 771.441 1421.75 772.895 1421.75 774.701 cv
cp
.968627 .937255 .92549 rgb
f
1279.54 874.501 mo
1263.04 859.059 1246.55 843.617 1230.05 828.175 cv
1277.78 828.175 li
1279.09 843.581 1279.68 859.033 1279.54 874.501 cv
cp
f
1368.35 811.597 mo
1282.38 818.378 li
1279.42 818.555 1276.9 816.228 1276.85 813.261 cv
1276.73 805.953 li
1276.69 803.161 1278.85 800.828 1281.63 800.662 cv
1367.61 793.88 li
1370.57 793.704 1373.08 796.031 1373.13 798.998 cv
1373.25 806.306 li
1373.3 809.098 1371.14 811.43 1368.35 811.597 cv
cp
.803922 .713726 .713726 rgb
f
2060.9 991.409 mo
2058.19 1048.35 li
2058.19 1050.58 2059.94 1052.54 2062.18 1052.82 cv
2273.39 1079.37 li
2275.82 1079.67 2277.87 1077.89 2277.87 1075.47 cv
2280.57 1016.5 li
2280.57 1014.26 2278.8 1012.29 2276.54 1012.03 cv
2065.34 987.508 li
2062.92 987.228 2060.9 989.005 2060.9 991.409 cv
cp
.968627 .937255 .92549 rgb
f
2082.59 1042.31 mo
2141.32 1042.31 li
2121.02 1061.31 2100.72 1080.31 2080.42 1099.31 cv
2080.25 1080.28 2080.98 1061.27 2082.59 1042.31 cv
cp
f
2112.37 1036.93 mo
2218.15 1049.5 li
2221.79 1049.86 2224.88 1047.12 2224.94 1043.47 cv
2225.09 1034.49 li
2225.15 1031.06 2222.49 1028.08 2219.06 1027.74 cv
2113.28 1015.17 li
2109.64 1014.81 2106.54 1017.55 2106.48 1021.2 cv
2106.33 1030.18 li
2106.28 1033.62 2108.94 1036.59 2112.37 1036.93 cv
cp
.803922 .713726 .713726 rgb
f
1357.58 908.224 mo
1356.98 958.381 li
1356.98 959.998 1355.76 961.338 1354.16 961.481 cv
1222.74 973.342 li
1220.9 973.506 1219.31 972.047 1219.3 970.194 cv
1219.2 928.407 li
1219.12 917.402 li
1219.11 915.721 1220.41 914.341 1222.08 914.27 cv
1354.28 905.044 li
1356.07 904.964 1357.58 906.417 1357.58 908.224 cv
cp
.968627 .937255 .92549 rgb
f
1280.04 1002.59 mo
1263.54 987.143 1247.04 971.701 1230.54 956.259 cv
1278.27 956.259 li
1279.58 971.665 1280.18 987.116 1280.04 1002.59 cv
cp
f
1319.07 943.608 mo
1258.4 948.275 li
1255.44 948.452 1252.93 946.124 1252.88 943.158 cv
1252.75 935.85 li
1252.71 933.058 1254.87 930.725 1257.66 930.559 cv
1318.33 925.892 li
1321.29 925.715 1323.8 928.043 1323.85 931.01 cv
1323.97 938.318 li
1324.02 941.109 1321.86 943.442 1319.07 943.608 cv
cp
.803922 .713726 .713726 rgb
f
861.144 1462.85 mo
859.581 1560.7 li
859.581 1563.23 857.637 1565.41 855.15 1565.66 cv
453.056 1611.9 li
450.358 1612.17 448.085 1610.1 448.085 1607.35 cv
449.649 1507.2 li
449.649 1504.65 451.618 1502.47 454.124 1502.24 cv
856.218 1458.3 li
858.9 1458.05 861.144 1460.12 861.144 1462.85 cv
cp
.25098 .145098 .145098 rgb
f
842.197 1492.53 mo
842.075 1492.53 841.952 1492.53 841.829 1492.54 cv
439.746 1536.48 li
437.612 1536.68 435.949 1538.53 435.949 1540.69 cv
434.386 1628.67 li
434.386 1629.78 434.828 1630.8 435.63 1631.52 cv
436.416 1632.23 437.443 1632.56 438.518 1632.45 cv
840.603 1586.21 li
842.713 1586 844.359 1584.15 844.359 1582.01 cv
845.922 1496.33 li
845.921 1495.22 845.484 1494.21 844.691 1493.49 cv
844.004 1492.86 843.129 1492.53 842.197 1492.53 cv
cp
438.108 1633.99 mo
436.802 1633.99 435.579 1633.53 434.61 1632.65 cv
433.5 1631.65 432.864 1630.2 432.864 1628.66 cv
434.427 1540.68 li
434.427 1537.75 436.696 1535.24 439.593 1534.96 cv
841.676 1491.03 li
843.187 1490.89 844.619 1491.36 845.717 1492.36 cv
846.814 1493.36 847.444 1494.81 847.444 1496.34 cv
847.444 1496.35 li
845.882 1582.02 li
845.882 1584.92 843.636 1587.43 840.768 1587.73 cv
438.683 1633.96 li
438.49 1633.98 438.298 1633.99 438.108 1633.99 cv
cp
f
831.995 1604.09 mo
818.144 1591.12 804.292 1578.16 790.44 1565.19 cv
830.515 1565.19 li
831.615 1578.13 832.113 1591.1 831.995 1604.09 cv
cp
f
596.329 1548.96 mo
510.99 1558.11 li
508.05 1558.37 505.557 1556.11 505.507 1553.15 cv
505.387 1545.84 li
505.34 1543.05 507.486 1540.66 510.252 1540.42 cv
595.592 1531.26 li
598.532 1531 601.025 1533.26 601.074 1536.23 cv
601.195 1543.53 li
601.241 1546.32 599.096 1548.72 596.329 1548.96 cv
cp
.407843 .454902 .741176 rgb
f
809.349 1525.11 mo
624.897 1545.05 li
621.957 1545.31 619.463 1543.05 619.415 1540.08 cv
619.293 1532.78 li
619.248 1529.99 621.393 1527.6 624.16 1527.35 cv
808.611 1507.41 li
811.551 1507.15 814.044 1509.41 814.094 1512.38 cv
814.214 1519.68 li
814.26 1522.47 812.115 1524.87 809.349 1525.11 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 21.1.0
%%Title: (software architecture and cms and database development s2.eps)
%%CreationDate: 6/3/2022 11:31 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9lDf(T":>Z^q1E(0sd%lc9oMP>^o(a)'h&.GeTp\s[[p33X=!!,MuTABgW3ITV98u8Q=FK_BqA9g1QFdls;=cHX87=68@
%@=05YJ\N1RAH)AMo(%?OY.$XaQF'9?L>M9eg/^d`[hG'Ag$OSKnPa6"NjU?Ad<mmaBj-#_ihfbV_`b8`plm[14`/j]XlGV^$u+dp
%aNYN<\-iMVc_Oiqau#b?YBN%3&f@+^HbLSG:C4/aT=):P]kXo9[am17k!K-\`\J/I3j6"LH3"5.pfR<(%5.L?H:@.g*BL*:cjN$\
%!^7SJkf^B<V+pB@?m:p7_`7\CDlhB*kku0(nc+5ZDa32ncH#eb3m[&)''J1d#DqsW,$a9#)q[(_E(Dfg,]^,^2d3*0d>>M<OAo>8
%q<<Ba^\2OF3KVO\XG.Tt/>pX!ai=`.'38XN87oB9W&VHq_Ua2RqO\AWJZb8\gQ?3omc9@7+?Q0n#lJZpS9I]`^1\E*@%Tj@<%<u>
%X/qepd(o]r;^3K0;+pmL4URW`eN9FkQJ"]P7!qUVQBQ22X8UOFqcIKo>YAuNX@okK&1`S]$OfjW(B;:*)2SIPEXXXgPD,V#A-K^@
%AgT9V`lGo7W88dT$LAH`1M7Y,UD]1n!@Hc*ajJgjgF*Ss<p"c:rBnR7/$=BPhS7@AJI.m-hX&Y+E_hO%QhiMsj#kVXC6fN6"6IqM
%YAmD:-J3uc<Lp1C0B=#[d;:n^OG9YH$Z7Ye3:J$i3MG&hVc0o0(\_dIgWD?'efXopMj:E=m^ptA*QnWnQ[QF($[`9Ueqe&:$FWue
%1#RDn:KTDVJPQIQ3c3\CYJS!6C[]#EmK^?-#T4%9>>rcg\nSQW"4M^*7Q`Q9VIo_HL&QU*is/i:J5:e@Z(p0dp,"+09+0B=7Nm1L
%`rD]al]RU6Z:=H1&>W%,4+CFW*<g&D>lp(Q*S18=58u=af/oh_ka5-2h]DGildW]jkfn.[cNX/f^gZ:bD=^)>rb&!>R7=g9+4&b`
%$7du+VOmh@mc^5V+eb=$;73f4bp`DIG.1cK'eIPpO8dGtrlX'Ka<eLJPGY#+gW`ueo&oDA:5@4'!B97+;`n:aY4lO[MmG65^-jsP
%hAjG"qXZ\k;`IEGaJlHG`]FBt54"L5;Ze_p)T>J\("lhHRLh.Inm/#c%rB@&ZnTetj_J$m-g'.KR3)hd5(Q4FH`U'-;d[O"oO@f?
%*s0^t7Ojo+cb9[4]0=N35S-7G-]JbY'Uo!lP=o,o[D*Vl'/##i1U^0IG'!_i%HnY8D/HXUWFhN/>AoZGS8U1cNhh.:s)`]6fl1rU
%,(A&WFU*;`H'k:.*PUQhAp0_L.YJWO?&e+(e/G\IXD+X-`e::LAY*@CX/8%bT9EoP4]$j'-:J?Lr&GAL`9=)WYN[CmV[!i`:6#HJ
%C-3&)duA+Ej+3A"a6=r6:SZ^EH(`1A\)D2CdtW^MY$H\`Z<>U?k6Sce;hjoLT*Ra<kB&PmNEiHXrQr5c]"@R0BL3kj:6r#k];?DA
%lZJ^7,).!*F)m.A>>O#MCDW5a$U0UCT+l9>/)N'(AG_n42X,uS+tn7%eCu5#N2(q%Lk<r_,/*I`BXeiWYoKXnS;cSi-lEAPYh,[m
%%J,b/aKSi/W>p/UA^GQt"Qcbg?./I]G4.jfSg6.4HQbCORq-(ObiLdcK&e8N046T8=+"6D<,S^63FSN%bu;/u.ee//q0/WT'jH;Y
%`B:Dap30*j4Q,'YR@A:RkFp0\cfO<"gcUpmkAp0!DP#%bQfZ0Y+1dlDBk?VVDm=-oik@^ej,Jk/cZb'2Q1&rAkMMEj:^9>p,larm
%R0YZ=ZTAZEB/)"-OL_b\jeVmn+GYM2"jQK''93.f[;NTnB[-<sWD.TllqQ<5hJ,0O=kS^g.SnD[=d;T`msLd"hphYK?K.UJ?PBpA
%*0JQ@>.KL;$D-B1Oe6Xk=W=!B$j#rqdn=Q)kr7E>F6XnWO.b[Ij7I+&D;W7iNcs$WBI,fKd_';J;"oeMhi%fW5aktWZVu@]XJXkH
%,-JDa9T27*oHgSN];'e2^;2BWRW+?qkBYF*?QPU*CP$iFk_Y12Y>2=YK]0U.1!(9me2!J`XLBCl`p[,$hD*Q^'0"-Gd.>5f^jKd&
%C*T="GO.4L],]:S!$:-e\eh]V:XJCA?mJ[3@%(qSC(7l:AKPlgOR+poEDEH=clkWmr^P#.(G+LX?i`JP)E`\`ol5'`dD/L9%HE>#
%6So)+a#VFS')\#0orO\J37dJsNguW]BZE2JInt@felBpiq94>nn[5\s$-P*a[]]Z$YgYB+#FWNlfrl*93\rQVa7MSBLRk&IlLCTb
%i'ZV?AS1jG%VL'[@:g-]0CkKR\&="a4QaK2b!suUjO!3Pl)<4>>;^f*TEeOTKk\W;KX'tG?Jk#!AmTrP1C(*DGl8,cRW^b'I>>_E
%71](ffg2ZgppWq\2"2AH"oAaY)"1&&VB)m'S.hI(?hYAMq"@k,0?-Y\1B24kLVN5K=tQ6Za"u`d-l@0:^o_!N:Vfj#pq%oMRf:2q
%hnjLO4fHoT\/?s<9RTrkmU;_=;:Ct.h9>13H'*lKD6l119T$QOLFom:e+`R%$%&/;d;G@U8]MX^*,D[EF?'d>L@_Xa4r]oM(N>af
%\FrafR2NLU]H58jjs)t[nT1GH7k\:nYN%H4E)n/tqKB*(5[q=pc'']U*YLS75@t*4]_la@^O4bUe-bH4[ea^E2U2.uq`,.\LR#9B
%fcIPdp7.@L.isc7<=I@KG4O"M*&10gl%'PN<9cBQ+7.@d$$(6]'Nq.8Pq.3,p^Z[K.5F$$Sm+h#a\U"S58Vggs%*f:)GON/n9]\K
%AsVqgU`Lp'FIcO$lTkQ0HIYreiUiTR.CMul=qCI2/fXRH9J<EtmlJER8&_nT?3$L;Ri'S!aODdpH+GllbX-(`%8RIGj*.W`4$8nt
%)rrn#jVs^X.=J+X-sh^tQ1Dol,g%soB0Bt[ZicV\-[X+n;3]N'3f5\BBAdTt7Id+,Zf6:Cr%*_\Y\ZeSU3KS9ks(*s/Y$J<4.Sh1
%6Ho?Yb5<g5s2*O7c_=*;Y4E[ZU6NCb=VUR:E#-EN"D9$TT(TE<Sn'SKO>&nW1Ati_]Ei4PXT"jIV4#:Y24e@S"k8p8/8+k=H(IcU
%bp>)kO4osA62];69QC<olM6.=bYsZeiTBAHXq8jPs8&&-qY>">oCc(JrSC><RH*"&E(ue]g)S^V!7s?skoA=;\<_D4g!DJbfD`+R
%,9u?L2V"`aO4NHlp'"Eb#A\B[RfQKXa(fZpo7UlH*MKA;lu,Z=90BH:^YQl!W=?YR)1C>"jLH.R@):WWk%6HG1]NIo<JcZ1oPc4=
%Y4^T!\N![J8PoX&G\[/QS#<.Wo4\9@H(6cure:r%Z1Wi/p'Co/p@&im=k5)mF8WX<LLeo_[8,0!1J_8(-Ul`JI4bupjgcKin6h^2
%J:7-`9%.\:F(mfcDl0*u_tr";Nq'@ur+19FmhU;*s),XVh`!UV5(EFSa!TqtqTe.WOKUe:A_KJGn+DFPU8JfJccdR3s$>L*`FA[&
%*oilPm?XaO7JU&YRaiE5NtsP=pft*C/ZT>+?EQ@"J,`03Sg4jmHIU1b$@&K_e\)fKI=cYB`FrlKED3]u:9C46]YO)3iRuh5@&@o1
%4$>:D$RUfoZ8I:Aquh(S%lB6?F,1$D\nN"j=$B$)n9phf/8dk'&LZ_UoUGm/Dnc65huEX)<C?Yu'6s$)[-@./s*)3W45^(/n,L+u
%j88<FI`o3`&@[W\^`9]Bd=op@HmdmKk'Ofao6qITUf1THS+$0upO).N^0_B.]UDONj.jtVH;D)79fo/9NCp&5jkV=@K5)I!0A#XG
%'aPSflJ$:PWL),a5:t[n+?7:dXCf)>28,sERl_rch+ui`XZo#td57l2%WhuAn;4e!-lfq:UL0HJG;-4^bq!>r$J@Y$Vr-Rc]q,dT
%?7)/a1)]b2>?+nZRp-FClW\la7b-5h@9BD`fs:;AQ=XjVZ.l/IqUrN12Qra4MFI)4DUqPWk-723l8p_=V0JY)qdhUqST4,])cEtJ
%cO#qPOp9#iZKT1QH8['@';;Mf9P78j^I`FAh9nq-)qr'o#l94kc#6coJJdKuPI=8jfGoT>rRHL!a]%$Wm4Atrd">]iXnE-VV73qX
%$SV+gbASM8??hkS?KQs.H/[l.W.ALq>'P%e0Vn\'0>,L:0D!'(]^YL,.(i7!COMgr5#YBFau]pU9NR=igX!4@h.%eG<#_<.qBh%m
%Zi.*700a-Ap4l@e5Pm>:8G6mB2"BC.-".^_;p?.`,FufU$SPU9m15WSnt:s;6RLs@nR(l5VCtE%EsF`(%V97"j893We)_S4:LO$j
%c>aWogV87No;=7dT>!-22>q_]I4:J-b1F#+p#l6!2=k2::N[N:i?;D)W]-kNS+1liZcO9FG?OY/_H##u;D_L@8mCbW-J<^u,Fm!e
%%X8T43+"foTYDgko/S"mIq&uXG;Sr=-3M^DRGYMY1HRpkB5$lFD>H#pJ+tb(';6bkMT_WUiPg<H2=3eVM%V0Q,dKPmJV]c_mG)!^
%j2B"N]TD`_;>,*fe*/fp@n]0Xp<Dk>d_(SpeH,.uWFI@J3lZ:%J/872lPNRgC$0VtBnc)&*FiErR+F'iXH(]U4It@+meb3C>:XhQ
%o>EDsr-!YJpF/?'_bYr]dQ`,JB54''dd/l4+M8efILkl74>Fs&-l^H*d*./+4KYN[[Ipo/^NT9^a\.LIdXP0%26D8Hk`j)PVhXI=
%fWS\MSs42mpG?[EGDH.mK8)Jk.e<lSr>oeNQ4Fo1-I3S#iiqR+)1%(DaZjD$[m-a%HGchAD)Jt63pAO_8j'c2WFL4qY:S"Na6tI'
%I-%V!^T6j&kh="Y#r"6[7D\fK:WCa:q4C!"8eYg4<;X'FH-H_nT52K^VGK=(fr&i)/=iV)?X?Li9_jf(0-j6gJM6/4*Vf1ncG/DT
%=6HooCt?$.4<0BK\O&Ccl!'G4R<^C`^TGIN1-V8lEc5E_GqShUa1HUT2p^Xc4kZ>1O#bPKVLsPI2E-'Fr&_3pDg4Cg_iONSq:qe;
%3=eHFVfVHODP#.ue%'`b2c&W9Xm+W+AX0=)k/G-65*lY^h]SE[7`;[sF5lr:k<+mun&X\+gC#^Lf`N*SUcnbF!u[t<9XF:.\G:1l
%VSi2lcc;Q(3;^j>,pk%5mfQnrbQBUI;iEUXh4ZL;NYG3i<8[8o-EEu.N6]b*Vn-<Ko@*>0V0;]09(+mVkBggF^`u"K@Rb'2]U?.$
%^\=7cH'*/O%;+=hZu6uD[)q?)'Aj2P^A[s"W7L$&R\rDYW:uNhd*iI/T&5\m1C2pt(fe1`=1".Y<SrPC:VER$IUg1r+?7:dXCf)>
%NIC]_:eEcpa/#[2Zf^Kq&LQ)eTgS%=Yej,mkRAS]d^49%ahr1aF;)B6XJ`Z+:/%:*&"'-j1)aFo)]J[HPG3hGg'""ho=Ml;Ud6+H
%lYUubj**,/?rY^^jI(th^.I,OV&(9#A"O(J56"!B3jfJ7ltL;$YEm_g4iKg-DjfUHYIE.;`-cKAR0Q1PT]e<=7Iuo1+(%RqZ/M)\
%MWP/.Vn@3QV/U>o]ZuGkIoeHJ*-p@uq:@!-rSB&aduS%.D00M%h:&.\B+!&#gVHb9kaZD-fW]i@ZZ.X#0^]NZ6Wh-"FlHFDf4TmD
%G.Qchm[V]:%Dpm\rcVkAG3AY>894,@Vr+2lIH,E9_6j)/07IL#)e[JUc=-s&rj'@S%=3Ja+.=3qr74llUdfaLBD?kX[u,[YGJ/G$
%%%(0+,NmC@,rt5f_*jJ!;+#up4?Uhu-8>?J!&=-X^(5Fs5<.[[MdXU%)!@Oc54r,DVjMl(!YrD/'@6#=b<GpHetsB5^/oFK9n,1s
%5Bt\u,].5WT98[@C)`@^0U7F/Fm:'7Oo*Eg,n9gj:Wo-$p!<+p-N9$cc+q'J[l\'nKnt*@_&9]p:u_ntm4loD@\[H<A2@/ak2A7C
%1ZLW$0<Y\R#LjDDV!eN?f+m+:)tn3Mprq`pE(;F)OmYnB-TRfS9c6:eV:Y"`;""^c8\3Y-S^/R?Hm^3Jb<Er?h:6=kY%Eku1\U]u
%=aZs!6V*)e5C"m6>-hN)ng9&>eG1ct`a`?JR-qb2-K8^=Fd%f\kG=76UdL0T`Ct?EiVZu0SKG-74\%&QdgEha&u=VkL1QrSc#Whq
%8>JtuVPb*.Gm^=.a1[.rp:+EdRdM\Ur9'kEXss"sWS*!?3V*"j=AZ)8'm3m=m^?oFA$)_1Fk`7hbHT"40)Fe^KP$ZBPra#bCVd=#
%:&*Hpe_[jL)=W?N"T]4QbP;UCNEI?$0Q)RFE\`@1aT!-4r9O4BT3o?*YJoj'*hN_p#(&II>(8HP2`/[b44"3A@-mtok60:ffPKDX
%ZqS0jM=K]s:[\u,rc>2Mb;oJ,9<,i`O:6ji=V)hZ5OaQKM"!^m<Ir1`/2)&g[]g`%8h0WZ$EEPUL;WWnk$7r)DhmiH"krqYp@sYr
%G7TY9r!-Ih7h^HAbHO6P8fZC6Xj8IPa@5CW4?M(e^!k@XEMl7$7M\sk@gP"BWtK/X#28!fb-6IG4)8-64,4F%*Lg#1JU9r-oe5Ci
%n:a++F'=0Fj+I$sBDn:gZ7tL(^to\u]DPB/!B;2<o040_bJ^+RT,T+H>0"nG/37L1\dc_0P$/)IAbg&Hf7<^N?\b-m1q5[-4.""b
%([0ZK0`S1^rh3K73J-@j%itK:e(RF#rU`I`gKU:rETi>t50\u^X(`)oSU"6n+gq![-.=?oohQZ#6rqb%\hOp&(6'ZT..Hi'N6iA_
%-EhVg#W3Y/Fa*j5Q/]Pkb(m7Mnrl"5(g%"5A/S]!4`Npc3[dCFG_ZIh3unZhFI'N*Nn'Kuq"q0C)JNt(LS54^47o\TrsQH\IssfN
%J%_HBA]jD_T2VE?1P"P'djTVd(_;Ib'5jE-Re`)i]ubUn&3Ifb*bbEBr%;-gcRGR0'1q';1.t[,HI(s=M;u8\kNSPDA.aI'c;'rf
%J=F&[I7./al9K$FeLR2\D,`_QJs+*c]kM5U#Qg'omRpk94rn&7GdjYS7ml`YAVdPhJ]4SfojS][:6EJYcFJ7>]PC2mZ_3Img&oNA
%)Ts]WlngI\S'Xj(4keK6g@a=I;@aIF>.Hb1;!jS!)([D+n\r'[bBL+s41];,dRV?;AQ[O8UVLNL/Q;!!4p^4?2Z%L_H4r&QX5!/E
%D6)E3qF[L'M[ja3N9\mY:=7MVZB%,OgrD`o]e?E^459]:s3n-iJHSD:i0<b[3S1JfdSsRHC[&:2D)Aidi5"ITbHOVE2s4D6NPDe(
%;N*AQs5eO_YH6-r-['=HECpJAn(7QsdO%.Rh'N@Z@dQ(lkXYKq;9^9$4gjskDZA(3"oYWb03'pg*lBfqrSA0jnGUo0VFYCF+'L`j
%i5F@*Z!K?"%H"]+.b/ZVZ[HU5;tWeGO>Cu_^,5>lUGkI=A.9QOX5LgOI7K)E37cil^.K&1\`Rn$f\i'#\'kCQrT#<&:YFLqA[Q-X
%X&X<"WR^9LH[h'cWU",;4I7ZG)89:Y>2q9-A)-%W/G:^bRoWBBch1>jC_'S3QC@0`G?ZY,>2+7TD]S?/Ictsu2YrL\\CAQ-1Q(.m
%X.a'P=oF+n^,%D%X7Ts)Ao8M]h:M)I<dimghh:C7hDDF*#?h?L$.J3`-J9`4htOe^^0.M4R4/!,hX2Ege75#[VerLHB#=!-8bH14
%h)3HK#VU<>Gm@F.5r?\PVUk)N52_=l#(Xb`UB>-!`^j8#.1\++IfjMPq]]&:1-^Hr[<1?_%t,Nbj9[[koiGea7>A2p:?%]cob]n/
%;5Ku&`X0''1Nogs0Kl`'!RqV8@2&MErIF,4Ud-Rjo%X$PB.96<$c!*B.";9g<^@:LoG;0h=a!q$^S=W>bnI-6I(dS\/?C)Y!+@5M
%NiY2^\A"IXUr&4ThX?XM;X??u&kGF-+l[m*LgaRUO,HUE6R<Y\d*D`T9_0D5\m8=b)@4T#1^SZ&;^-,_84KJt[s:Ok(E\pt:uC',
%3j<L,9V(>'p2J>J]6lHoE'Q\nr)cq9S]8j1p@Bgdm/6UR747q&>bA!9cdutC;Nf9@Wu)&MN\OYoj'M,ad4,2jHU6UuEMG[$\>p.S
%lYQVag9VSu\9j:+hZf]][rmTK()U)82[_l6d7i#!\)&T>,r-i'5ug.VMOA(qo"!-I1Icj<9_UUIC5&-E#5;`+ci`g>f4,A&\3#uB
%EgZbu-2bYra4^drDH.YKE"W%6Y>^f%h]%St/F+$-&pLea*[-e\-X8PK"7ILp*O2<kosRl"KPae1A=R+*0t*!0VkLN2oX-0'l/MJ"
%CM8LNR5?)$q1qW00Gr_=a7fjXG>.'0mbO*&qt`Br#3.l65g.Z6Wk$>Y<5gQ/]t<]u*B"gDIA;2eW,'G"'3^DGN+H)fHM(^Eg4pG>
%6jloV(`i3XC`kn*<f]mS*qX#/N/,\*KKpagf=UlWFK-]1C0"JU)qChZIQfHc2Dkq/9`IMk9GUp8k#%'i@MFA&X3.s?6Np!MSZ,JR
%`3[5';F\9Lh7%-brTc6fC#^(rcT:;b%'n%uP2"$RGJN1DmR)m2Q5nrpagF?4FM^>eGu2:HdOSH#1sHPf`_Hu+71D59`]_n]5=8Q>
%irI=OK!T7qJp$H:&Y!sR+7k'P0@`8j!U+B8/IuORFKBbST1d)Bl4Bpk'K,c/+oXJO`,WZF5B/t3`hm(m0H'_s=4+g6iM/Rj*<j+e
%_%GK0mFH$;5ER"#+Y^K[-+]/aL.2=uZh2Z9E'0K]*]Hj70Seq<@g$B;XmnPKV@+k2gRh*nG+H2@TJ$a<>'@l"I`MgN-3g[Y`-e1-
%Oinlf8%Gc&D[d[MKM#f_nY\$SK?DhV4?nko\rRrn,$]7)q)p9ai3>81#JJ<MG.6,eom!lc_O"%B<d24*f2-Q]b54rEn&+@$b3,g=
%Pu/&d2h.4h#Qs@/HaMd%.XUW,XhO$\VPDZkG<b9lktLuV1OFVEp1KN&A%s;fr#f$kY&1'\7pZ;oTrWgk=EW&H1XND&<4^?&B69B>
%O*`j.\8#+6MjI*sKRrTd6c0@$@s[c>9r5kUqF?W)k\50SrQtIpj_;u:ohjKM,GLG3MP4hQoDQ0PP=eBI.S1d9b`3)*E@mep-WDKh
%*T4gD"i5tk7;o<d_lOC)D7?VpXV*&ep?(iU;\,;##H'c8IlQtYp$QgthEuF2>!(HI[5(3-5-7t2$M>L,k36/S/F15jH5G7\G]VL+
%>dXM$jiQ_'*bP<?:&rTIK/,M"e\C:3lB'?"40f__HI[mT5*<r8@T"l<DEM7uqu*LsH?pEXo&&g%o#]/3J\%,tQL15f^2glRjgS"_
%If##mY6YBrd7>nD;2t5<r@]I@e#fHJp9Ul.^OH"WJ`iid^V7;;pTGSi^p&]`:$$g5rWgpI\YsqB@H#+eNF*&Jq4VQ?LZL>eZ_6[*
%U\[/[d7Oj0LsaD$f)U2#>pWiVc_\i/Ibc2Tj1M\*LL5,0F5aPA_650U25Zo6/blQYJ:hd\Pgbs+Hj]5uf)eXP^D`,L^mB31[;`jp
%>X.3+e&D^NSk9je_Bs^X9,3ZLo2$AiKNN7PS^?b*r-Ep$6`K8)f/<K!_&l[9F1%`:^/A]F=IUQo"s)-Kb/;LXkuMQL;T/^DOPW`U
%@pqR5\'E#Q6`73+CO8(4MQ_*:n$RpME@GppXK3Ho-]bk:,N0R"-P+*.#m=arrYh-InAedSkq9h8?aAk0I]]uCm&20M)HEaJ]"-p#
%r_S!Kf%:H*A-07#Iu'apKGP@nK^8;8g??,ZA-7#k(Qd7b-dmg[6i/$g\pEuSm<,2UGp.b`b!!S+bkYY_1/XM8=aj0*mn^geIf/@%
%4Eb&f>D]79(Bq+=[;bg30ppaun"a!clh15O^%<;J8'2duf,Gt&d\t!d3Rfu-fu8R69)UWuYc?OOFukhNUnc@L_Upl)"B3?D2Yt!d
%P(T`MqF'>0\trcK2X?,grnq\7Q5qS8%jS@W7^SR;Wb)*FL"s2q%4CiBSt*BoUuTkDa\.'RW"Kg*`Z9C\ZC^*Y9`#s!.P_t!f[7rQ
%"m#IlN/,oh]4@e/=bYhoB%5o%VRTlqjiqt&O4g?<)m$(NBIF7$LG3r'MWMJL=tlQ-.f1sO%L&VaeRD2YKboo;con"[+!9s3$J(@'
%0;?\*r/1S6jBi&9ia4)U]_MHI.fkmd:AFd7LE0XaJg7M8qSRnLE,tpB?]V/O7+nP]To3EoCCg2W0th0JbV/31A-Sgr5ZPWn+]NL^
%MLT'r+lZka8=oUC\7!_!/;"\@m,URAK%1.5mpFg*n,.`9hX[ilD2%r)Z\>o=j7;`g+1b7]pqt'I^qX#0G5P%ooZYXiA_kZcG*`&R
%pHnG//),i.Bk-\\0=+H_?\oiqIPi\sp`gUS8,lVHr*7CZZZ7AhGBXR=rk6LGW^#3JKDp++4m>bt/O&u//,#,jIJOlT+"XnhrL$o+
%d=2kq`r&tVq8n,l(C^(7=/:fTX;Ebkq96,%^L42tr0Q6+"ol!<On.BnmF6*Dqs+XCs*//4qk"8UL;.tYT(eST>>+rfGrP&m=^&jQ
%?XXHBNQBAFho^ZIrNE&u=+=k84':ub[-ke?.t5.8&mnmH=K>_7/-HW5bX/8Ar4KfbCKh0/Hea-c(;uQ\iIZ*U]!egXC#1N0Y%l]!
%;>]Ku+]1>I0;K\NKS@W;`a$UA+642Xj^V`XgcT@)>]_S+$TAJ&F<<:T(7t*rVhJR^VQO`H\-:mo#&#Qr*YqqW8d;3XXBnGU$[I)5
%ECJN\/I%0neRBp[*A"MoNNst8nA.PiTsY]GT=6;.dIW^Z`T5-LDXejqU_g@=ops(Nq_MZcn?N^2]NGZE/j?59KgkB.ZPW:L^9RIM
%*PK6FMp:i]D6^beX"H!bp*r_9)i<iXn8Z4O`,$I-/;a@a`fbZJoX_DVeFG7=P3hJ^!?V\$*=&ddV=T]?cI,]PZG1LrH$Qus72G?X
%.`Y&eV>>8F]@?-4LR7sDh&VkpH0+lJ],^1?hCl2_>'!j3`.H1e-S)gPEMen+hQNL#QB.)M!m>jL**p9]kZfc*Re>:onr"YC^H=ZO
%0"3=,`eqO4#qN(Lo%?W[V9rHYjFs_$a=2JF&iF-60[7bSFEt66HsLZn'NR,8<c67WM^o]U#V/n\]N](sYJMgG:uH)2V0s(^%I'A6
%X2<scG]i=gl[C^?A-o<)>e[jsHG@)$H=a1c<Zer]j40$/'3oBb1Jb'BH?9\FE-6BF^D<uNf5$O!7FlWgPg3G^]lh#3$lHNUB]`CI
%mdIR3>5>Cf>r1N"[+:'U/Hf,7H7?(d#bD7]Cj%bApXfr\p0X$N^hL;b%U:)&Xocq8s!V:A(3#_XX/Up@bK8AoH?eOhEF!l]^96oF
%#kdimIS!m2>HtR.)bYZc0:LVnHJNhU>OPZiGJQP;q@M^%lRB>dYYY`TT:&=@A0YdmYE#gRTXN3R%_`o5iF$<W>_ZrNet*Z;)dGFF
%ZEYFUmP[u1['>`D[21c>*_uNjdPINLBGBc6TnR*P*XXLf#"*DV'FVlT?EZ[cB#P*_MYDM^q>TY=<"GVQ6J^oY'+W%NNl0:;d0rN\
%/Y"/8FLcQ0^<CIJKsd\6K<TXR1cH3\q<cGRq0?sY.5-RJM=/4?AhMNj2fC>Z+#cJ+`Qd#`a!.ju(>EHrMo@``-YdAXY]ICs>ZR%i
%9_"&XR3kVO/n`b@0Fc3s"?+r(I%\Jk2!11=Y[ibGZ3cG+*h6PWbHFBoj*"IUgocnt\YI+'%<oK,hWN%-?KPS#MlV4JR;_YZ&:!=N
%iq!>'.`W(q#B_K<^LXC&Y],k;?lEI[P6_LWg[^5@GS=<nY1K"$Jpt&U(>A[a>7B*74/.$I08TL^`3OWmR1"hI:mDW"2qDPSI6G:l
%.I?YWP`B\EV8@NW8Lg0EVY$nFXN9`%Jg@CJEZ.*rro;D6I(@GNjg&a*bO%&GS)`:hZ@-]=;N;B06+Ph-3`1j2k_m$>MfL;F+.]G%
%Q-5J>QE"f&ch\8V^9YEa=Z:6D,*DML+5gpQ5B<ON=qRO6PD!YYQB"XS91\EI\!"k`p/W@4OPMBn*Nj:&2!/PB=^)TLUPTdsqm9DH
%Chq1A@/I?Pqn*Tr]1MAUY*T5P-X*XZo5qNb[*q&Mq;%&/,C=V^=a\jb3Ejbq52@9T$LG3[f#h;IPc4'<T%FR#\Q8EG:J5UOp["3C
%7Q5DcS'dVIY=A,!bPl1c;/aGONt:n#YMC)$<;EC0];f1;@P=cc/\\f%Iu14=h+%=@`Rs_$q#4a8AXA!&9d4tjc6m(+FuPQPF:JtL
%ir3M0l+1(ob.3^Znh:ji-QfL+Z"31r31no0felZIANc-d\G+$A`d6Yl]mBA":2b"#eF\T(^IT/^SbBc^'%kkR6d"G<-?+Rclp!%f
%NqZn5!W.CENtM]>;nIKt>taQ+1tKodAts=PRu%:M0:@a1;Bk_,mb<MJ/pD?GX"OYfo7bo9@I6tM4^-%b[?#KK+"rZt5u@YFND=Xk
%Z#?p0:E9@124Is4X_2F9G;$u;ephtXCW$n,KaWMpIYi"=:P*VpFqU!:G:-JOilOc%q`^DU+/cSga[_*/h(<_-Ej)J=l7#f`(/H`5
%pYF;rc=?%]s%qsO.;<SV/>oX&__c"kTG0@mgH9&mp\5R#r)25'4)^Wo*9K3QQ&GS>k'8]]Qj^8.re:5W5q2/;(JZ2j\O*]&.:0*B
%/f-2#G=RdRgO/Y[_CfZT0?(sPp@>`%H[Jt!8\J@4ictR%\VaB;(K\)go"pYtfhGaF#7iK>\_u2mFgZ['\d:PRaZ%=sMrN"!*N.]h
%25>12WFbgA$QB]D[ZLo-n(:6ZrU,KF52MPHMnA_7SWa":Z#&4Ph\TM/&,q@R$;C&qFV6,e>b'o^%p$N2*sGABI*DD)/!#FtIdn,d
%\4Aboel_aIFBo8<#D>eF3RMC'c]<:@P.$T(hJ7Jcb:Ds<HCEHsRFAM%f(nQEnZmOf>-un>k9]5cEs^<[nnn*'A0#6gZF!JW.A)kB
%]A0p/$g>GN,O20g[rL4tCn4Z&K@a!IGBM`De14D1b&_s-R`hls<?Xg*fD)]7<pb"8EEP*`[VZ<EJM#pK,'%<Q:U1h)^.>/ubY.q!
%fQ_+11HT`%`@TUoP;0W)IVENYG3VaUDn<%,=L`882PSt%7cTV(+#[3PeCA/GQ+_+%2OPS$6On=A_ZTn\WYK`e>9&i2Cn9^\Sm,7B
%IgFN9.aP`dlW$DYYl/rO\"ho;9D`F/hJWXb/*d0%%dF)`A@>'ME7a,VI)\"TUdAnN^;%#3qHg-(PP!=7qPe[`d5;0#@"a(E>)St^
%2"W^S<^oRLHJIc`,%kgCa&^Y=eSM:[-`oV&oESoF9,d70^u5:c^`oA>CN^[e,8X*,djY1eE.>Ts29VHei<EV,Z2MRu+-.p[hd.&_
%K0iXX#mFOK[6EnJ(-kX;`<R>N*sm5bE8sH:.:G^;UQT,jD]3/7V&(corQefHYYYFMnnGQ#ldU$K;agAfoa\!$g\5>TDu/2A%ocf9
%ksMQ\cjHPCho%R_2I<3*WdoBka/?hhM`)FirjM'>6Nd@q]"Sq.SBksHFK3;j)0F6*Ai+p*PMYJD.K"o2-LMDk"T!Ne$O80G5(agi
%dsS#^n,%rs[m<KV;Y34j)kWGt$dLSmA-766(nK?J&+le.X0sL1"W;/a[opaa>(jpuF&+;ojH=AeL21XukiTEkfC'r0-_)44R/PE-
%<Nl/-?9Q;#WTRj25:rcCFYA,Ep[<a#<n/ungKS1"(2Tc)?L`C>:i9<a:koR"J']8ZXZM'5,GWrlA\j-]QgY^+*n")qF,ha"/&[@o
%-WB!9]^eG)7i2UY?m_ZP?2/4dZZ!r"^C.3>qHb"hLp(sn6ESuj2DrBoe_*/4,r%A;i*tH."b(XIp]KDC2Z$>KKq[C$NTD)[eHFRj
%_6j_tNd(4-q?TafimZhu^lJE$m(1@tHu.Q_,?K?*r:Qsq!5PIWoC8T"$rQZe4Ofi%1Wi&iBuZ[<)n!.*pSe8Rh&T.th]J4_"ufFi
%7I,_qk_7+DI1m=8J;q%16@@_ljG4,YFaC:B-(L%?_,7c;m,@o&hY5F<CS9bYPkgYF,?"g(CfHAmhW*3]`Oi#dk*5IAN#mFg@tN0R
%R.Wqh"A`Ij(b'`dY%&d4.VbNUp/AFbgl!/qUk*%RR*ZG'GXJGH_7kc!4^a5t44>`H=>^FB*d$rN+3TVjs%e)Do!'\k*#e@D?^&H*
%9_2D;0NMW&S?DM`bH$\9IP7&YN%?27oO_RRC7uS8\O8[@*"glf:MaM$j!dCZT!i`p^"gb9E;OB_F\B@'394.]Tm5)DDq#u]VZ/@;
%hcO)W(g=G_,[DCcUr>ms@Xn,SfSa;/=-',"[j7kMgp+0/$Gn")[$*/bl3=R/h0KL58%1E\m:cBQgOs:8>?S_slZLj:<tET^d;;1q
%-]FVP;DK4uXhL2R>J>Xpj^`Zt,2_g4OtR>ciAS%TCKT85/<fPPK"KH?2k:YKY2V+sl4m!VX>#FKG=Pl#eV\a"G'>#Y,f5o.B6Es,
%4@H[El%`rJ*Gu"D)p@(0g4$R6dh$u)T>?JMQ%pk-GNc1SQ$BEpW6)O8&4`<nOsN$`)Vs7S]qPVFU>(OFlD"NT<aKd4cQ<ZH02&Qt
%BX(,FENPM<0TGq7(+c:Sin7M0-9Q-^a-QOd@/OQq)7T>mdL!V!^3b.8=PG<jZoWXkJuMAN7]0jd9hi'UV<<[)GZ]uqbBp954*]YB
%Ab.FU83e</F]cOu@;5&u+W>-^<ZAlGj/l%dEPGulD)Ff8rfEu;@J^Zs-a2h+(!i*h7Uf9u+g]3NCS;2#DT\jd9#FAH3L\$*04(J5
%<"X<[PF4LHEE>n;O2:5,nm-o!/j>A:GFQc@d]TskLgmoYY,&BNZ>)=)%nIj65qgDaL4*/d:2Xh$.qsM&f#DDL]^SH]+^JIoVRV^"
%aHth&HJA8&I?cjfr=^-LB0$rT_du)cYF4>:DJFesmT"J$JZa1)\&p?OO$oH8'uP:,\Cd8THGpEl96_:)JR."ja'Q>Bg-gEQq*`kp
%42QSk/%q0VL#bl\=kPo`9ki>H;Ht\XS>iF0f,(\s,(>u^jGhdTlU.J*S%lg7iJB>^<\!"(T%Mt4>e#gUd`IiVVhFRaD/N>lbLL^/
%ZH`L^GFrIB]PJ$(<:[5PUKB.\I[!S3b"%[X4^M&#5S`Li_Ip]u9C8"-Zn!S/FK<bkL_UC]h7(=^0\=:#ShR<aIrD8J=AUW$>HXs[
%noC"BhVLm\l2)l)oO.QA4.QKp=l0M)/bO*_?Gk!0$b%JlW]kd;G*h\)WH#900Y8ER3b4*(C^40Kcfqj[;)lR3(N-e!dc35kaY65\
%m^]?qf2c(+6qo_GVh3T@HD%HL#<*D!Rs_5pMAcZaC9.DTMh+:(Q>4TIV2Or4I*5fTb2N!.]Gqi;@6YL\.&u`m7BPlG$(*&?3%bF:
%Cj+?>4F:"VDnVsIX5Eo9>QNkVE=B<0*5>LGc=o=YC2Tl3i[ku%h1*H-1(HhW\k860.OiM[.?qFifFqj-/iUkQaj'#"HMjU<DT'f^
%V%kN1Y*WOTUL8S%<bfN5iR05"q(?hsWNF$S%kDWKR&rBq)8H>('!0]b;+OAd?6AeN*G.9W..HJ7Fls\5r]+*qC0.Zuj\gH8hb*7J
%E+^XRAn[[,gV>K#1kQ:h+gW2mYI0>]p--+NK)46nFj8/Hn1?9VAsm*e[C5[Q2=N^Q=&G[C3cYrNW9<&[:nE;DR<Ac']<j!+frfT:
%b<I'qS?$Dk3P'X##XasA9>H2H8t<T^5/m*KJhX],3[:Lf9-\2<+tHW'DF<6mg"smuR^.=:/M`*P]-qa-ek!WLEh#.!b;&kXn7G1E
%:Y35*VFB<XCc+uU^hMS02<W8[[;)F[k6lYEW2K87kP!a@F<EVJ.h2INcJd5FP'1h+\"%1/$cHB>J]K[-jQIG`jnJ4'XI#-rEp/s2
%F^u1g"IY!B8qt8q"lag]k);dn,1GK;UKm(;H?@a)[_j+&O&C&.kIUVrPM:gu(OPZ70';:CR=FTYg104;R>VB9V73KQ]hoh\"6ST"
%_pWj<^0_VpLa32RE;oeW^L4$9s1@).X+iT#q[L8;V'5,V;nlVV3,6*^L!W(LonIRk%Xge%+L2l[*ZsUcXZu-KCS3>!q*cotC#7kd
%-'p<\`t9-<f_Jge&d<8PmI5)1Zr+^!->13p(rOO:=XtfnDKfbp*08Bk]h@a)+L5G';YK(2Zp-8)4d0k:'5p6"E2tIVlc"tqG5*Q!
%5?/W=okR0i9@Nac+5B9OZ'tGlb"0J1&58K]C`6ps8@dS)64sntBuP-_m[.rV<k(8,VPC2<!V1aJkOp!4X9maiRS?!ghaGoloe<s7
%7P@5q?3CgCJp8VFO'XDE<"m:3;`%LS^TLDjk)(n3cKY+G`uU'@Y=Q6Wg"LDb6^F1BL&u]Y-9TNUmKZL*-m)q7UR/#sC809B^J,ai
%]uJkR`LleTGr(kHjra!M+66sBK,pO185bAe$"H/9LRuuGkgdq3^`=]#Q`X5$UTbW&2Rni![:J=:C/SD7*=P7e&jRI\eH'TYkj2Wt
%\[";@A-)KV-GZXL[OO+MHS`IF!4RZ`c/\Em(bQ4!.#@!(g]&UGnW:;C!:%<m?9DaN]l:3ZW$*FH-ItO%nmd*0_'ipJ5&fS%Z!;Li
%VX),ZM/W^$)@Z<+&eC.DpG/n(qrCUZ>(mgq`V<U.DEWHWr6QU\139tOb3uRWSZ37ghj'5=aio[E%60-"#;XU;6*,>S?^fY7/9c(:
%C(FoKF`ajNEB+88l)l;6p[)?QDG&G@OrM1nKCn*h;Y=:8^V6e%SXjV-q4e(b2EL`;KqbRO[tKt(EO0.qR-dlYD"_@a1E(r$X06@(
%HnWN/0Dqi6c5+uRi)a4ZUc?0Gee]"-H[c0!r:JK;JVPoj*(CWuf8kQGW16nA^7dqKDg75m\K1_.6=8oD8@`.a.&t1Y9Nm=O[o<%[
%r[;g`nR6i#SSE>q4Lo%2Tht^A=PCDdjAP\*IWcVmjT7B#'5+<#S)r;U8cB?$o%o)$(Z&T,[DL#XDXit5[_h0U4/^gX;tnLWAG1M!
%C7(m%RH^Yef.M`tn^S\K@>ignHH$(A_,SoP`\i"D'gIK^h)N;i>dXGsEk$ITWEVldre5sn)E)%]>>&g$m=iH1oQjn4!9h"G"DFRc
%"F#![:-Sp[25HLuDAOCadAsV38u*6H)rM1U(S^=MXF=+53!^f@mIb*^e)'AL5IF.rp+:Q'1iI!M8[0#i&kU@11J?j8FiocifX2>K
%A&oFf9#>6\&h-%umNAH!]d?4'oM?!9NI0dmBAPFST&!0^RA<K/<W"5#!eHii:@.2!/Q5g?*1`=XjbC@o;o,jF8E]`7AE%!Z3iA)$
%h[S%d!Nie9m>)AQGsupZF`=o02oFf0%%;*t=9PLpF.QVb&#lJIjZ?RneK94!5HaZb=KScTJAK[^1,))?TF\'"MOV)pE+D?*qi7KI
%NXO060n>FjNa)<fInmVugO)Uh4m%Vt&@$$pp/D*m;NSGM$#AfD5iItpir`qCIPJFIGHm=T1lT&VG^1<iSZSMbA*8Og*g#2bhLCXI
%Fgc+u!uU<2FuGPP]BhRJ+QoO.@.e^B^#^buQ)/m)BlW5]=TOi-9kA#`H+4Vl,9bA5"\<l8?*8flW!cgpV0q[$=TrcFkNu5f?)kF5
%*QkGU'Ru'J/p05RWO!`0WaG%%e!Lih`BlO@FD]RSAFB0#SMBsnQdg/=?Rh=sZ$LR%Z/.r$S\-sbIuh+5INk@gh0Q<nmQ]uZ\LsM=
%[W3Tu[e.U*S^cI>-e0dn[:.ms!0\TGbDYV?rC1FJ(&P]:_<-_0/[iL)*7nkKZR9&I-Vb;@HQrmWm![Oc3s_fmcU$",='+&<%)mmN
%_cQWA'XE5ZNZ>oDW(3#XPC>[I:7>=*&0O&dHsH:k/,<g.@4WsdT\i'gf%eMPmjSm3%I.9F.^dddasJ(N78cY'Xa&#0Q9/m:?AmM\
%[>P;2NQD^mP@R+1hFubjSWseQW\='\!FgW#S![4!XWu;L<Mgj,Og"M3jhnCt1+lS[h3%L,Zp_%:;MCL>Ss+Ei.9SZHUQ_RRiN2c]
%0qF+`<7?\;p&&33LX!cec$JaT0!Y)9k[bp4V72X/f5^kX(Dig./%lj$>4rUYA\KrpM@6L!H%@T=f"BF'j1jPM[eJ&,7W;Gc5<s_i
%HFn=KQPL+1R;-5grsX#1AL2Y*.<JjJmn/AkAGEeW,!Qoc7IKZC+>'CY$"rS$Dmuo)%_!YA%If-?,$6]]C\m(4O57D*k/]ikRlkq3
%\!%cMFD<nA[!VlmH1MqmjEAMO8oqE@m]:k1!iR\o%7!]kL)@(tRB.*=a9S,*_e"^np;?M$EnZ!W[20oHabjYbhpGXCr+Is<RmYfl
%6tME$Qr,NO_2(Csngt<adS&1F#/c;j>&o+:=bjLSQ"]9fFEuX/O1UZ`bET1a!PM"1\5)>DO-iI[K7b/K^J2YMY6>WfhR\;HC&]KF
%A)f[^j*UI_p24ZnD3V`t#X4M4?&W=J)n48`Koh1KTqaDs%/-6+82%9ua#$kBf1@QiZcuH@Cr4\qE8VacXiBH"E>mnWEuMAoQ*i?q
%!;DP=EFZ(9:rQBYa$CboCLP3Na^g16hiZ/C"6eA(R1>U*Tc%@M^%<2@eh`L>h:Q0lHI.!*Fl'>Vd$(CdmGC<+ZMiD`3J'>J[tcR?
%JK&okRrWV-A/`aJW.[5Gnp2+Gj#dsSCtjAAh6i.#K)cQDc.;JWT't)aQRa_dMTkdo42,onPj!ggWTgpjZ&"l49^LQWG*3fTf5`Np
%Wd"?`*qD7#R[$id6$e&Ta)@kSb5&ke"S-kXSgEXn<i*(,!nmO11^K6#M$f7D^JePbE1H'C5\'+0(!NcaJVT;[O8A5bK0:8-_:7`=
%HW.g=rRnBKgL`M)%a[^9bE"SI[,ooX8P4CX%OS^?^/YD'M9q)YmAui^DD6]'feaHhgJ4j)l]loS2^JGtac+BoePo5qDg-.F4d987
%$sb44Mai%dO/t0glLTOQlJ:%r#qlTOn!3NRkj6<R@]Seb&-RH#ca3c[!\J#bdad_^+L]jbS$"jLHd"m!YfcLYWd+lioBCA($Het/
%(<W8MYs^?W_?nF!N^8H'3!`EjO*a)M?>g<J6Zb.bl7P3HTDh0U.#fVmpnsu1([C+fFF!CqWQ9FCK1,+0]RVH`6?N*`InUn(D(kPU
%SO[V93%_87UnV'((D)_OB0h:,GV&s[hq#UQ='DkM;nO$#AF2G3%U:Y4Nt-H^rl'-J4`p'3!][lY$W#S*QL47$M4J0WPSU\d](^rd
%qmrAN1hlnG]q$c99%h7b5"tY-ahb?mPB37s"F$U26BW<XJ<`5BjF#Y7`_a@VoGAKG6mLf6W=\$qp!^Dg@LN(b\(=?99d`-'s3WGH
%O2Z#5q4V";^XFOO;lI6(&;W$q!b]U?m@58.DhbD[qA3qPB!L(Xj4r"CO'I<^7G#)0TlD_/Y'oX<%r[a7im,,fX,a&_`<mE%@DG(7
%*du-3nVsTC1+.,=q$MLMMeU5!m?<j:O@o9_?em=[f8\&'p;Y?S4Jlq*E4cnfW?G<sO-@S'^F(-OoLhK/'edOH7gHQm>.m3sE'nD%
%>6&$(hed(/(B+_%\X@bH:8_(783L;2/c^5b2t-BgQ7d3%0+QWFe+[>W:Brpb<iRDK`;"<p@*$U:=caoqULidJL]rgfX.\!9\#I`6
%;N2&cI)r,c`oBNG<_0[NV:Qr/D[/&]29<M?g#387UTELZNOOe-qG-Ut\63pQ>CRcYrdt_rN#RC69@T]t:blN-Y"$8.L-*"S9WoJU
%'pQu-m=s_3_,(;@l=5Ku3NAGr(/j,l-ASJ4`F.\u9Iel3@`kfFatG$(k*bdZI3t-*SmOBbbru)@qK_IZ6_h.e*r7D2@"H#-T,tHs
%\V"rPEd^dfC@nkH4+b=0\8fStJJdF^!6fENY4G;K`<T2:Q:1BpQoY_W@"#j#YbaZJ<SBTdTe9AL9Bnt2DFps:@3uG!42@;6pb>gJ
%PrcFtiEqlk>")eYr%b)8r_Zhu!PbDMnFFj',=Z6ipkd&ZU"mtj+8cV(*r3]$?s9qpki8&d6bIJZ'[J[t4;arl2>[maq`Bl=24AZo
%h$KFLDZA<_]nc)fRWT^dp!`m3*S7WVo@a`R\8-8HQDqno*h_hJjK[qFoq(]?D?<<YHKiZfQ]\OS2*=oCdTf#JG^KDA_I#Mj[Br]r
%c/Y0]414`2:AiDC39J+iD8!hNf;iLRhJp,cDb3B;r8DtN.QOS(?X1c8n%$EPZKbp[`CJdAlP$N\>Q!MGCS\G#%J[5',"geWHgdlD
%a<X'Y[.b7+VQs[&T_h1XU#``1-[`6PH,]4ET=B\Zl[tQ"H@?5TLTdYN06M%-nXn1d>LrU>5&nK4qE6<<.JpKGJ(.OU+qYAZ7r)."
%4VC=gG#Plr[Be1s7j@;u5)f3TpNQUNZs>lsnh;OX3,h"JL+Ckc!5/iaI&T'V_id^b#?ZcYAYgXGS`?J[i<'!dB>BVTn"]L%]6\6k
%=Hso94<8nhFR?KrbpV#\n3;Dd7cnXGf+TYn?E=D"+5qTiI.&h3oD\47eQ5TQiCCIkRKbtCn#WSKK@[^LjIUrDGR*T#"c&JKBmA`=
%ZaE75@Y]^U);95^J^uBA\iotGfqCUI@+P;:5O2U,Be>"E,egLPOZ?/\Y9+Ql:?:>cU+!=#*uK_K"FSn4U,&f"_$<8*'FnL8c#LD;
%W<E$!;3A^>UFLdkn4D^BPT/7+nR4lfPRd3l)eM'\pT^G8KEVQBIYd0sYUiAm`:ICC7Bf?[_n;_J^(T;I_YbAuq*G--5R.M*_EEe!
%b0VIkE47#YRj<YI5o"bjOlaG"YGh):=G\:r0WN2%@@<<>+"OT?XAe&M9b>4JL^T@K4tQ:F$Z2VoCKJUEOpkhL.M'de"J^i.PKY.>
%'Prtu0Im7A/.<L&7)N_<%TWld_V8XU%1>9/bn@&Y5@I;fJTZL*W6cl3@>TcIYs;!MP9aOu,dUoJ#0u2p.]\4?*pJn'@(ldA@T>]$
%Z^`.GRgcX@3`oC:+XMkeg*DEsNi!XoOcQkPJ9>f>VhRX&a!#"OX<PPA7ZbNl@_?!2nEoQn]cB'^o>l1`QE7)?.^Xb?GSICcdbo[@
%fVSWdJrKU-f#apJ]-IJ)Jjd.#E/]BS@7Bt*H4Z5VAm'u2g"!<Wh#ph*"$/s@k!;J,MTm=e##_ZQg]NeYj8pe2"#==o=^aaL?n]I!
%E')Cf^'&Hd(s4N`lC82RWJE+mWe(4B'-luZD%_,N`ATG%E<6jonlY$V==,FTX9g3Y&HNIP1(sclCk]J9!V@J3k27.2WM1VY:_XYt
%_9&p%cq^S^Jc]*siZo3`07_&nl>csD@N,hpoPR5c9oqqB(f]Hk2d$n3cCeHoFq@]hB5==S@Y-JI:BkTX5:SH1O-LjW3k'hb>jWZP
%qSbZWPQNf`a!kFo72oYQ&.d)23cH3U+:`OaAUn6U#MM1=i]nknJM_C\)BaJ7oYLt!&nqL!P^,dH'EsG_iCLQhE$.5GV1N/a,MJ/K
%Pb/]-'#R:O"Y+JSkGZ&0N^6KL!%\L)Vm6@Y1]]jrMu`*A(kt>1!>XZ!1'.^rTTZ&u"\9LH=bUsPO[TbVY"54=14rPF4:ib=:pR;<
%i#ak./-V'1)FmsK1dTPBMl7fO.#LbEl64"i2@=36;.(-=nHs$2MT,\a&n2aC%.L3qfEOkL+=s;=!p'bVQCrb'.ftDc"g!pn/V\G?
%i@#g6,EE+cZgf";dc$&>K5HKZS+%F8%N+Sl!)*qq1Fr`8"BbbE$'>H25r^&5,@TdJ!*6?:=:^D:&cb/S1Xa&`,0C=s(B@HE):DYV
%i0M`U)'FMSXQAD%c`%WH<Ls61@S(3/$NUeW,q4U0;'A?K#Y!\-^l<p&!S\b*_e1F9_Pf'e*5VKV*Ui#6!HA/QK;0-ug)8:h,B/Tp
%2(W;Z75"'T*+]5R&f?/7#?$a'Si-Z4LbJi7]Dut?j:/#=W"GQ@#V%f((4hgK`XNW'TS*<C$L+XBMZIpP7cMl6WXJlf]Ln"<=B$Z6
%9F%!l1P6VO<<F']k(b(t$J;-sB8H'Yp47H+H9\nG\6l)$Mn0Gck;ZRpN-N=Y:fK0cVSVR"Wu\lT5Zi+.J2'o_Lcp:@!?6RrS-UOa
%O\oNmE'D@2\#;Q3$ipWBK*N\==]?LL9>Kb"Jd/YM=(3hWaJ/HT+-2d4UB-274$`9P8#SOi2CJgI>TOXbQA](+;%SRE+5@;8#.f@g
%JWU#Znc/`!h\]^N&uk)BO=16T!?Hsrn,m,&TE7UamZ9dh"g3oMM2q`E_Y"8o9NcI\1lsusYL6HXL9V?95aTT35U$_2$^rV%1op_O
%8^oF?<,WYF*a\!Fgj(_U<"ImpfK>1Jg;@@c_rJm"11pmf_+B;'0IHiJ=p8*4N%C*B<jWMMr@l4n,0CGV*^Go#`aYSX(q5%LJMEmS
%"ABrS"P=R$,[;ZE[>[bBcr,*L/#XNQ/iG2P)dkfP%-KU?!mC_q'jOoJKhe:-():3^+Z'=,(Dq781)L3k*IScq0slJ*66Lte6]6P=
%bCBaOcP!_-UJ)DaJc\5p"Nq"?OB"+F^c;C7:cZHi1*X.\U'!BJ`sc*$";>3/)DH<\;$_2eS.Zg*MX_nC-A7T.@TCt+#-nlk"rZA2
%_I4MklOY@q%N/?$Qinj"\.b*cN&Dn@TbY(d(-sSVh>nl-LrVe,!rl_3#@_9Vq%,\k,!QCo9S#Z&i-g^a(or345\NV\@p$TfR"N:i
%jW1*6=;?JY4pta#'2$1Z6>-a_a-10W@nqP*@_&/S$;3'T`n29a%PWP:$nMA[=bq@>&?ug8c,*Qc`5,5?*5P&R@mmONkR0b_k\d)V
%"(d/#&/Bc08IBTC+>H0YkX-OBRAHj:6K$3(al(YoM7@%$4#*1U2KZ0Tgr!lGhG+=\MFh&,H3"j"VM!/"!YC/RUAt<0`#0DF+lip-
%3Y3@-%a1#FXs1ma8?dWe6rZMTnUoR?SKUr5:rPo^#=NRQ7fdEuP/,9S:?')gBEl?#j)UOI^k-jk)anWI5UhX7!+h[Vr5)]o_q6#s
%^nVLW0\?ltU8"dmb%'9rL]A4map=[D+r/,#`4RhOkBO#^E#/Kup;LEF^oW+j6bjRE!=/uu,Z"pc>o#rj"GnTaiI\)&\Y>OECh4%'
%73CG:(mK\95Xf6=,=2o8GT6c3UW'P"FqP8j#WAd.,J1a8.$t&+W4o>AlN]r`dmOCu.VZdkR%oNK:(-!G#T#fj$uoi#0GbKSO=!X^
%i$Jc:4d$><2A'p/mM=4IPK\qC"/>WG7>0`fFp6\*POaP3-42l+"gT+)4:iUG&C=b*4ZV_U=J-ZhqZ+eARfS(5Zkq@YWYE[:b/'8A
%$ciC\i?j,lHV#2'@krb++N?bW:R6WJW.HHp!s_s@@7lVt&^]M<2[,K!,RanQ%YRS>`6A]_"PQ,IALCj)fDqED:*cjT!Ys&t@NR:H
%&nd"CIL1E.@MK?579BcKb8=+BM/IkFJXN0f!SS)&@`f1KPDBPRVFJcp"Qa9d9H/A@MK'68,4j16@57gAd:j4*kM]a%;M+7g/=JU/
%()&bBH_R^0d$tBe&K=3[#8"ftXqI*fUBDnEOq;8[E1rAt69mtOO=V,&B54GS<"a3*LhDr04B;V.m@nZs5Y*nc7A^DKf&SN$U(Ir_
%=V7tBI$kOO4G8*T.l:mk<#E7Wd:igCT#6d469H!7*`so3P:Qd>N4B0_,:Z_VGhM&Ek]d.[!C1I^eI@mK``X#*=+%dfKUS9X^qJ[!
%!I^L]$Y+5^m2LHl6npk>^;=s0K*'*qn3U(T&lm<Y!'^MKBFk<hb2D9pd/hYsB`\FI$AOf'^/YTY6o8EaJOTdL<?Z'(<eV]iJC]d`
%R.^6q#9kOO,@Na*%o[fdR7LNrYT70e!;6bsW?G4Z8UtUpg`bUM.auIsK.%@/$tDgD@j6^:<*l4g!8`Y[+Teqi!C4Z79L-sX+9oJ7
%GRfGC.!f5$Z>G+ZKjknY*=9c2OL]laaq0\S3$)8*LtI_)b)7OD6GqfRC]L5/Q;gm]0>Sm>Lr&kCKM2Ye?m6/3JN6:G\o3CN!MQ(&
%'(nq@681)_%*Ti\"S%ZY%LZe)8K^A4+SGm579X:I'e*%nJtQ"2Q@^'2]LH?Fa6-me-%qp7,4\%V$+;$d>U@98E"@sV7ZIa&#T8&[
%9%"aj@lCD-aFGna</:Yg-]mTVV'Ue%;F6Mm/.eBeHonM;ed9G1<g9g9`:)VqASf3bRt.aZLP_j"Q`bo@Joa2B"UpWkIf5#>s'VrC
%P+`?G9Su?ui*])'LEcC3e-tt8,hISZJOl52@1c./8GVG>.#(2P@"B<>ahTl]$'SMnCoWR3Oq3Wo@:bWI2&+8hL-LcG-41L99+3^5
%Hr7[i)br2AaXo?eifG65jq*Uc8Mm.D_fsf[<-[c,6D?tMK#^Cf2&DcIej-Jf7.#k*i_YU-d3NC;:!+"1E^a#OU&o!4+,8#ARPk-u
%BnL4@T`tB(l7Qcq<O7dE$(sDJ>fAZ&?jSEFE@,-cr.2L]=UYSOE<<gek:.U-Jls2/SaSuh+;0JD!,;e-TKYaH%&PjlocQM^KX333
%_%t'QFV5,=3)XEu#f,BsE0E\ID7!#+'?*Qu8!5W@`$u$geI(>&aMAS=cCsD*qDm&)>!ZUOG_Hi``QV"A\ALe@?dtkU9aaU%k?+=+
%^>PN,KP51TBFaPIdTJseX>W?WJ-?f<W"SS-XqjZh=B0r,)*gh_GX;W*kb(0Yd@j2Cr\H#5W(8_kK3]WK;:-k,Rj&H:"d:/J@Ef0"
%P!GK^7!(1C0L\f_@MKME.h[lC=O7>II6]E;$W7NeUu'N7ah]_d2-D6U'r7B:al]RY5s46mK,G`!3S#u0P*6lJ5_)J-<%'5M#"oBA
%^*!tEkHTmf3/s#T.MNBsg(BmY+SE)X13+7,8&^W?_f/TNJJ=nP7^Q-@"sFW@-fmQ2&X(llK&ij@j]%8=0>JE[4qCOF8=[K5P1q8q
%HfJnI+EllC[_o-K-<88DG[`buEJQW4#cB0<HdD+#9R3u!)cA,P&H(KADBi:`#]t\g8D"9c!D4?iNE2p\HHD=$!(=g5XQ$Sn=Pb2%
%%Hs`?$-qoF\r@7Jdi9)/YXDnS6p`nl&rg^8nW96egJK72hJ!0M_@V977$&asL>kJF"@8gJZjCE?jDHXZ?Jp-8H',<C(oN2'&^_hS
%W_5)tp#bB[`ZTKK=<HoFDK/S[d2jfMMUMd6LQoR8>N-aAD$::t$E;s7B*@F/8>R2>"!ZhL2QQ%9ARq(EPIsr4@O`M1N)_?Z>hGiC
%['D;oV2$4=!f8R2.3YEQPZ.rtfLCfbk"%hB3c+poTbEYB%)E_B1kT:kaVeUniINdFA2>^7'9_$[6nfO'@0&Vi8Ee3Z.OmtjP&]*(
%QJMa$(Jn5hXs0hV`hseD6Qk/t+;G@,O',Yj_-JCQbei;8#_EP#,#J?Y7gO]%]bg'0k,E?@=>.XRT[C^9nAV=]Uh+e'd]:j<+uL32
%?Xt-(KIIE744"RfO[-@9'MQ>o+VLK(`@WiuAq_Qt,i9jjT7k$#VR->:kZASR"S!FJ+gDHd'n^.>X+J_@qH]%,_1DE$,qu#`itb3!
%Gd:jT_BpgY#W,#i7Zm$_!-Z8;!C@+aGZ+2[]*EkbP[%3'Ha_#ETS#'/%+0,M(m:'?ba_?XSAi>Ya3gk4bksgR79B@A`Xl&7ml+W:
%+CW^6d]Vd\3:LAiB&sG$)]>CSWaOa(G`clP@-UC:A?<0-NlDG@G\,kN3R2=PC%=`6>aFcBEkmG\OM##'a7QbY2kYt@M546HX8j7G
%B)7n;EDfTs)$DM=-HV:U$(tDhg#\!9<[$8oKb0%0]$gf-)$EZ>*/io"XA_!HG(K"`Jf)kDTnaH2[jj3h`:>*_1=1hLb>Urt+kMmJ
%\;QT!=h=E^eN4BR@kCc%66G!.63@JGi>T448.%X<of`F<0917\*YNJ:UcBu"1HhPSJh2fd%9On=+KOd0'A4fH<)Qb)+>6PfdqJ6*
%Pp'fTck57Ed!^g-WR`d*mOQ]52oJ+OpQ/pWiNZ"7TatTD!>,a?<>P>G=Y*E#1j/r`c:C_&!r3*_&Rl+f8]7k."H>Os"bfFI>[V+R
%7t<FQFW*]F(V\k8S16TN!6rOa!:r[J2?K!1*6*J1)K\%"AqdQK!n!#:-m]-/F(D@L"32*De=JII=;IrPR(teD#`Xr^)G$,hALJ!#
%7cG8&#["'hH.?V^'T8a''kJ<8+F],A&4B-?*+_.aT?LdH7lKt;d'6]ro;&Sqek9%t'ai7>,pQDVg"D%s4WWT-2QDeJ5\qcU*m<Oq
%!(5$aJ2Un*fOG!&NjR<Q@M)FK<8*b+p/rqK.i;i]@2VK['ir92hPgd3CkIj(Qiek#Yn@2!,h+#bB,j2D*!(8%'Y;JA)kO\b3aBHV
%"(XVh-7[#4gL4X(;hrXiE8"F9fm<h&PZbE?"d.dU#OqiiF'Jb!Ua3a5V.5p+#]&>O1kcAB[r'76*%@XJp]JNrV#cT"0Z.>l",g_'
%Atu^Ial.sZSjAJU4M2i!gVI)\KWih@+kG2R*m;X%%Ib)G%([H+dnLjF`tXeVULJh0],>iTf%##f=_O,*[S5C7JaTi&<Wt:,4-h"#
%g"G`.>tM>g9t$!XD)%rT"d4#eilSp+_N4j2A2B5JVo@$L;?>)L&[U]Jc<ub:2iLn^BGRoTBQ<PO'7P8.N)GaKVcCZU0Q!TMK:AFA
%D=S1cWAHl0H&Sce"s`,r7.Xu+LK(P1/n+fV)EF)t+L)N&ENp+Si^c='[On`s7+*DaLFA;%)i'N5)iIJH86I(nM$sgKnL0=>o8:G7
%)8.+0JS/pXLIqq!*\=-qAgp<i6GY<biD0)T?D91pl``Z`<2UFj@TOs*GiTb2_\A-/[6bXF#aEr=ipdkR:4qiNds;t1i6IoLLDs,.
%$=On6m"f'K8bW1W9pI0*a9K+p."pYXXPB.#jLPKI)7ht]W62FdWGLNB(6WoM@L#aE9q3&SlsW^&^dj-$->+*mXo[f"_]p@e"BtQ<
%@Llpt_@[t:#ebCXGC^)5'O5c!=Zd>jXr>[6^3AiNCR'Ec(uYib6r2lOR><^4]Yn<]^lZGc$oqaN'm;^+L)"3LVHjc.TGA13&Qu1Z
%9(]2&*jbt2X1I%W,A;V[CF&g&_%B[4C_SW(7m_K#0H-bn(^(2m3K*:g?:Ei`ciXg^B<bJJI[P'eU&.7o%Q/9O4G'0OE4'10a+I)u
%8").Mk=@a5E-r<Wiars!)KDO@/:eNR4:U3_<F?S;VF^kL:_#4KciLZi9b0bu(UIC@oJi#A@3G`IA@bnI8;hI.)1h-0K>5]pG2SmS
%GGq>2!s6J7Z7+.7:BeuXE*p`;LcaNW(0/JtK6Dgs;-5mMTH+"5'L='u?mT*UgLI`l%6.#3+S0,\\7O!dcI"[H^)4Eh_;^#6A/jsK
%b2dg$OSI_u8n,"D$6q=)n6!4+VNDAhd/`,6.OG8=KGl>8rt5PY*&T!'4Z(=#;hq$ENT#&>11f6pbDs$+'?>^/N2I-K?47+XfnPfD
%-C0mATi&VkWhVtLH_;hr!W`j`.M4[_6JN%T1O-J7.l.O(:njL`%*aIa7NV:?Gb,C-BP4S<M7tE#dZ3/f>mdPAathWR`02/P7:Xk:
%5bHBOSq&#0W.V#K!%+'A@1iR1JfD%\)<CQ@[0JrY/4[5gMD5Gu`Uk4<s/BIY(D3Ad+@h,Tq&s0]b&_LTB81o]0,\_Y$nI*hlS>'8
%,%WAX:;_D!BjXCnL_0npQCs0ME%@8e6l\5(l(hKb]&uX=c64h!!<JCk@tfS^)\J.<TEc7:>!gOlM%Cmd,\A?>KIgqMSbrk"kq4$4
%LFJ@2B"sn.+TOo33>/p`^+<'N3/;2PmkfV<Pat8b&&XYP3]IATE/b3DLQ'H=9tXdgQ7B.r@9Io66,9TEU"@BU:8<Kq<6;].ad"k[
%CCoIKIQNN#"bHb!*CQQu)j$K#N4%Jc3;d4!N4VY4BYX:`RDIke:QPDSX7<Dn:POHl&jY4a<Uh2":PLDn&,tP('neHm-o3,(^s8[Q
%EkOr22INJ`E_b7_G0FYGKY\tc>KqUY%E<C#?R?'c#%]"K<nPJ*Sm[)m:_AdWMh^&@'Le=$I"LOVe,d$%:_fOENjodp*<)bM[u?W/
%Fa2V2og?a3]iXjGG"JN(_K.fsMTfD=PO0J78OPt"X3fmeaAItA)FrKYcO5o6I[\<JEQmEgK&h^po!hO$JXs\q;V4s>G'ZO]\IH&>
%KT7bu00!td"=eCRc6gX83=9jM"_(Rr9g=`7^sX*G4Q<9E<+[V"b%+^A@@]:W9u:V_j,Q8_8u.tQOV;p^HJF7R;K^\^4Bt;n+l"DW
%K!=#ULjZCg":!L,Zg9r;!_YA'LQID6eDBQ$bIl<,@]2R2+g=rdL-eGiaDmHf^Wdl)4T9pT3F\(pOp$;*))Xs$BCTfEgE6[T%o_O4
%HR'mOg`mcC7iljk7![9%+[F(q@E9@lNPf>=bn1mtM&/Y+OXIb<Z7p$RfZqkb`.9pXUT>s#O?&I[>`t;m\]dpdm8qM#8'DS"-$"%_
%AWFi-(3^bTAb&&8`r7W,rdjPAUH+U;8%9^>i#j2<5H;P?%c+JPYQBSaWEIY%p=Oo_O<9C*lqB`q8:VBg=%!%_NND0=H*Zs2cE1M\
%Nj=TWE(?&T%1MX2W(;d_U]?:Y6,66D)2MEqaWWT*38cb[PVEVW0OEida*@aY_u3_n5R:^BV\smg(?@_5jB)h)`9IkMj.+Tj==97H
%B3\+h88T.Z/7OT$gM<-d\dTWUI63]XL:S8(YnQeWO2Xk=,bg^U@t6\"M)XBVr^MP%</NB>Bdh@HnSFMtC!G+T#)3&\#j*:B_dP_p
%IY!03FAE*:kfA"33C--MU:PD>>TlVnZFsk1UCK]3k^\VC#C9qG@fJZ:n((uOG$X@G)pj(j8%F2P?M=ibluW=]TO?F;2HkP\,R^`+
%1T:RIFi479q\s%J*@EU;;'[Z+;0kmZN3b0QYKOS;3<l,(BLLd=hL@1ggWLDq794Xc1pX1g4oouSX?<PP=E$KY/=bOk^\JGB)B#Hf
%lDE5`a+XnXb8jB+7A2Rk>Y(:Y6!26%f)V^R@l3KUm.>1KA*=jXe7Q?@=G&e,9RP3"EFFD_i_A]Y`QRu@75@e=8=pm>d:_?Fm*gUB
%_*sZWq5Ro21DWrM^-?dB_[FP54a%";U7`OjriC\]K>V@l^2>6R@chV&0<__d%Qrk]\Bm4LY[?7OEhFCBG%e&jE?nql14$s&/Idf9
%bZu@glSqjYn,$T0]ZH2UdM9P6[hY[kRO8#t+[-R3V@"Oe8Jm`*^$Q6b>;%rgB:C#No<Zk$@2F.oi)^AHXkUajhDngA)->mhkk9#L
%=EYokfsMGQamY;D&7[W$/DlW&?#SQE`hc%`#9.i#0U<Gj0tbT[fo)>aoD,>X2dEr1hLHPP7SX0^enDP@Vfo%c^:NI3Uc+'NpK2OF
%Yf0#K*fW-(iEYUkf:^1L)1_NnHU#OEn5HgJZ'?bkUtBpZqci/I:?+rknpPnNimNo.0Qj9J9LVAO%d?8MAm89h^6S&&JrfF&Z`mcQ
%7UN>SmgknH*!JfGW#U"s=XsrZA!$iDU\1@P(#rCH@*jjR2[l-OK&"<_-0'5(0+S>p>TJ-Y?I(nP;FZoYIBI>ndY/LjFTXb*L5i\q
%k$DmH/iN$-ebqsrB;Zd4fbiVYrcJD]]9S!Q_<mK&2;G_ADAc?'l[3\9Mmm=KINUk.^<PK*eKC3dFr6]3*<72[CsTmse*b94UeZ0;
%]U]V7LAS<VZ2GRp7HSM(2L_7"Q-mK/;WM\?Qe#.A,GusVW34?D*ZA)GZO3:!S@Z,u=7q5]=)1,TC-0!*3VM/%)mF)G*^EarltWgf
%;-F/%,:CY$8j+EQaRMJ8k-OlInDDWg[X_&r]8kY%+NBEJo]daF@F]jd02SD`Q6La`[/94E$X)<=Klr@gS,[Iqk/](>QabH1Em23m
%,=5rfaLH7q6,u:*rK&$;$K-n"^7jmWDKPMG`JN467WkT#,IXWCgXLOhcJ@1uENG&V.P:AiSKkP</tj0[pZ:URVdYBn*TrLT<h4LC
%,j!cXL#4,Xr-k0NO$s%n]9aLq&]a4\0t2KmWse2R9UST"R=j$)/r\rVldX*dCq%I#bfcS"Rhi*^mWh`g<\F*F(<TB^d7E[2"J/'b
%[Z%B5[WB7[arkoj!I`9k7U0*0:-!L,0mo,VSakOfjJI*iD;..;0_Tg=3RiPRWY1d.]906h#,B3+(ir@QPeDh(Qmr@K)ng1Qp75Vq
%cUKn6hPXcbRe3hl*KDKb^NJmX%JOijS<_Z6@7L,Rm.2&MI^_4]+Y8D$I*h43>h:MXq$;=J15"-bcA<>Bs%2,K)1,V>-.q7p1s/<M
%-/2k2ET+b[dFTEXn[S([3h%fUZ4;26AOIEU9u-Mn\/_(UoYsD4<A$d]U'9W+9^?p>,A]AUGd'p2QBP!Jg(,7FgG(ljs0Wjahr%[r
%DN0g-\->EAZ)ab42G/`BSUQ#>LiM?Z(jg?SBI<Ek?:SBb4@9A,O;`:=H!+GEb<?NO&6+!mh"q43Es>aYldkk7F/uckiD08e#mY3[
%hrWO4<)YkIYT@R04#6(N,0$(?6rEKpCaW)!;#aq!7m#g*?lrSC`HbNMjg1P,+N5'$?:qmIe^pSorM^IA\m`MeAM:&oGMK55[1<`3
%7!IEJ?/W\.<"10dSIoi!U=DBCkgi_!7V*1&^j!<S9ID-8ed6a$<etkbaIl>?"5dCsoesBeZrtcd:qZ!qGPf<=F/lj@eP&'EIH2*[
%4=T0(-1DYWeoq%;Occn'qV62QhX2Vd)83q5>tO^Z,NjsIc]MLPk8\0](sc0'E]tB%ir^acpSBghdN*dBp;k,XUJkBm!LA@')G-mZ
%l:\6">;tH5XEud]oA:92>CB0J\.&jn<tN3;j;je=AFaAi9L-nK:/.KimS#mPQbg"j_7VQ)7b6g0W\4Eoapo!=(RrtpV#ndf@2))N
%a-1?X[i_]2kK^O.qo%a;/LRgO_\H5+bsqB]-n-MZJr`,Pc<^\SQgr(FpZoTjT>o&]s3E?JpKqIckMNA(#9p0`G,rC`[d[J5'[3a7
%EOYMurksaajdZ6O<58?%N`Y>25a7:Dr$Ymgkl0^$qQ9&BKXjmK,oj^e>!DW]\sZM-i3jL>)+ANM7`4]';AFr)@;`+_G"=.T??'BX
%`TBi,LF_RfEa`aI^sp%_f]EshH!odM-Aur#o^scH"E`J!?GRBMTtV.l=,jhf0h<PrL3Tlm#dgqVPnRgh^WEksnKslhICC58fU<:Y
%%]15rF#p##DYJUA^M3E3lT##)G.Ypu2>lhOH9-uS8c59nJU;\Xh"'huKbUB*($GXP%1q=q6n)BaR$Z_!!M>*pft#A#dO8"C5'A16
%"E#PVW7uH5kYs)`"<VruBl#iM4G2L!ct9VC?A2X<]gGjR!;MM/RnBCE%8-r?DQXIgZr@iQD!M)&7u`0Zp0F0F74HlVMV+CaX*!QV
%&^p'hLcKoE_4\rCNq8n1_g_9@s4p&bq%n[!3n_Hn\"8:Q7FfLQ>?k6f)Kk3Pk7TAjf2,qNC%L&%?CKT^=9nK1[q=uB;r#8s97QF8
%"Pn6D-f8LXf*4+LUuop;j!*nh]V+>RcsqqsBmTS=XRo><JC$SI0j5D7psA-@1['tO8rKMSj$#@8$-_9;C?3MIdl*Oi#,G;I"Qc!9
%ZU<*45:dcsj(0`WX84>mNncq3l2"?]WB.<JYM.T-+%fQ9fN>Mh5+9FYTsOIC3[hA^R.:+oX)`ldc)sEMB^2o=%[P4Sa_1;P2U'*Z
%pQ5tT3d\j/92<lClreuLI+*Ik7ndV1f?;+DI.HA@JMN'_(lB31c.7[L;':#^/-&SL0U"Ea(s\MN@Oj5AoGmD3;Pe1]?X@S:JD6eP
%jL2nU0Wu;I7,:It%K'&&:S@-k7+jE.U[LrBU;2#;[P"(thDtb(=2PQ.]n<ao[5M\4JQ#o^R7mZ9F3Z3HW)6g8Mr;9Fg19k4N*!C.
%A0eqn%X"l,#K\@2)Zg1G1=oJ,rki$K6]J;Mk2YdVVTUtgc=(X@X%bC+MBB,*d('CCoJ+h\lN-ZkU4mXRe5A#]Pei\VlS*'X("Gfi
%GG@=^3E\),3\7G1FT!qa$.3fk[bD'8NFG9R_dM2rh17"a%0i<K.cD5E(UC&B[6gF'IC2QYA3L2g^03%DF!gYE[oSl)BO?9qKimei
%_bGHF/!@M\fqu(1N5:]:FYnW<?bdY,Bo5L]W`,muCHan?)7bFkeeH$skmgDdFMuBG8!)9q)fpRI<JLpn<`bpU:`Z)XAt:`Z+u"T$
%Tr@dJ(?*Mmq.QLfZj$';D6:_3e=YW%)u7$[[9kl7$MaZH%jF!0WEZj.;\TJ#bUQe!`&`:#Tp'J,U$B(gR4drDa1@jGN,S4+J?sSZ
%;3^b:I^"FU-[5=\X]90<onAn--46@gDP$ChIMD`tE42_@BIjA\k%f(tV+J3T?ZH`eEMI=L]s`Z)lZLL;(Q)p$XpIn2M*2nS1p@CJ
%mXpdlD.R)DeTbrd']lhpTc<e049tJ8i%Gb8EEG[c[Md,*X+Cl(7gmoe-W/)oZ5/`gN$LQUj$t?sm>Zr\NYG2]\!94'pUK4`[Fd!r
%-Rq@q6e9)P]cY00>`dtq-EpXOd7n\k7\@aMf<S)a'?Tqo\f@fEKAkgW5YXJA^E5M;7h^Ojm;R7$fSM/^XiN<meI!M71JIn,E%LL^
%l\/[?YH<2=$4H"d'-3)>T\(,1&SU1(mlfD4bl4'-ZpKYfJ<JRH*P=,CV7!rMDCb`2)#(ss[;sJrHTQ<%$k$J3TF?-%KP0;-W[&6<
%e8/'pB.a`@n%;@He!aq-;sLUW$Ab+HptGTR,WVb-'E&Qur=Z;7eX^0EH*lir^ZGMJ6Rl(jnp%j:\Ht[*9IVk<*aDNgW,<C3AtRm5
%\5]^Ho-RcjdFb=]6baZBPoi[.Gjo"Q>$:URSNjlo(=@mQc!6A4pd>3RoOJY#SM9p6PeTM&WN+&!^+/n+DYF;uh8&Sfeqc=G^4:P;
%Fb+[ZFl`5aQ74:+!Su3?0oiadB+cL&APp>?TH#^<<1e"JWZsGN8[o6(ke^PdfhNZQ-9YoS>s=@5fY*Z2-]K6:!WOBln7Sip?L'eF
%hRHgK4N8#1)+^NCSI1a=Lf77mKL^VEiW8lJZB?ecBj$^=<?E1!&T2W;_!Y8Lc1b`_rNVZ5MPfM>qt9OL(,]80F-MNX1Ibm)(!L6H
%r?j"kcG<57CgLG2:"nVUkncjg(e5?O.9jUYlGDh@026-N"Pfc?ggngn5IX+0c9?*VNqXAsC7@7WBdne&iNid&`I1/OfejU`q^0:D
%%"3dYMV876N`R%JTraptjl/'oeeu*Jj>Pe'a[tJ$8cCpl`#)c35F+%;D0pMDl)rI!`.t;_bhPMh=N6BU7b<kCnfb%QUbJ^7j00fX
%G/hHpRDfMMX%J_i*o3a.EAfS=p5>a\:Ap?.`bXKs3fbufDRYOZ<gsK0.>de/(j#b61fe>_CMnqTP)ZP#&J5ITV?g4f!1]q8_lD:r
%%l@p@O;=J+\jSU_;J&3p"beM0'H4(WrS"jaoXIZmq0i/g4iBN/4$eX/<ks;5ha:&5;qA\6N3UnfPuO\h0t(QK!HL6dj5BJrjBtT,
%**cf`BD42rE(L+YBL7VfO"FmtZLh_*2<_K[8hP)O0'_"mOCfUm<ad#QH-JWWT;I*eq=i\l!\(B1AV4PK(A61>#UjqcT5C]BUSD(<
%N?>WC6G@P_qimEpK,Cq<JohR3%dsYM*o6aZcKX>Bd(1sB9?HEUCo*O/ZK3S(C&OFM.%-NA`8^75_H`Sp1I%f=OC%k2@5TVL_*Pg_
%$hm1l^'>ea-$#TRDK/11mM^7hQWV,sge)`-<Y!)_;6-[27..?*Fg!71'e',m1)47Gqj:j5V::ar\\N1FGBP3BoBV?'`ug]2A<.$d
%6H8!_+F8,gPV%L"0W3DFc.j&7Z8U,V3/As%2>sS+2cp;rBTX=Yc%X$uM@$mh3<cH^*jOh0@1$;bdSub$`L6r/UE)hKfM`&)9d+Z(
%?B^&?.HQr"GBZ\$-nigp=0]HQ+GS\jFnL-gTktC\kWgD_9Pmh-Y#G)kg?\7aWO/XK8b_e=;'37RYB'kq4/[n[(paRIplf-FfrK"\
%h1Gkmcf6Z(-&-um$!\'H__m[rf#r?rEW.@/l\TK1>=0,8PA56cI@mX8-n^8$DGLB.AZ_!J^u0>W?`>L2KLok".=je.'^:i0Vl+GH
%?>_g\kfqEZH#O[r:PEL!kBbOOi?Pc<O_@\8R]$pOU?`Y3Fk?k3c&A20CKH=8D;5l(T:9rkOjqtE26?8%nW([dhXaN]j'ou':Nd9u
%>ta+l3*Zacr5K$)jP%%%ZBkW8S1WC>=<o5\Pq05r$-HHA@6huUcM++X:1'?R3QgoSZ?ME3l-QZ<r+^h&n\gF-8of&sj/X9(/GK]$
%#^q0Uq+7:l1>kt:R-38)SSts$/W<&\+&TLSR"f*2H1iP/_&*:Io0ENMIf)rOe(fO+B-7`ZBQBkIFNhY0;Hqo^EXf/*/sm\=JmieY
%1O"I7Sr]bBI\GjnJ$f>q=n/V3X,8]iW"X&$3N!Fa3]<N0R)O0X1@7IR*Qfd9&[hrS/tQ*XELSE:'2XH&Zlua4o#=':I`dG]-*4a#
%YfG(.X`-jI!jM$u1Nb`rl[F+7N+[NR0OkbBW;<F^*Srp>JPVf@(uJddI=af$cjWb,$44Z5[cSN-1LGBcDcg07UYXsWXL+0"O)G[F
%,-?P;I%Fr>j,_?2*V]=Ui?5X>Mi88t?GAP1J^.i*mAD@S=G@AMR]aP\!$fKBXLoTWXj:pfn9l(5Dt[U)A<fTPo55EF*22E]97j3k
%ANKScY;5_IO;\#9Fm*TB>t^YR)EceC4(%?IO/1ATfW-A,kg%Y7i;9h>TjRDoq6rDoAXZMQ!4t,UO'ktQk6(ZsA%50/f!.>:)]/eR
%-u+M;:"LPPi),ZMCJ6=IiHXW372$5UFa8]0>Q\#Z'uH20"\ddeY^Gp]aJ:jX0^RWoKNK%qfCdqTc%2M)W^'Li.DSH`7i/b%GOD9-
%h[e]C)?!?qR=^(16Z[*;Xqs>1n#6L>a=55:<@&KjMK"&HqBApmb@Dr3R+)17Th4J9hScF];<&RQ;aunN1GihbgD&1+0LLaa,1,6*
%-A8T'&fGP>]BdPEnA[L6e&ADmD&(h/3lE2mIBFqs4f0i2MEY@+#K3'1.0Q)?m@@_"N_YRC@ldu?!AL'Hp_beWc(9mQqm$-AQ>6^K
%Q/Rs:[4TA.=`Gf0/%Hj!gDL2BW]5=["LpF>m.YW0[/"fm/V&Hrn#Jaq-kG7`@k.G!CgFC'7C,[!<KraVh?2Bfm'D)lU9/>e^s`Dr
%fW$Z2>H0YFc#a7od.f;?*eIZL,)bNbShA:qgCun&Z`Do&X4M,J45>rW\4i<<MNc4fhuf@j5betXP6ekWAXNUdok<Wf=6!G$lP7`)
%o.,=jQ$K+]cunq&\>G?m8QTp:c=H9A(&+'O&BoX]kDStDaIXg)UEL/h&:+7spEJl1-^h^Jkhi164"0?31Qc8\DTYE*7eQQ;l'APD
%1W`.5/ci6oF"t!%LkB$%2tOdl>M3sI["?M0A&,#^"(isBf\3<Be(_Uk_9@fB*L">>BQo8fPQ>@+)MJAfmYXR.R+FsoD?'lA>/CWk
%^V7%mGKR1iDiO^lKT-h5CMK3,`opmUk&dC!3:oI-Uo_LcjA)N&_M5@m5Yto2;0X;9=^$4%Z\X8YWs3(nUjVqESZqn[=PnUqO5G`o
%iLfr,"OtMBrEC2IDs=C>eL+=RG^:mREhKH=gm)7I=AkTK]W?#9Atur0@=OYZ8//<m%GEQdZc5;D>#=uj@oA.lCBoaZAZR)\JIkhS
%6LI.7!@G3g@VVbU^J#oNK9*0(\UMF1<MM?tKTI%PLf+<ei@W_BrO?F41?"@aERtu[;mM:IE,5-k\0<B?'Q5d\L3GP!qjlsgH[.B&
%:E>`p?/2O$MC&B@5GKh1K=lmUG8At=Dll(1^j"0IU.6agR`[J*4puT4$G$Q7P>k:63:ifea=c&:N(g<((dLKf\&E_F38ol;*N#-T
%Sq%`VLR"gPR%&Uq0m,$V/ONduFN(S7+uH\5<Fo(BEPnY;JeEuHPU+'F.o[SeF'(k\_ok:iM..3[<:bq=@4AOd#P%%d$f^!LH=3CS
%%c^[<@j%fN"mBVg@YCSW>W^M'dg;S9i[*("3AY3fAqX/cT$Cn),`@(U[-VT'H3!Y\4Zru:M\L?eaN8@<HM??/)biKt>`H^:;PdU:
%O[I]@3N5_fFbq1R,H`L6>liTCP(g,4(47gl[,C'qqFr-C[FElr,$tBED)B"#LV1@eq3+8P3;:G!GrLCP6H``+^uC9tC:ZjPkuonn
%5F?/n%s736Q-XtK(<IYp*_foI$m>_iY/+JDR)Sq,KIY*\C(f4k#@lL+mMX"qm1a`A15>8)H2Xs)ruK?f/#_l/noeN[a>@L62:2h@
%Zfk8[p/[;Dr/8?#eL*ar`;GUX",KsiJpPijianY]JF^R)iRC_E^YatmOYlG6:I`lAYGh-Cm,S/0[]qrUAiT1HLZ[!Ch>lcgU-Q&S
%7'aD/P!69kiX0MR(Uk)fd/rg`$$2Ys'%]g=d*c2f.n]mEOA,-MTd1*s[^+,Q.>b:%f]V=_dhL]HC9P,s;J;qMcH2W?d,0csSEY-<
%bj/ER]bojjXTT4eJoX5i;4!^5+iCI-gZhgBGiN6#Ikuc&Z-'C]omg,VC>Ed.0hsgXX7;&f_$b@ebXXJ71hO,QMAt'<%?s%V<T_jg
%EKD`rRbpqKcK6d46V17m<>!F-_(eQ3/,E^K8bX&gs*=j">IJDSfY!t*Y"Fk)Q5GuI>T&aYS-V]n5aRB=FoLO1qLF;e.\Zl?=#u$&
%;(m^/A#j<iX/7ZfVpc54[#&4.aNH`,T)>kknpWhed*r@?Nn9'"ZMV;eo>.X8Vc-M0`1&UG*_f/Xq%>R.&(;.h!LE-`Vm:'oC-iP%
%!iTL]C:\<sFOtQX%5q;:%V&e_9m#!ti1dCEJS-X*.8e4n3ZB]?.9LZHfkk!.,i#:YV^YZp5,4aNJrBm^bN5Q,FL&irNte%N:8qV8
%X\,G6W_ZeJ-'DRH/N/GSNLX\[`!_D/_NVh6'MeOt!$;onodiI0%\(3B.otqM>)>RVHk*L!mg(V_Vu"i"!l>ZkT:j)4#D\H5fJHqP
%7WB\UCZ?-]KS2tR-:]]9=5VN=jRW@h8uU3MCEX!LNPd@rjqYPG:gUT?."-U-_bIM\?IQ4](6!)Y7EjA`8o,ei@lUgO791m6BFA84
%F>q6ji%>W\i:7dN+Dk:M*B&Ua6Q5:KiI;srXNoE]%Q4bpYR,\7fVf(+IsN)Nl$2@gB!=jZPZ#46D#!Og0jbBup8i&W4V"orFKaYJ
%*,K2a]YQfB[\t^i4Zn`_/Rqa0+%I7^ctarA)/X?^OW:q;>Pu_W;84,gBJtG%f8&>!Cn.*H#G-mS`uCK*AU=;#ra%O_aP;1fco=EF
%o5g:S$*H4DY%qaP-=d$rB[aJ^GWM1\<g*)!cY3&i'hZn<kQStF+(B?N2)M\=9UU5%g9iF_]X!rd+=SOO=:+-DeW5Uf,?Wpf0Ukp+
%1:;fDLt_I_Kn_aIdI,T0_q(j8&"mi-L,2-3DR:kBbLL?E=QQH<[bOH;[)Djn?Cm/@]@"W:'6W]sd7->C6Sn:V['O4tCEIm?m2EO9
%a3iI?p@\)t=*;FJYD4(,31JjdE"i)"kBn-79RGkV']ri6EC`TmCEA3l$T;/]j*9TF.S=t'D^gfD6T-"*)ldTj[([GtjFJ,SIh)XA
%PI`1s4<)lG"$Rt735-GQ*6&\Vk$c'a'rR8Z@DMCLr<TS/51L$G^E.?:3#VGd38j#%<,F"d"$WP`YhfdJq3^LMgZ*g:)VRYN4:X?`
%-CjXf"5^N;<Z_Pd&^BYJs)Girj+-t%C;>tIdWtjHi-h'`iRtHL+)h9ZmdYJ9+W):QVTnFW_p=k:Sp;>qW0gM5]:Xnb3R@9HJ0PDi
%Vnmin"-0pc_=TG>E(8H"5(X$0S+gt(^Q(60%adZ<38WqE6<iqf][`2_LZKCl!%H`Zjl:TD!%4,:a'6C7on8Cd%E&VHj(G-54ITUm
%]d=on[$9Y8IX,^8.-;CTr5RNEBn&^QfhrR6EAkYjEgWeU03SmlOL;FMY8,!038JI=glcSnBHpc/h*.BZ_T^-a<`,lS3P%PRN,8c3
%=J\s@-[<ntlpV4MKTJ?gYnp]dI8tHn`kk\9cT9KW^n`+QmtQkgohhu8UT(9D[+ISO#p';+os6r4%:57_L9IA0cn1mJopCS6?,(bs
%V;K+_CFG!N-"7e0K:NETNQn;!7jpg2eB[Rjb;OBBgo6SO_^nh@!mbj#84^p9RA;/Eh7D(=J2rB;#poN;Gp2cuq]u7p%.?WY<:^r!
%LmK%m9:7XR>]V_^'EqEA6i]$@q`g"5WR,3imLk"*JAWWrcNZ6n=0c\W?eSD$eEhW<CZE@NrVVqk3o!PmqZme$DUelAf=^,(;"OWH
%_/$@A)'9G=EQ#";PnmSMVQLFGh9PcBZT1.d:M8c%;]FKU_q\9R%MN!jcXA[K7TMfl(PT#'\VX@?[R_""'6f,3AG]#/S$^Bn.N$35
%P$m9idKpYHCII%g+FON^Vu1@-4kqU=>g(@s*7R[n<drd$%ZfbCIEj6&C-#1"*6@_aWNa.)fLOri>4j/\9pS3653sjM("I@9F-Y/R
%_,BJFCf?_EeBF(OGAKDdD'^G?q+>lSo5%2KS!:1X6nu)f*!(Vb,!S"af>nA)X.d.WYb/IfLuud,I?(+FF]cq$e0/RQ*56%7jc^iN
%3shgU);`<J2'WS(C)-ds72kOC%%*@10[$?ei3ecO2>[b4ff'Snl9,b\'I6@3ZGM7hln'Peb).jA.In18SXMK^.8CtI`2]\TJq@W'
%EX`9-.1A4gSes3jHQaDhXsMAK24\8Yr5ajGWLFGgdb?Xb@!%sY.?@D<m%g$GS-(7pNNRWA)8^,Xj_)JWdU;mb?_T3lH/;%I"UQP>
%*j$,ILdeAsd7dcc:-ef3mA3M*klH>Cm8@&0V97c#f_UIf)#$0Uc'(DHmD[mI,#7Q1)(Tl:;/m:jR?:p@/7buK,.`kK>dTmbhi8Fk
%XS**3p;88Q#c$21Ct?fIelhh09gda1k+S.Chr&(p1bi[,63+!hLCl'iS3ItC)dW=/<%In(^(&UTMoSu):1`=J6HRe>O4DbmK'IAT
%EF-(hKoiIupl/cZgk7-!GR>"p[`+L5`JsGSTo;<!9QYdbC96.k)etD=,%=%(<2G@Ig^EV![[W.FEYLm+^E,;\=7B_L\B@"!Yeg\+
%h5@Vt>DI2g*T#oU3g?Z7m#-.iFJC/eSaY]%N(7"Xm;U%JH(K!1)G!Q_i(Li18[sYS9AS3.@S/n[1B5Gk:c@\cL"4[*GQq*K<gc9k
%n:+):"&]Br.YD"J<llRR-$W'HjLYJB-t7=6"R[KTZIjI1fbOA4ge`p>R\R)Xi<s[?5Zc,[EFaEn309u]l(8V7"DnKX@jHpGn;?Zk
%Nh"BOgF0MDDDdumj"MT4k`0-!JJMB!REFInKg0'<$4ZIF_`;-LRYNYe;>(b\h:/Q1nh+QV=@86P,ZoKW;1*,6aBq'#hOA4\&Pl?>
%hUA_Frh+?r8JEO.eo;$bcC7DSPPJtXe%d?/43+Ah2Mm&6C(f\<nSZ[+%;$[*._[[IpP8p)2I;Yk;8S3cWX)=?(/(5?\Ku!EV001\
%nmN?6EU(qcH2jd(UBfI1lncc;6o.r6j\ua`6d_X%P-fN"F)9WI`-N"XedSI/o:?2XMKTIQCY?:pU_@5^8SMACVGuh:EA5De^RjTU
%AKDIblHb2*#dngBqo<FCR+n1#SclAOnHQ*sP4/$lL\p`@(f6ANLa2qn$n-slR-9%LFT=R^0>pQ7*(bO>lqj-[1=#=Lp@(WN(>BR*
%SV8CiT;G)d9T*8jS'Vrh`dH:#-5\`1?E/o!I9O!V;hJr@4qaX,NMoJ%D&,Lm.(8MF.+^]<%d8T:]6AOQ6\u2r'`.p4C8f?>H1Pr8
%^4=8<dA?iaA($7$bI+h1k,r^Jh9cL4pHZ,UReIu/"_/SBFk1[gZ1D=?d$_uEUW1:rOX+qjZ#Jkdn/C$lkCs:T3B%"o05FD[dL+KP
%^iX8oMlh@t^6sUuHNi[;#a.OU+_t3!71@.]W)3P"On`?d074:78T@cP*/pt5M\VVmd&U5Z1U@.08A_eFEFWI5*FU!n1dlHD`,dk7
%q`PheD`U1k1!Y5+:e7k+fI?rKn%]g^7@!ps\EhD2Mc?m7^V'20K1VL*=Pe+4JCWZD.c]-b<M8L`=7,>+>0(AZ1s6+:j_#/c,M!fH
%&+r9B,_FM557;LLRFCK*D\cQaqrW1RmK9HBs$n9@BgJa^nFc"erCkUT^/:j[lA,SK4N[tfaIgORgAZ\KfI`mg)%I<=.t#KKXh$X,
%E95X+4^Xe.MJrBk+h9N@R%05fJqEafP%G[FpiX^8K9W]P?]r&e'jo0EgG+dm3?JS>8sg4g7&oT8ZR6-R\KjF9)(P@%AbduC()6gj
%H-4;B\[0cir;#Tnad-?3cJ\aLpaGLP)!$otr%!6/9[_.64J4LW"a`8-@c(cdkMEm4RNQ#`QZ!klntC,Nl*XFsL31cN+h/uXm@+bo
%^!.I'ZbpeOJe$5863"B#ea0[+:_Iof(RnpAGnG:"QO*P1]^?c_[bU9u*mc2h1,N1'NgG;K?n1)_)`;lsX*oH/)thkG$?\^>j(9:Z
%c&;a-R\Jt7.c78m;=Z`?diRK"OMm,WG1(;/jZnNm)LfcWhP6+b6SRCb`K^&GD\7t@]fC8q#QqZ#7NrY-\"QJmK7De@G+3,XgS%_X
%s'3ooAX++DI@*mDoOOP@Mf8Kt-^fJA[#m[uIg>,/;M9:;n5"G\DF$#h*^rRI3n:b^>O+F=`aus#c%G6f1pW`<"jAJD89.SD]RSac
%*-T+"\CC&`V)TX+misgob#U6u%`Aki8+%UV7M=i1`Kd5>NRkAb(t?-(T"Y!@DnA/1$ee+?/!9H'@e2]Z+?S\FkifO8e^V2^oT^C0
%$QX1sFX?8fed9G[iS"n\KCT+KC5_b(T]n)\G_J+bE8:;XWcTlH;3&7V?]Q>CePIJ$:5^_0T!PnT51n.).Min?5!NCP;LAH/htZD$
%Fj`8ZQ7YpCZbODhG_]H(ro"a7Hn\R!?Z3^5efH!P6/]?Cr+!.1'*t+LaeWdr:0Waj=,MM_\9IQ\X8714qjJn2';f")0Hik#l=h/W
%ZWpt/qrf\aaG]q2)Dn?HOolCB5p_2UN6!s7.\Pf]nc-"Ub/mA[*,9>$7"]<Dk]PcYR(YWjPqE_4pdr>lVukcRbmoG-[ZqUq_,eYN
%_ng9eC],6_]sS>uN4V'_ch9.HHUGC8g3&^)Wb/8>,3DAk8p??VIS*$SK(-ctd)2BlY<8YP+;:.KrVG>pI+.KC%j:TU>2N\UFY'Q5
%\RJ6iDu.qs0`t.a()+-<^=GJ;<^`@5*]OUTBVPh<S_,hA!D[^KC"^'JE9[V::._REm0[6rVo*-Q+1+dq%"oUjjb9ts-BV>2FZEqb
%Fsm0<%A_'2an^##7gO`@$'J9?E4ltcTQ'YKT;Z3^O_mQMU]ecoY&f`7I)2QhGm+tP:p/\p:)dFj>=FhSRKF`lDgq=%l8&BR0a(--
%cm[P0&^@UUj!^-K:oAriNG):[eifWiD)?rT.l$J4VOrd,[_D]=IA6DBXg\+\>*,7acA!?(gqAiM^OK!j(u%ZdQV9Rd6m5oQHSf4O
%B8dpKIG^BmCWFam`T8nM"knGtI%D]01IHl,h5V.r)0=;B9W>M\X,CpmiVARJVFV2Y-PGesR<H+kLS`@r=@_"BEBA#pD$5tS+?Ap&
%fZr<BM#-i@Gqr?#,0Od/7DMqk"R+A?)H!<&k/ddoXr?OKNUH5721j0L/(dHnZC>qOpKLiQfD,/Y<m''=.`"+sfe8i_]7:FY3kIun
%g6<*L<_]IQj(kY(A:$-dn("jeo?JbDi=p!\)O'fcdN(&_P.)P4H#kkVS$jhq2h>EHNsN1J,/F@7!t%3Xo1T=#CpKj??/T,=Uu_nL
%;$m/HOmL>+@9]P[j]W,.,GKkEWdaN6o!&\7!h#T..bE<dPJPh?_SF_I2UU5<fF.mKdaHQYYF"V"::^CJaCK@$j)GN`om9p?I(^9)
%I5ZU]le>')>^/Hh3qeUL:`!-VQj?t)4o+IQ+^12Xcc<J5-TbcC&?-P,_M>G=4U)r=f!Pah):&n=hs`YKLVg]UB3Q?6PUe&p@FRP*
%N<g`t9ug:djIER+BT*:(3+!,h%?%qS$PVoB`GGsR7RYmGS0M[X\O"aUn>87O/=)SJ@E"NdUCGsni0q.33B?S6MfGSkqS9]R5tXt?
%>P7?qr:I=Kr86_"Y4,k1=$T1LPL\=ZB^V*6>Y'<R"se04qWe819BH3j.*L`3TQa;&/*UmJc&TBBj[2eA/$\QW$1pW+>QOKYDD.)e
%LU861&%P`/6Bi9XWpVDXAeT#QT6Y)0LLcDh;GgMEH)^@gj%gu2M@C%PLOcD]qma6BomWs9nsnU0-C$h[JA'J05E$`?(&9@aN,#"R
%R'VN(#b4"t1_RNk6/Mf"di5WL%UA%n%cEMEf4p@(G@OgrZiJ=Jkd9-biDPL#d8$W4W]gOI##huT3!5HZ=au-0Wm1A%^gHAB7`gZ*
%;!KrV),q/,I^.u^e4JS?ACBE^2-5><_GnCa+:\pT:o`[M;;WV."a:N7hEe@F0S%jfkKC1t%A3ul02(a\%M1sa0/b'?p0s!VFX@qR
%nn9@cPM)#F;1Sho/o=GY/N$#?e4K_O3*ha:7B%XWN\3'`!hJZ/q;P)Z^L7pbZ.UJX/)>U(FWZ1o$fVVaI?2]_2ARpq@_t4p<)WWC
%82e+oW3*WmL"HpR-_P0e\N^QX;0A50iY!?BQl@`_`t9l8Ck$^gW1SN!(m@p?/na\FMO`(H\P$Ka,TRrM&knOO'?I?s[_8M1$K*:$
%RQ*C7_/*l6%tW'pmk=-GXWCMR1si6jl?C8PlF*Q9)EXkeTquEK,U_P),Y@"Tkd^eOga-9#GmqO:4f?fD9@4'mV]3UZYt[Y^5.DMu
%WPRJW`Sci!=K`H%?J^V_q^`BM:WE$SWF$,b&Y&BJ'6#9Cb9+u]Ej?e^dE5Ni#s$Dck'1Leb>]I-LJPW)-,_u*/I!YCiU66H#`e6S
%CZR%Z"d=>l6'EU\AK,eoKi0Bjd$[AB*Tq9rdn&V40<7ZbDC_tIHpWqr.sX/.'+$VV*D!9O::A%r-ZOWTFNP(Q/><4dZHP6PLsM@?
%bHk(=(VB3&<>=8\.1(j7l)$kKptcQiA@gnEQ>E+'qN_o/(oR&6+Im8u;7-PLb%o`F8TtjpqfH=>l=N;8#:"Gf,XJ(=<uEK]X1,7M
%\UH+]R>0mLedB<\%P!dqYQY6o,=aV/K6oQA":IAq/&#SF:Uf\d50Bjrh9MG#<CCE(cDOj[+Og-'kC9!bNC8Z7+CmD&OHh$o@bcPH
%ZXT1J73o^OZYo':*ed'4GsM&H>Ef\!J@=[d!X>ijT<!5l,?&u,&8uB\">$2m=/"3o)HZDaT7,\uIZpk#_hX)A(r9.1"RRu*Ph0&-
%ESP/>8`ZX-i7k%eYdGCS)1@I8^mM$BTgT.e'4=fbQC[SOX;?gL?QSNm9iHUJWDU/!T?::XmEHqKmoYYFc/#;)T_Fo\'eO6Ko:F:b
%rSp%/k1H=V2uG'*Y#XpeO(RqaHjH!uC,i<45bOi-A@4p36tUKWj7`>IbUS5Tmn5jscJA0b#BR:tp>[Gf`hAdlp$TktPPb#=mlu5J
%cZ@2Un,E4T[f??!25"ZAmbGSWgE1q?r:8H(r:I$srJ/^kJ,4*`puAQ,ocJ\]l+d5rmip/HT)Qk3n^ER!l$#Aip36P[DuT(c+6,#X
%MuBjZn./n+ji>^InEKuK+$]_arE&&8Y/c$8ec53hYCH<@nTV%5f(h+Oq=2M_r9hV_rnmb21]E0er;,piTE!`hXFBgpJ+K/eIJ&AF
%o:)A$pX9YFs3H2kiRbjCiAYD"-7mXB[QjebIs83,rnm0oqX6ZJVn`8j^[[CMr:Yn!rtte7psY!,n5hjMO$ER)f:RQjmJm1'QQL_>
%Z9PPePeJ#@NA<;57B9=d+nA*;V?_++,`Ah+.s2E"68cQ2m<@HEGm[AO+2rniC4,4i"E8'.7Y1O/9ts@"e,Us)>W#'t;t1$t)9<lh
%8Z[<dC^mo8ARr8g4oQ:]5M9Wu#B1eJQCjfi4ZMCG@-c9O-"gIKg:R((4'XM/3N8rI3'EF!=V6m)\8O>_A4;A[(cVsnJEC*lGnh1:
%FoW$)S&*0G+;We9$?XkYO#MaD:VXiGS(73KH\UeHJ,GR8ZBp-F'$U^+nJ+JRmXI*Ds43,m:(OV3a/f-.rS]NH@!?t(d/Wg[:VZdX
%[=,0sJ,&DLIf/Tjrp]6GrokMSorJ",j*LXhYI:Sum&K_`F_Y$.ju8?*h&ggroLJk&3EsY`r8tconG/thJ$kh0r9eM'iLbSjlg$e7
%oDd"rP5jItq0r=nGrB%Df.niKkFV4gDRa(1*[E1ahd8V(j<+BdESLJ&h_tFi^H:=TI@B5'Sj1quKCk5<`uk9a+2>adp8ddKp#4PM
%ps\C2h]I'#r'q`XpEdQ0+o'E66(^me;eB0$kLufbNKYtJM393"+D\0^0M3,Zf-2$2ZgZT[-d>?>gG>&Og?cf":*Y0g#:sI8bpI.<
%k8m(l8]=0q#*r#="a(Vopa/bG`Nr.9dss<PhJAJ9.T*>E1?f(IkCB*`6lehJ>@b>pgPHPtJ<K((g$k5"(rohd*.qP+5VqODpSRim
%1iFH/4PL&IGh>L,>m!E"et9ot)G)*9Y5uGeJo.bjE?-gbk0j\W4gR7rid`"W[GG,`;,#M2QmF1OV_9ca?:+-u)?^XaMPkc:bKS+0
%j6&m5aA`Ri5r,_bMa:1gBZ35>1<2X29!h,$-p#n(-DC407?FEmX&/0eO97.bVQZ;4McQ8cnRoi=:UF'HlLp,dDZ?k7Mn(WW1`O?4
%05omVW@>B]lYBR3\urq*Of<Hd0WQlRgq9\!FYPUAeI!d[WgIp@_#6e57G?PK;/>P^n`.aYJ9,Q/.V,\"<sRX8g=MC_iYu/7[b'nO
%$hJJm]%*Eqh1j.>!K05`NYD`k^209m!;S?D8Qk:"Z*:OH-9rK3%I2Q7Nd0eQPk[-7_9R5/n?tc60jcI*qU7#&>5r<Cpreg2ZMf"6
%da!%]HrGu]KmN._/H'-ce"E.hKbmO0<=@MhK=!^sQV\W.7=*`IBBuXmjO#7j8kL-Hd5hBY%;NuNV.nP';<c_R6D]seg0Ebud";Dm
%7oF/S2`4DJdC;$h#/$l=A4>0WU?1!+=G!":RnK7Kg/Z'mB?1J1G&+\8$9#J\Pr=-qYEFfN^gp(-T0i@%9m:F&c*M(N%.[o#/31#:
%2R6XWNQ9@r_>$<[OqPKUYrj\>(cA\nGkbN2gtN)^3&c'O?I\%n?N]3(hf.jI21'sY,dp2cQf&bAkD:[DZ2#`mH[3%Os"f1pb<<T5
%c#;%an4-gMS%.XUFdTc_OK/A,$H+iMjo#0U;4a(*HiB-tf^pOqS[h4J"3kO-$JOM&E#rLl#Un0Qgko5]KOb(lSLqG2V?@$]!ek=8
%m!7qjqSpBh'j&j6Z\um1Z,CIGHki,r>bJ(hXMgljOBr6j>&N,0gNj"i]*BuLPBT#A%^(-P+Vg\=iClkkRLLs,beA<&9>lE\`8oKi
%J\oT&mbmqSLJ,8f:>[6\mF:=G$'ilc't81iKb+[0_0&5#X)QdOe,E"JXqp=h-,2Y2n<[eG]o$srqp7dDkW`>3*nJA0WY>TjU6;hZ
%Lnh`R'UqfY4(SR.0t#]M>[urj=6&G0Wa7m;"^fX0.'#+%r)ef$9Z:Nb<R;Jh=Z-Ou>?uSMQ5FAH'6\\PKs=?mqR@7A;b&AI>KLBp
%YD)iLA?hWgeno:]=U!Hd@5g<1$F<B%0Nm%TijlV.*<dkAl!Ra_;EF<EbCem2P/OXNFK3s3XA4q-EZ%5V,^jKeZ(SIDrT_YR@IPc:
%jPjQL&W<\U9MZAJLZ7p6rT*\;3.92<qWR[f:(LnL`+6p/j\T8YSH(Gfna#3&3dd1*gb6P=#u"f\]*bDH3/mIuArNCh`!n-5\dBak
%^KNtHJ32GRd8o+1+?iS([2+u[3r'Fde@I\hbo1a8b7)2'm[^g%=Il:9%=2C<E'l:7,h^3;E]]cO3N>0@2L-'>8tZs#keofuf%l;=
%^g[>A;5k^!"bO"MQHUWI1V"&k)\^I`Adn;&,LT;P6ri+*c=Eo<`(m#DZ,AV]Wltg(OqI'TkWuW=mACeg-*Tf/l'V&mJ;ou'M\7qK
%KS!'%+s3?e1$N5X=%QGd"D7fuH1.?aC_s*O?$e0h_J(A7?J'rd>&?aUjI+7s+a`%--L58JE%h*gVqnQ*6N-Q+q"1F3EBPJH/,2/0
%K\GR-<5ZBfSPUk>KF^7],iO?dG\5:DnBP#+dNL9XPIK!LCql3B:0*^hfOLgc)a7et9N7N6H\SYV&?ADTUBdpn@,>YUDA"eB[R!tE
%s&90XJ`M,&\'AiqDr<r)h`Pnb2bhHlVThTi!D7C&T^2:)G<p8l5J$oN)^%]kS,r-W8U`qcCY*1<]8Ph:K-$Zh1%B/H*O;+(neIm8
%C/i#_9B8ns2?m<>BZe2C>%!&aj^.(AeB*4=BiSHh2P2o(Zg>Oe.q-H$"[d7nMsMYl(f=d5@Co4PW*F;2nihp!_fHafE#TC&J]\!D
%Z$6Wa@%4OT@$>c*J%hp?NjjDIH-D-Clo(C'gq;!u/8Fbj5Qq;h>YEh'!X5Z6R)U#uFdWk#dHY214.W"IhIG?al#P<i!qjpMpND!<
%-U<1E5"eAJHSJt],mL=N;-^][%]%@+"*F,_r^2`1/7kTK0?"5O>jgJIJZTcg8P:iCcZAko?r*D4#hjAFFAqjELhrBdd[=BWjTsU8
%F)[UfJmZ"H/mqE/AI^qLe\Tak<55O;&\42qOlD0:FostgPLCN)L9$rsGj^RS'L39N"?+"X`,]=m8VsA?P7QZ16PZP0@Lie8R66=f
%$"\3NYO74li^NMq",ScC1L#F<CsunD$lN?N7'L>rUDjS1\hX&PTM#a8OuSF%a6^e)EFTbG'@?*ZjK]e`K,SSS/E:&g."F;PRS`.a
%FY82+OfDAL4mEt?ZS-)hlU)t:W,gHW_%2oG\pK]/Ce5ks+3=jt7&0":5XXVL1L.Nn$f*\!jBGk7Bl(FRk7SAM>[cO(M[Bm/pRs*)
%4Y%Vc<=<>&]@[+!A>90qC1<ZNEJVkWoj=Vi$B_^Nqm>aeAc/0r6VL:NZOt3F@`K"V+mM/_GmA_jeONGq1#JqZMQ[FgQ!eC[2mQE?
%Zq&.iLBW@D@bL'/83RAt6b37/91&u1Y0tW2kirJ)$"k1^*i[kYNCd`U_@N@c/dDGD?%kGOaakM?HcD!"<;3m\$tBhaXc-_"ic$J^
%pLrYb\J9r_h&m'tA-5Csdc0*0^>UV*4(VdFiT,sZ2lP:nn8K3_`T6J);$8W,4FU?_3ZBI@'MI:+(Shqo;-U5TT]Ad,'*`\ic_k9V
%AGJs\.A@msL^paf]rq7>9o%N/OR^9u-mV.2;Pbt'S>4#]*=...5=nb_Yl>g33[--d&ie[LbBp+jVpE(P2DaYt_4t:NU`\cJbfHA[
%W5(ZG$Y`11$`W/):e\CG!cot-bCD#.1h,_WUk7`+QDq#G_W&=#M#]iYX<M63`dB;dC,'4lQ'J:a6r@$-iK/4O>XjU-7oWX<;H+M@
%V7hJ(!mK+e%Q0YO?DD97o0=W[g2L2<o4S8kQL.hbI'gF[#?p$UiY6:AYmeIbX=V4&Xc9XmV#Bl;4QP$4C9+G58iiVM\Adi0:hO?^
%o`ec;bXVW(<Fl^J#=L56NUt.ebK)Y,REf0UWkLoj5>+da*l=TTi^Tu'5g!Vd@SrmX_gf<0e!Jd1Y&?!]9i\9"CYLMRm,F0_K,;L2
%9i%#D+u^`<F?5L,k"Whl*k87fb4Fp*<)c%T=(6.^TtH`r0nt4_W1^?PFG;LZ/&OG*1?qa6-si+A?/%PV&KO)K+;"E0<]^pH:2M*T
%l9[uQ=kn-)(sm].!8SF<oG4'mgV5%Z^4cOD&8dfmY=MUs!AoZY3IVIfaLOmKEGu[jge_0A*0)o#%;c*.]d;AV'AP^+!(eoH4g:G9
%Bj\FD4NG_o6TDK1a5S7rIU-t:3c&+*2PCa%Q=Hmc8nJBdO"B81RUYqB1Z]+T*QOAtQC(YLSE*YKG@cCJpOSsu@L$0I*'8f2-r,1G
%=<i9SHY[R_.9,$FLCQMm`PumJm8(uklDU9?K%Ho"N/R`^)DCRp>[RI+5)u'n\@u`d\u6LP$PUX`=eAAfhjk@2rjAC:TdiF7Bt8Kt
%n_TL1QY<1gZ_dAAKsKI`%eWe.pBJ*g])T("Y3</KF3nBc_jh+Jd+@]DY&'6<Y1-`;2k%5hI1#0'T5O^UIe9USPKXud4BG+S\;ODq
%\YS3\X(U(kRLD%'V2)aZd_^UMI!Kh/WcdjCi1eg*N?el2(Dg8$Hnn7tke3t%1btO&V=g+DnV=pE3_"j[[l!tDM=TY5o-pc8f-Op]
%&23:Dd`TI7Ncm4*;JdPSjN4:Wf0tL1dY]2KOQLpTd:gM=G-=>,%:D)41'>Is!U.1XBW,Juoa6=4l*I(@+.otlZXdh<bJh/d]puPG
%+WZJUfaI"DMSLlDm[hU+<=uJ$;d&38(E8fW=K.Z^[k]+&\r"M-R"^#@^%Wq^:`V([k*ndkg<69nbd^(gOVWD41TE[7Wo.*Vb9>]V
%$r\q_hcuCPSK/oV7umhML:QnY3n-2q?n1'E/D#\XYCf::V3I7.,R`/\N*Oa+]3O)#5:sW&qtMS8jr/4aZLGd(Gbk#^pFg5rGN)nW
%[E1&.2\t_8A#@WYam7doSXl,V.>O'$Zu1.)D.=9h'WKdK=d6\Bd"8\]]1@WgNCF6&e\`XC;JhBJ-i')K[;Q>gq,4$X8pBJ!-/6kA
%QC1iu\5XTn-\[<dP@N'7Ur<c$[Ef$t"t_ljr`c7T*A]rf["`3@A1=W8+b^&_oO7Mp8Vc)54<m`3,j_FMgq.k^Ok&h5i8'P(d>VA"
%-[rlnTD]SXFVI):HPD1;*>GmUO?Mt53>II+r.O=a4>>@;loZQ3@WFU.Le4=;-O4].r,^rZ/n8sfhF3FBW_c6$HoUZb9gGV*N2YJC
%k=c>cRQfgpTOO>)Ip#o'^-=TeiBp_)1paRa"9n<g_YOi^oc.(ZdM=tq+@sCN[o5m>f!'@5.&oc\<NFD%-Vns@B;2t>P'"eoUJdHP
%M@ct+FqJ8D\.\sHami"8\&TGI3/eV`W\+TXZ$K8A89_<WDh#>JSIV'E@,Wn3r>Vn.%k<7llnn&rFa-OHi>FMBR,f;!G/69D%+25q
%HFpVK.A>oqPI(7l'g/pJ<UCYRe\m:u\+p*Yg.6p'Da&oiMpG(q'!B?*3TgMm/IouES-^05dg'<5kFBd=G$d0=pT11RokPudYB+$5
%ec-I6@8W\pnhH4:CtTd^?$]ll)or2T_F-?d/c8j7%'DE;"+?`D6X4>ORnZZX)N5iIF#spE!-dnSS6HSfZI'%-Jh*0^f%sC#9#+Xr
%biD].:mr_+URm?9#1\:`UnFrd?BQo*0e%Hp$NVZ]>R$]<J!!4Saf8tRKiVSiSCkEu1;nlBbSe^":)$5/S4')ZNaVco$bZpf5QV]5
%=#c^Eb[7Na_qD^j1KMJ#ju(CT:>PDj-lD000e&PnF9Cbn%<4fp#H8e3E=(Nj!Z;kW*)3g+MRs,#pk%.`qWA^mc3:J"9:OU?J08GM
%/@d(Kf=^mIPn0,,S,Q=EQBUI.CglHhLjaDF.\""DViPh`f[.`Tf&:'X5"&EI:/t65`'BI(1*pM$)6b\i[751&.aQu8!3QiNMM+8Q
%hDISYWmGNNiJ!pXP);;c]%n#S@#-8Y)D'oFod4iHKmuM+Z/+T)&s9m&<.qio-j#_>9E:<8(p`;Idf\W9<;\*oqI\riest#N6d7A]
%%Z*47/:WO_;GmH,Es!UXMZskal;MEr/I(O^!7<afr"m]*K$"kg<,I?E,u%ap2%^-NM:u.].47tInuic`F_@>PGQ9[?"LT!+40qQY
%B[cEX'Z_U^<:NLONB6Ug;6md5_?NVedPG`<+-h`Q1/AP$$sOr/Za2Pa%F.g$'(N)?CIpGn)\AS3o/9++jm1%NJ/OgnnjN+(k.,h&
%]^\St8XED`T//689:8RTbT#qW@`tD"'eM;L`4Sth<aUYH<o@6B`NO%MhoJU@jXsU41aNT(\KM,=4UIZJEK:_Eg)3JlI$O6[Yb8_p
%L1D$R[Mg*;\r5WQeb#[t<_.O=F36?uLmXZP(L=:P[108/=Hu"i#kN1NkYGQ&Ul(F7H2'BEGVY"5abi&WR\TL"gTo%@1TuL/,,P#.
%oj#>hR8j3LA/gN!9t@tN&\a!p,jbjTfH/'8j$qT\aohhI--Ts<6GtEdc%DT]:9T,ZDW+st^M8.;[I\+fL$0X`9!-KD+)J9``(`Em
%E1!b4l*q+ok."JY'@>uEqmk5=\k3Pe$On6].H[_qBOHu;V5uTBd]b%^?*+YtnY5O))!A!^`0jW"&=4Uid3:sRQbm3/)`/:uRUhS-
%JQ=2RULR,"Bj3'L1!f4$qm8=UKeO*$D`]*gU^i$@T7g)Ld8)5+Wa6>()b$Jf-gZ:QWa:7>qZ'K.0I,N;Q5jf2,d,*MFnF4p:;*;,
%Qi^sIZm<`sq?WrH/%Pt,PF^^rir9=i$Gs_.;tA%%2p..-(j)XAGtjA_h'@LdM-CdJOZOZdMlB4gH-6H_O3uj(%1dh50ejIq]:>c5
%2(Z2@/@W&fC%6i=>D-i(F2i4=*G&;-+$r]MMd9Qtfg;"KF7YpuOjmJ^DVhf`nb74,68'BXAQu(c)7=fN#h/F/!;ZO5]kMc=2</K\
%?7h.TX)XUsAU=a-]T:"cBYqM\))feI;Ber9J+Sq/aRo>H%A[IDa!QR9;f%:;en'0$kuM=@eS$dL1mf*+.61#_%mb:-7m5IF]q,]`
%<6<kc4H#;<R:j[NCs^0'1nDmQK)Fj?U_Y5CXWGHlNCO/&oU:TYYU`nBN=+`PL]qY_&(XH-i"jWAODKnrE-M6E!'H'SG"%T#hTV8e
%ed8uH*X^i5AnjQSnp7%-ai7ZQLD4H\=,HVm\#5sZ8'JZBAC-Ccb9f>W&Fd5*Un:^MBPUK0$aguV<5tJNSWuQf:A$_ZgHd7m:iJM0
%L(JDIlUW@6&u>up.Po7O%Ce%X&D9U-.q1D4^O?ZkH+R_%fR3`SQ"Pp.O^,CSdL@t?VOKKC)o7MZRW2@rN0*a=;]=eW)7C$F%bh>M
%*cN%B$t*<<BI5A7ImNNV6#a*G%TnE3\/+k&G*>9&a-#S;D`dK`QQeO(W5\lYib5*j<T<Jp/)7STFCS\'`_]O5-f5<;A!fA_nj51E
%ELs!H)Gg,?mOI(F8k&\k=Vc-Y,RZ@bM)eio/QaaHT%N7Pn7UKPIl_R#m2:WXY!^?$$Q5)fIO-&#qY>5MQAW]GobJ(s1mUcR)m5^o
%VVG*/8#rnt,)+Mi/-7n?!-uaUV+anf@ceQBgf+K4ds'[I]ild2J^P$]2-CVfECJUCW+.7.<G?FX0-n**2GXWN"K(@C2^Cq_n(E)&
%!p?T7`[$R^AEl*DpmjUnlaZNo"2U(g>Vs2*qot4(Ln?\5pD-IuYQUonYWH,;ctY`%\A7&)8_NZ,/'.i+*0\7!,.jf!/0.H1?SnfM
%d5@Q-W""U\=)N>,Ch.:KPHb4CP/lO?.nfjoM%-LjJKg3YIEePSIZeNqQ3]X,%W&CAefeRWe?]V^iK0b;oecC<oMl8`-2<pnfBZsj
%X$\Ag'?NFk'Q9amn^q"o"ZU5.Mth8Z8FrsFUVQ,U!ig+Sfe&=t.Dl>i<0/I#d_$&0&eQA1b,^"W)*X_JqD#<s#X#Tg?J"pX![jD)
%cnVGk;i;--44mrR"i_7J<IQHp(hlqO;Jf:MKjEo2e@\RQL3h!(+0'0u"=h_E^)uI:5&c%;&ZhSNiXEnO5--'=EkuGY=QE,]]j="2
%J"BYBfqd%p%d+ll;K,d%KJa&FJ?WHoD<%p_UejSI6c.@o/]VTQB$_U]#9n]`0UI%k=rFh#GL8Nl<P4TSSr-<"I12fmYD31?Y.Q/D
%G:Kl^iNn18GMi>In*<mHON96%;SPMe_?[3nRJS)(QD*k+/*)>q/<jAQgh(/P>gXHGZBI`TT[oENk$Ak:=/C[4lTNX]Zk7$L-iu?t
%o0MsA_lDdL>','@4h?Lr!abW:Tb"ITaBDBZ?fWupY*1,$T/_bc2L+*HO-R,iE\U"Dlg<2<5,`s%%-C,,_<`3V.Cmj\CV`<oRRHUF
%Il9TDAS!2doaVIEPfGEr/0nkf%EW1$<V8g1%E6u@+m8$".P@So6bn^2`OS6m0Rlf7`SFP"1Jfft#R283&Lf]Nd.HfPN>"f+Nj`J9
%Z#M*`'6i1h*9i9j:W]8:-Sl.VL]7Rda;0VTa`#i]n-JYq.46IPXiT*A_P?0>W;NEB+Ip@OO[=--G+^_k*@`(iR%3;Ce@0(dr=OaF
%53>bN'[SC_OfW`'>%bM\-e>7GV8Ul7/!/uB%,r4h$K0a+@"c$\`Yaj6f*JUYN-nB91uBSXZjURR7G-5N-_`9IP10P@9'_(ej#*+>
%7NallD'&a:oh>HUBh$3%9\PB'rN"lc\$D($RrUtu9i=pn]CrS-C'&mrjB]g#X.g>/6PtF3B7X>e;lc4!mg)IX>/EJU:G2s#nof/*
%qGtg<m,";+6jJcN#@GbGYGR7)Rbh)X;_PX^[7s>`O&T2dcAQN;D"M15)!=[(J0CDX=Cb!`6V/D:#f5cn3@*ZsQ4'V!PVaU@]F1,J
%T6e]T/j^gldO4YG)s3Wu);]G`\Ns&m.qW5eT"OmfgZJM9eeU,VQ>an!P5ZTT(92WD3Q&rXdMBP(ht5ZC[`!dp1D%#H^fqG,q+DrM
%q.m`eqLaiUP3c];jPt=+T`)fdZi*0i*9GJeCj;A3mLuE<gV+"#[N5#XW2baEbVCR=hB^JsAm]O=m\-Ua8Jc:#H\cZL0#O8,Kg!92
%BW"^=D`Ma*j3UX<%3';U\*ImW,$X$BeglnFe-.p:`[>^'Dglt'2=^FcfY=*PV$9i1Tmub$lRnjP*F!8SSt*-//:WLSA!X"1"Jf4D
%R#uJkj23-o6UQ&Jql*q$s%UnOYgbod:FSfr"'8@t6&Q-t[3HErKUi0\OS4RhWa8YA*Jb/6C=@Z'-*6JMBE%e:.FeE:-V?a8G@,5i
%;L]]YIhF1QR;u4\in>fI3lq*.RR=M>W@KrUj\9(9]TdTInSDI`,c%=Er.CI,V[4_U>?1>hrV%#r"L+0noS4^mhMQ>h<ha%p=nc_d
%6`"`^qTFP5W[k'<CXjQ@2Z7Jgk>4tM"K?p.Zur#p.?=td>/<on^o7iMVG;Jg!o.XT;>XlcU`R?VAJ2qug5MmpVjL1&;RRl`=_6J`
%@,;3ZPE[_eRQO@[5;cO+_VD,_B]$:Me:?rUj,&)H^/EjlRNfkd)Y(AfiirT5guOXi.H]Tt_UDGQj:j:P^8$K(W@Z7BYl&rq2UB-m
%3;k9D&!,35^ioh@^''sO$QDDR@WiLOGnr^)Y\baQ"QV06nZ%_-8kL\EFZr_cq#+@Tn7tZ_..47\;bKH7qc"e3L"c:GU!B#.Ki8s^
%Z!]#f'S#YXobDdZ193<,MHd?Fq3e^^:5[H%dkQkLQ\%F7W8!Mmep"eS#Xm9L-Zt4'e;m/deKcS`F8^FJFlq,0FN5$A[#S+\r.^8$
%$&q+dp2B-NBBkj0SX2W?4fH1ti:[Jg>>tPi;OqcR.C1K1_J7\X#E4e>H]FImP)Ti3#;(3HD6%;o6%n1mZKf^R>$c1*,Tm%SH:osI
%78k-C/,mm^5-0dXjZ:1#j!98?U+VOFUjY,A[!YfYA]GkOq8B*$XF-<ZC1qF/m;gfjP6,(7"VFS[Wj_MsPK.h_W62g/H\_Hp/&NhH
%/iC=aAYmL\G[9p?5XIRNDgtE^fj<N`LaGF>p#\UQf/.>'nKAme,cuZR04?nV4k09?Ats8#H/hi5'i\2<a)BpS:aK'/O.i0nEP:.7
%_gQRIU\ssKoLrK%nb;cSiaX1LoCtV?)FO5M++t3Q6/Lo4+aNnGCZ(e138])mkRU(NoC+V&$2MPI^W*l?s)`<p9.c)9<m7rhXN_a+
%VdgCp5-"8XVA6)A?,LmMV6jI.l%Bp2pGMjWcn]'WiTQ[011_,e]!aZ+)7q+b"0^2JDArTuZBe981%&`Dm6[DNIq9]b'0gQXQ?K_s
%;GXh:#<?sA:iI<Q3(f_E';hb`e;e@>nms!s:a+8rVUJiZPJ!rP*hU+?RGMLX`'Hsnm3>s>27uoN?P7>$EkThj;+bPaiHB5HiW5[k
%ok$d[\VnUUooNKWLTPW=bK=p1MLnUgLjB5GW[Bm-s%SW5'58.@Hm56]O>Q8(YW3F`cYpI^b>&,UieL3r!p"oljL>XAT:^q@GkF=-
%b:CjJTT[a-Ot/e%fOY-g?b0%>"1Y4&[]K7Cq7(oW;P]F2.T=G4^jf'%*c2fuBaiYS<QV*pgXF!d'X:MHS!T1<TPNi":h!Xli_R;C
%q4d*0W%bg4S"G=5P!/jf*JVoJis.E_l*62F`Aj'WF36r9a0Y+u%kDh!lJ%P.UErRk&q8YWMI-bHWs]tZP5<M4AH:F<.]P7u=s.#Y
%i))\*&fMF-9:DcXC4XOT$h6N/r+XtZ.tLrX0&tWCIsQn"S&K5[f<\?E^]e(Dk:t,PNALHXn%@=C>$joCU?1sZ8g*i!5e"I\a3dR9
%VWTAIe>mH<-18pB$h4+`oCT$D41K3AeuHm%[O.TQrh?'1@hPDu:d=s='']cFQEf\;g/=-<2NMV<Eh]50QpgaF")!Pohfnm(9<2]`
%FOXt_aq+W&JQAj=,JFE0IJdXV\rYa[=b&g_foQo:c'6h,2'F+TjZM@>*=1$dk3'j`p_(CK-'dqo.P]_I</ea9\%VN^$H%cVr8&<g
%YO;5b\"C]%&)ZF+aD_.e$^(_a+uN5DCsUdNpA4\$8+?&8i<VW9E1g7tK,$FKb?":E<Fa.,2YP74d7(,C#V'Z942nWBRjs;^r1R`d
%(9!6:+!O't%jh/KbFjM1hpeg$5joOoET<Fj+!_595b+,%o`bB+BM*T*:AO[Ccmen(UhHW:7:![hW:>nu[Liju&>g:DdA4B477/g6
%CS:j^iSA/[HkIK&,Xh*?MB@<K:@ZZ=S9m0)23':G9!%2)Qu%`cWcCY3k7L=31`(cspUXYmBR@@_T3^4[=,RM-ajuT>#@(r,L]mCr
%[r=,4'hnbAn7!3CH]4XFU$.4HLXTh1inrnWp7?;MZ'/V;U(9j?&<RPCSuTN*I+1fE'QNj*p82t9O=aXCkpg_dS<S0-N0LNg8Hu^s
%LsF3Oh2(+a@bN$mJ<J5TM3rZ2[`Z=lnlt%deQ=g<qR.(fbY+p7:K/1-a.n'<-HbX2fQ*gW.5ml1@FhH>_/5/s4LZ8F[W'u=K#D<Q
%VF<C(GI(1:-Qrl%D"g^TI5;lskB"Rt^p4Dfngpq['H\$V>7GkV3#Hqj.CA,@b'$n"@3q;W?ACP/Q$^%84;dJ8YX<kr0>ZJRQ**3)
%aA`4L`f$eO)"T"!VA@!2GM%3Tl3pdlG%!#VA#`?l9r:P@mT8I0"\&kX!ZmS,FIB0+AgpAC(T,E)+-o`8*1s":aVEDA04C48b+XT=
%7tM9<7T6T\/=ej+lI\E=QqA%R+4^4$j!=_PLsR9?Eb@,",hT?0HA#"p9!Se''AHDB6O5WSVs-Y/JI+>j\.n*=Nd<f!]mC^X+e]9f
%f\3#="Ra`o?aH9r(4]6!l^9*%Wg"`>;u91o@AOORE0Ss2aK2V3gi+GCQi<@QR\W=OaFbN!(,jWbf'%&`4c>h>[")uN!k'#=kUodN
%?rX9(s+VTXZuoV+(DLH7;q*2-m"]HPV%48ejYI5LlRl\9gRpoj.o;&O]GU-r5nbL'0]6`.&K_(q_:Rm'TcmB2$1:B(ott"a(<;*"
%!V.=0>RW;%Es,4mE`X:$K8^O>:Qt*uH(-l?c"Qg;D>5,BBcJ)+;#D<*A=n4niI98s\P=$COFtE\.Upo&Ngl1adrb&^7O0:ZC-]MX
%C@_Po(k!5VQE"QZ5uV5gmCpH[h1&+Nk`TleT`"4B:=2Atm*'EBZh3h;B0l41q?=3/dPX/*'-Mc`h-8ThL6S=5*HT%lC5T)Y5@u\C
%DLkJ9;:2%0&5<*=$F0^-C`pG'K-=?^m\9g]\oP6fS7BUomR:Z?0;EXBE5nJ]r,Vd2]*enQO'\QmbSo'X*r15K@YuKFHVPI$%tTIn
%/I$ku&tr4OI*/_%Y>NU>&r33!2^9]"fq:#j1TmsXBaq'uO4_IQTe-N"\P.k07DL3a'#Lmo)`d*u!A0F`F!$p\iYAsKlso9.JhSCr
%p&=pS2DU=!a6(T+UaNIEN<W3_q3s-c\'en+Vd1a`+QRr>j@E>ECnBZUg^Sg$SL,l)fLC.?X;6Z-@2AI)#,8gMZ_YZu@&Gk>L&n48
%!Wn50Gd=3d1-!]^;h-3Yk,]K@i@16B]cN88m$9dLgB/gU50t51K]\d=RnMngm0tTi*b/-"4>Zc>8[%nb3KEfjDqThHc/Oo0@7ra=
%4tOC7H&Dhh@nR_K,IsL^a/fcohC!fn0l.>B;.:?,]`\rRlKr&O=Z:eg@*(m.qP7/jI"dtB9/3Uehtpj]:;n)Rg*(3)_cH3t$6$.d
%P:ejpVl)+l94TWkEr)LqHRNDH!!K$9N;06<Jn-9kOuoPdb@=asgSBrWf_IBr3,=,k:cZjh_4@>h52+R*53S2<$cJZga#RbM1u`D:
%[<E#&!#**VbjS.;?7$RC@8]c^FPCJp?BIu`gQ>]B7,O,-f?Vmj_ZVJ`-8OJkQ)PgZLqCP<,CnS+.S'1X#>@0!?k'Nm6#@uq#]IqE
%*eThGA?a6hjl_qCLppSFE93cKNW$2:W<B1KE3u$\BM&OG6=&T"PMl8g:k<]Q%m/a7W1pfHrd?rY$?J^XEX?ehrTn!mk2p\XimIL@
%^DplVZ@!aBlFkY,7&Q6h;DdW[`gGpTlV_-Mo_Rlc01+BB;k;'K%jru4,j(_i:VRE1!d^NEPQ'M@g+/[<")/[&pemo!99B*[L?Xb:
%,!tIa4=>?o^G=_I&E['K-WB`-7-+"oV0]fOitWYQkN8C1k^L`Cb]G\qgfIH&I@Y<EI;GMqiLe.Qk/Z(6=+'`(^C6u,nBRHls1<Fl
%R)/JPpn0Q**=<m7dD'YfZ6e.:rk0Lks.\4YU9q"^S-Ck*(:`r@4),pc.T=OTR^H@m_m/BQ4uu$?N@0pOc(sn+a%8d/IWO%@g\h7-
%^#*F^aK2uQlSSuGC6?fplN>q^gDBA.55argqqdZf2@0?FQOqt;D?%SY+LL)!FoPoP:_0Rf!I1/3jNALCF[P[dTa`_Re7e+R[4@gn
%bR0i;DKd>Lj.?[Dk%"&VRLdDZq\'ki43aR"1^O[o4e1VPT&:H.KnlRSrT!dW?8)0Cp&E:?*"ortk[427JSIWGp+LOPll&#?N_C^0
%o];'86*KjROK2UMKBRgq?R9:.21A6XM_EK.hc<aB=3ZfXHa)>8Q:(OaG2[\[4C"#=n-3k,E:;NsM9U:ff0=\.anq5s?Mr^WWhGDE
%MOf7]X%&ftI+uE_<V)*5^;:pG5Id2kMb;-:Bb;k_0prqP+%2_T-kp<n3fpc8F8uBL/KfY,eHnAm=3IdWVK<4dC,nG28]#3T]<Nmf
%[dFPapmX/>QUHPg97VKaD'#u+anBKVdNIATD.&$KhpJ_3@3+F;QO%PkW7T8F_SMJ-2jJ68645m3g8Ek*\NET)LLtTU?phR8''L_W
%+X>H']^-!d><bfNS_clEi43m(TKU+b.5Y=t']XX/3)))](Zubo(gX]]6_C=cSN=Anf9QMYCa8Q`0]s9[O:e9(k\$uD]r!Nf\!aT0
%O4hCYLT0O9C?7':J^WOF6Aq-r\I>?;b*NduMAhfa:74Hd&X]Wj8Q$_liCWr8I>Q04S7?O;?:3YX.%`>&*NYb;&%d-WU%G.>dpnGk
%BlCa[eMNgr`K>(^e0if)mJIqZA,M/7bWC\_PaATB#C&I9LOq$[!F>)XVPV5`ko#6=c1FN3WE]nV^I;.bbh,NHpY-EncS/F./>24=
%o/':m:2nGB?o@lg[ab9>.utoBTfeh^4Wudh0h.Akq?#Yt=LCt<_!l.jTemgI4h=?(5g=c@\<WBpfY2WQW=cKLC.*cWZZDZOD5A@D
%d69Dc5VFhk=j11b1ti/8)XHULp"o=OGPu),AF#/;K*)XNK2lm-:D$ha^mT64eEWYp/2Z22AXn3PM'I9=H;('bq6ishQ=C5PiHddQ
%DhMTZTToNB+KDQ;h'^=%(cd_8q*?;::*%6RADZ/k<2/FFA9[rnK*f8gbhN:g+7:3rS_apl>p#(5#ruF*>Rh,"fgbVq?Z%+ba@8#F
%B/j+H7).8g?/e>sA56&Opde',V;[*%bUu7lDBeAAs/+,+m@J%GG3`;J(mfYleA,@[?.t("BKk0i/SRfIlY![.d3[GCUJ@JaT_K=`
%@L>dN1hoeoR1,C22Y;Qk,l9Dsm=G*G[[rY7TP8-NClu=Oi^.k'D=2:\Nm#*<3p(/OQL7K_*bGQJDsrLLi6fehGPZ=Pk!M#'l`/FX
%9=d4Sm\5-2R+(SXE#[ImLeOQXeQ=4l`EaeHqW`<&Zm&f1=K6e&XgK/'R!'Z<'/VET<`7Qf66^Bj+`=/Na%THr[c-NAoCM71OY!$U
%T^>MuV^Y:81V4cU;!X?^$<.ODiBr0ND+q6KfXfa0R"J:cq\4XU*Y/ak1#SiWPVg8[;%(p%l7dV``=BdM\!'dCORYgQ62YbF'<g;f
%*!,6kE47;!h7O@9gHm\fFs-.M5-)oFOk,E]!?>H(LpQ?1(nP.t'N++NbME<Y_qeiKfXZTbHiR25Gp!mS<gS'&bZ2"XZo1Eb'2b4K
%)%VdYl8t=GnJroImjc,D[,F@[42pHr,\/A<jcIZh5j$XE$<"Jn>1mT#'!g^VRh!qg]%$tgWENE/(@TNu%Sc`NPF3E\K5+7`%u,.5
%"#'TPp62uJ?DAsfXU\<tKh%X&CXL/q0P<Y,f[@2WRHdd!X)MHFc^TA8"Wk@PZs#h?+`ag.0X4VRF@an!F,_HV_]es5&(WJ1c^YS:
%S0RNkHlr2%YEtphWk'Cf`&qI'?E#cp6u<0o1-Sg4YpF@ZZG6+b9bY0B&p.%]McNIgC7BmH:Lpk&%tGH`?;Gql;>ZO+PkDRhld`Xe
%e<)i#2eI3sOT>Hl!Tt?3@m0l)H+:;>+F+b2^?-mILl@XiXmPC50PJ07[N;*2?>]pWb[Y`2$(FEug[*e)e_.4-D(D5^f+.XNb^5rp
%NVW\uDb`(po%22gl)/I?-7_bCE"B@F;R#O.qHj<4SgC]I>u0i3j4mQ)$dMM3Nh(!QAG6=#kLEX3QmHc;aj1\Z2/jP9m9MuYXKEEX
%BgrV;XnB)q/e8=(%a[r0gVA_ZCZeKK=Xdb8&;:u=d?JQ,,.RJ;3D+@oEhK'=ZcP2'`[:s%FH`VICE#?M:gt`;B>m4FY0GJ5D"kM&
%]oguq9%-aI*hq+l,>"RI_n"8KL!WFN:D$,=JZe2d&T*a,N8!N+A;Qde(3+nA8rNh15km,okc4MPUP=lf4FA"E3lQc6Y8k/7qT6%B
%Fhr12K+]@^iEPr#oAC6@rlpPS!9Eh:''&c<F+_)DDb4"9.Q+gNb"%hg`%SQD7+?8$TB6`o0m^4*%D%"!>@9oa`m(DP$+@,?l6F#$
%Z^+=q>?TM$/K9Zh^^"9-jea20Dc[['RpnU/e997c:d8fT`b5SqfLETCoXF?X+r_S(R3HNLn3IS:dLt[g8gW\&;``/r91b96LDmc-
%]h8t@!A%X'4^(2(PX$UIdHUZCW[ue1X88\O;B@u)*C<3Qr@7d<Pu&kMPkEKoCrb3PV,5:3RQaYjo-:&(&U&N+B]5JETGD18,mu$\
%F5S[P1*q6[c"son(Rs+T[o.DB8=$6%73J[>K!8(:H$4:K<!ul('6c_kaegA)kb2B*P]s1;+BCDMncR;C>tfEIh=gBLj9F"+Kt*4\
%h!Q;i3.duhJ6D6:Z5KPk!CY:TIl;'+!$$H,6UMJ=lcA)5=s*uF[-p8Em>&G4<f>G>qkDh904f"++nOO\\2?N>!mJu[P8b<da\2ff
%3Yb?Of0oC2of<(E])XNV;"gOs&:2MLpN3104[@Ar@>HiMGtUpD37]c)SW.>+7&IH>[!\?q<YB(9TPJ\\pJM/2iK1mJVXQuPpE2,?
%T8N4qZ#FHbdoWTjA:,4N\-48iQOIie>jFq;oRlN7p3*!).W5o..9M3,1c5pn&ses%ZmkTk^&UcIjp\(@6EOedUbJ>da.VMK3#%<4
%`$QCW:Jp&Nc?WOn;U@N3`mbnZ2U>YcMEf.A8->)*AEbW;GN;+q:-+T7,ubXeB=<7#P`)m7Z[-&m(H.<nDrLQ%OF%n6+oY$s#6SE+
%+OJ]i>--U5#QJ&%$jjc_M'eEMG+am_p-KV&j94efF+=`4PK_U=@IQ=uU\6!t<![t%`0<0bCm%CSPRq]GJoo?LJac(8pG1#-BI7G*
%J>%D"%DLXI^Ho>W(@F>?U`0H=HEPW%k1<W!R8t.DA7+M@MnIRCQTM(`3g),l<fW;"?+`6MEVB)[Z?O&SfQgXU9FRMJ&cQoc<I7O9
%)CLMWO?$OiojPfE]$/q-5oWO9DYhb\fP;LSlG=9/q:h^P\.;NeY\KUIgMu(P9Ztr!W4_45jJ-ZASu!jD1`#E&ED^\2Vl[Rk)ZHC(
%/9X&E'\dAs^_]R6$)q,\6H?N\o<W).jN?<)<2ZG;G_j`T"hTOR6db%ahgGd9&CmSPD-:r#E8R0dHq<q9BhrT>BM'lsOS%5=F3Fb%
%7>c;LA7-S0k$"H7N[*"nM^ik'43)C1:5#hkS*/3J-=c\b:$JT3XI9Y#CX(fQT`dBG-H<cTL-amVrbA4^Q+Mc?%0EgaG8qE$5uDBD
%Y0mlHK%/F]P\^r<d8K74.*,Mu9]nZuAsI)Ap*kkalPQgXCkq=b"S2MXT44LZgs=I;Y!:d;VOfLt,%,i-,/7IX^UsgBM3%3RbY:&(
%gmPI$8&dbnKSS,IY4=>s7fT3`n\ZCd5.nTC.0CeQ73t8Qnb8PPj^dnSk.P$>!-#.'@G2plCn@fO(erLGV/Pc.:H%Rd#YP?JW,C4j
%BfFj[nU88br:-uiV4!9,`kE,O0+p;<8Op712m5:5*pU]Dg!cBiD)u<D_02SVP_CZ.T_'8Ac)LKu!)?idQ,2C^@JY;4!GU(WNfOc>
%(SPO\s,73k*RorkQ?_ASI;/f4V7=t@XM4G85Q2ikqr?;1PN>u5L#kSo\)^aT]LXT/FH'\UOZA-#B;GaK:o2H^:.S<blbH9jT07:2
%MNZp:+\oO!WF>;RD@NLTUIj_fL3TbRYo2^BND[RYQ/R@G4\69uREdF'C.5eVb8YnRQ^jQ0cZ2rWD*PKKib?Q`Og9]D0nWW@X(4B\
%)tSNV-`Br-[#^@EB91M\>Ba0I^I:oNP@=5IJ+G$B3'BA'^\mC^s$%Q$WO(u<=uI=J[*)rrZ1Eh=6h@0Xjci]NoPmWEJ=IBMG]fd=
%HI5b17p"$fPOnfap`M_q(BeeUS:OGGCM$^IECRS&;g]8]_CDa+B6j>=,B5#M#&&ssHbsu1=l^"TVkd_`^IBBf*E9`!-A`YRjOqJ'
%A0GGXedeqodZ,h94dCet[>O<VMl(f<&,dJ.\Qr7gZM=F.7*<BRntEpQHHlH#-u#T+lDHEBMB9oppD5L(Rk$lI3SdAT.g-lkD,FI!
%7Nmdq,UYm1#\Eb5bVRc?o?]^5FpRL'FL@<1`&@Q[-+$A;c;rpZ*EnDBA-kf)eDO(u6o7VBPsS-W!;GT<'YLmc_J8c#O(MC`fa?t#
%C!o\,aDZqd8pP$,0e7rQ(k7iH@l3ONX.R/_lYtQ\U5n96h43rU`R:K:oS+Toe+cq!X6jD?WW0@c>I489:-OH12!j#0)ZjZo4u%af
%Y;Aime'f2U=jl9uF&!['Vk(Xc?=][MGNM9"pF_-ppanh"5=ZAOHo]_,%>aNiF)p1Z>A9Yniq6S`5#V^'RGK76*M$V0qPI78ED6Y5
%gt7K'N!o8DfnIQt,ZJt]8pOq4U.EQ\D)3H(/)C"N/hMboOAn&M\U_Ta+Wh!E$D(f!5LUf>$PL9kg\;3K"VhnJgSi8;IETme(D0V#
%\?f"^=]c:sGmaoWn9:XJa9TGA&)c`)=G2prUe.oKlD\L@WtGAB(1G`'[OAG[C0&g+W?V*\<S)/<TY\`&I/oS!'?fGke/Q[MPU=N`
%n7F0UO%`^:8<9`oHohM@]@69rUa`c!Oh+,&E\Mr=krX!%W-(n6\r!7Y2W'Pj(@FnM:!hkeD,]-(QNKa6<6tCp^-H3Ih<l7@qER`%
%<bpL%76eJ1cCAI!'La;cc960(8UkV\>`k$jZ(f^U*Ep`8?/)q$"2%UaJ<"]3+?EY*UlA*Fc??LUY;E!ePLio/QH7a(Br10)=2;rh
%OeD108uFRESVkf"hpYidE/[rtJRiB)$P(=42BX420KN'_eltJ/@l>d@g>tk]2bb)jmmPC8Y:hQ,hS1\t*s\Tro(*QO4m%^qNd=&o
%]/r\D'%6EUd6_h"?Us19\$UB#.HE&:,Zm[E<=Ii`W+XUGde)q;g45$*e.n2rZeO!Fff7Al9Zib5q&\GFV&kJXCLT"+9T_(U0O'/E
%Dg3=R^+7%h<(T-nIjL#XK3PDq2?=D\`7G^BPifUtC@^Vd6W>)ATf*s*%6h_\m*)/qcpd1(IB4S-m.RE^=$jl0NmEknMp!6jlj(XG
%OlCBmTjM)Uc)Db>5=Q#)#i?(h,bk#L&J0+E?K,d.)t!gO]U08K7[(fuKaYCJq4K<R4%QO&<d67>Lfgq$C]sS7gTqSZXQ4R#IZhgd
%Ca6Okq9ID:4f'H].<o&h,-cc-=1BMl,4a8g>VXNEB)f#dP,tW=k#<//^6iW2ZA7jC'-m:,Zs,F8pkga/o+Y_u]iT<)Xu8l4<Sb@1
%IE#X_d6<;-"A=QTC@T*_agM9ISgg%tH55KFrP*,KQYD.5Y"a_[eK<4f*hfAN9IoT7FdE<JIj'3JV6h4>i+4FTne0qMDh!c]U_Wf,
%P#"^p=/@lD>_!J3AgPTA"l<oVKFf?1]9JpVHb*o(kjjS7+EcIVq<G(H"^>;gN$(NE`.S\lOFTV`ipPI:=AP?emhUMBpD(R/W<1+0
%mpH$5\%hIqZ;7(N4<@Uen0$q">DKMI3k@mADS(mNKsT.'WAG\L&B=V>M"c8kA#<J?+SSm.4MlA);EVoQ-Y6a^BsU;r.j"qSYhNjX
%Nf"NCTfl`@(f0\6[@+f+A(]t7!I2<EP@o+FWV?\/nXpbfH_;*V$=BOY>82n2#^7leGue92`Uie8!(ES^(Cm-@%:!P#GDmoAdaU="
%a@g[%.>gtCXE^$B%UV-"bd62EO'F*$QT-ZY2Qf:5^1<bMS5*'[KQB&s.E_(YYT1u3)SX&X_E+46-rh"^CIgt=2V'u*HC]o$Fq\qL
%GOb!XA9Lq/kK&LBXkr]oR1CTQG7b>M7e")f=4\Sf-2ed=C^;F,bC5[O\!Xn+kEDQ&6_4LC/9c0K000E8@8dZJH4-HbXP,1X<C2k+
%1gCeL!N>JrZOA/m^Y&bTqkJ:?X5XLYL\DA?WBt*&)FUCtX[SKfT/uBipoM!cJI/`a&9aH=SV2Us=?M3SJj&4c(pGYA@1&0t(q(YD
%E:^V5M`]SX>*WW_A0fJNQ^],/E`g=TV[3/i%=tB&-k<ZDUu->O$QB/qN?A+L$Mq/QLQbcg3[2@d'a6Pl?]'Z64W^`<Y$_jQMWD;A
%)OjS>*"c`D:b,t;b#o$LIIN2ROrH/h0dC\0/&)(CC2Vc9H6&JC`k45!I`3dCJo0@jZcZEja]dc9LpXSn_f?%pSG6ZqU5+H8]40VB
%cVWEJLd[XS9l0`:3L3jo3T]5k0W?Y&52Bo"Xt6UB\o2b=G[+../i09aTE)@+W"Lcc[Q>X']UtWffg)Z.VE+F\=#kDPBOo&>$7&`V
%*%A!8l;lcra[/e#pl9J:+urQ&o(H3.X68^=G"-4M6`e!afaZi8SEV"j]k(GT:npX(Ka,>LPN\h5<15WG6NM*\L+520D[%JC<fqp\
%PQmUrLl'Z<+XU^sqdCJ*,eATk3jk%cPMj+LYfB$6_='9oct'=3(CL2fg'hHVhSn5gN[r!>Ecu7#.-7B]f.B3'Zu?hj05V\`3pH*V
%p-[DQ(g[4qRJhFCn;:Fm&E)`="')CTU/MC_m<7s.9$[Y-G,rJ:M4h<tEq=8L=s2(V!+8=V)Z717IT;n>$U4QcBHf>0S"OWe#5oP7
%j9rBd&KWI/KuUn@Q8;Lq[\_YLLnIok9j`^Z,^(#tUV2?E2iCIE'becZ)#mrckLV3:Eb+ogJ\K$I&_MhZg%dl(ESQMhE+&TOn@T4i
%c:'X5CBfd=`o#YM[oR%iXu^^%O`"C][jLt$Y1f$<+sU-iV5V!996i(pa!*_j&N%RWD?=2\NWgN<i)6p"@$@DA<)m`uI(3>*e([5T
%H=^t_4QM`9X&VR/m-i#E81fBVN*cA3\L;!tof?'oNfZ`WrZPL[.;,#*HE9r<o/)OSf!77*1`aFF*DNhRYD(t,)F/P[+#gnWn@4bs
%iS$:N_G!O::5!]'MG$>L"jti"me9Am@JL=.n/I;:9Y3ugHDKKNSJDT(o-PG0]M@nlk\2AnLY_H5nUi$4o6IclpQuABEqLH^Z19;u
%T2QBpmTO3iU*)a1)=VQ8SMgK<7$D#6X4+Qf:B\<>3jdnP:J8g]qOZZ<;oYrE)koki;t75JDh[H!n2Bd[c0TP;aaXfL3<VR6(pgMj
%Ohkg26e0GSP+@Si.BQX(7PZ(:3H)VZl@EItO^P&Oi@s@kAZ^)&K]n],\-PSU-c5[R#hip&ROc?l>!H3@Kf$n@EnMaro7/0=^;<QB
%>8'N*EmK-E&eHtL1t&'[^RT)/:A^o;%Y'j[$O^er+#F.ZW_4(FSg`ZP`_:sn/oNQ^DKbUlARRooo5k$?V;;Y8f4<RanC1-hal1n>
%[W6.6K.@aK*URR]E;NI3<u#$XDF]n`WY"=]7a02aac4753V3a5ng+ardIS"+hAFr;Wi:.g$'#sh!U!HYA+uu<&h5^IjnNisXNh(P
%SG_+=VMh\9o7\C>iU/#?&_r_be/"d2;nT3t%<BK[,h&C9K=DZQWfl22.+\FipH]$@N7Sjl-X_^)s-@!((\`CJiCVLq^RN_"/qc4,
%6D(/3%PrpS>%^)!)uAg_BWQ\a(Q<qbGG/#S"4YMgLS_U6=ECkq%tShF!OE,e;nDhCP1qE8M3$k6OQ)8j9sq%E\)-?JW!:LGo>0KH
%H7dDj>(<HphHh*H7p(5/LID`/&D(6&XF8A>5!D)Dr8"C0nn?ImH`9Y24fS)u)7..GD7#^%>;X&7*UgeHe'<+4?YbpP9X^+'HA7C^
%)Om#'7GS,KBtXda].(0F'p[iVqTBRcQoG?*!FY&Tj'S%Ys.X,G(E;HpYFFY)MC-W`F7G/+d9TmG0^oNjf-8TmgE=8mm=kWK;TL\s
%U;`jtp,%-;,!CZ4<E$QII+pf]d+f!%LfmUGRqQ\L0ehEsO\oJ+o!^#GRJc/Eh)2$K(5g?UH@/MNasGf%LuJ*:F;3V=eK5\-ZG?;C
%7bO2!G<7VFA_NAuDR\'M_X2GCbc'CN/<P#-"DLN7Xe6B*IjlR%F^dgiG,<OS*#DI$RT5f)TUtWG7aL16B;Sea$u'Dco"8Nj(VH5<
%71f/6Al!l`=ajf+<UB'\#%EXmpis_V[]M/(\%lF1@/sTg;:-.QFE0FDX*X.,U!!f`BbunHm,#>G.WFZb-ac=PZk*=YCQ=%<$g/JY
%KW,qCgfB?V\DehDIKHZo,f"->**G-qcDSrCUHp@7CPZq_^<OOM':!l<,bc<8%,9b'Hg6cabj]^E?W@c$_=]P,Xn[Q1IgE@p#2jZl
%Z9#&,]t=be^AO^Uk0'CNjkhL1J78HKg8<3`KEgUU<e,6A4"h]=G5.%6#.Y+#EFC3cU$9<0ZRNF1KbhY[1,Y>O8pV."?LUl\!PkUq
%.km3D%T4Tt.KT!W"$](O@#?I*`Y,AYe-=4K7j(iBkQZV"\Na)5R&9O&p=Sr)Q&_aVh4anFc_7:+^ouS#?FapDpFNJkHO5b+W30Up
%:U/b(bkng5)tt*J^nXq=,rNb+-TGchjj$tqC)/kjK9k$*^F@\@QX'c?_/BcT0rUdK\:$/bS5Y&4RX/o^'A'*\LUU3WCD?9SNick%
%?=,<7U6!Hc9[,G0ClO>bMl="&M^*boo4e0fm>W=>b0/&n_W>Ga-=lgn8.`:G*!FCaDE<He[?D[&^`dA$JHgKZh1#88g@310+9,q9
%pHQAarlf#'^IqIXZC\*R^F=0):AL&3$NO=A9QWIR8M((tEkbJ6P[oU\::>]Qdlr21[,CtF@u%]3BKq]\"GL]`hQO]4&mmR9LIlmI
%<10r!'8Y=7don6u<9jAEAeH-SVbEU:+KG?hosVt696m\?\aJ+$C_&K7Mla"b:KlSo=H>d1`'cg7RQ#i#5%@K2NJSrfR87gMK%rP<
%6hi[*n!cEG=:Vc#iuLFD>J:2\M6M[;9f.VW"fFNf2`>eI[)#dMQ+Zh2Pr8+D<E8VE\\Uh_TZ<q)[^@SOfb3%<G4MUB'dWO]+B-DF
%W]!?'_?X^aJ*pFuZF2]H'K[>D!.X[9&gI\":Ztef3tPnIjaouQpY,6dD*%.B6G_A[GY,L([2mu+,YR9W"pi@J6#7/h<RB356jF:q
%P(Q_aPIEY@abk@/RX<),pNAT[c$k`o0D":hG2joKe%Cgkbb?d>-lQK[L^$U4(hkY9MjpH(=Q^@8%3W/oErUTncMlo(67I;1Vu>`'
%HId:5d@T=q$b(PjcTh7"eM)@l0q<]!Kj1r@/\?:'NCpO"n9H*&(K]B,]K(T]b#loS!)>W1"2oiH9NAc;Cc\Q<JgGnD*#Ng@'54[O
%8meIa&3CZ`g6K#!6j?6hjB2/[(?s/Hk?%!KB=<WB]?.*ZkOSoN`Gr[e>;##r41Oi&,9ljL1#^9eq8-,D1q%t6Dch%W=e9aqL?N43
%-T^X0>^EEls-`0Fn3*9%a]agNd#')I`NJ4X1R/">R:Z(4(Wrc_rGTM+ekN0j7L;!SAM4F`..8n=&D;o*A71I(+e&Q/@isjNB.lS]
%NImUQqFKt9?EE/+0_Yoh`&$T\Bg'P7?)J#dVTGi=$D-"/0$6#OJi&QWXO2>#NYq"`MP*:AT'%PLA]@9o<t:@*9ng^P--?'dHlPV&
%'1EGC2n5:d%Y1Xi4MqNtMaJ)]Q4bZ$CQQ?ldteiVc,*sFk_l/fI8lDQYcH6BpPK18b:fU+pgWGua=6B&0Tf460uo3$jFh0%I$hrd
%=:R3E/AUnF7>#1g,2&Z9D6quQXnY'=9eu6!3oVsJPY`_9N=RX431*,%Z"6/*kWb@;hR"`QZc$rOb'%j/9KFpS&0?E@+Ml#GSl!nH
%;0Y`j6uu)6,rqj\d6uZNG?Pk*pF08elCB9=m)e<_5C/bgL(s"kPm+(SBS6=kWZLaX$c\N?`e*/\/=#1.^bell?t9MWm`TfLOg\'m
%]E[A]&l*FLI&=26?A!K]g3=OY!+s*VF5PZ&>GZ)WB:9*>QD#[=L'cd`QDI5'o/%J*'_jDS.9&>;f1@iF^pqW@:W<1,04$"5@W-bf
%cZ#&HOLKcnMbWZ0c+UUBWCLUeRoH;0UY]r42hb=]0JS;=pDH)7qa7d**pMX7dP>e1i;W-d:"!)-ElSI^_+BT!7uFH\,Z!/6>j=fb
%4beg>JonB>d-V?6q]T.,pX<H]Z[HkK.-p9XrVO(=s)5[Oe\COq5&TBT>DK#"cZokJLau^\66@!^JWnN?CEE-eCQMpcB:r]C#kLKm
%-Q)1)33DFMD7u;Ml3J^s>=-lh&rH!PP9Dgb`Ml-)Q$2JSZpe[c6C/us1_p-'.8c"qk:Do/.^102?jaO"3rFQ[]XsP('iRcs;t">7
%C8me9KUYt#/EO)mP.j(.qc:"c\ZT*[hjK1)3F,)dO07e@Kp!j[84>t.V!Ul!]lVYtYK^0\`$pGVG?(_+afi;*M+][%ah+62Oeab0
%HuKf(,.5dUNSIJ`-9/Q*V&A8/]bj$d-'6&<km/F[.4EOTEnV#d+9^(T!qRT>O;Lla$UAt\eo=4^niG!eB#Fk-5gGS+(6s[Wl%tYc
%TLgDG4e8AQp]QZ'r?!cG_#?)lMV*9hM-\=ub1t5c4r6#MXd\Mh0k:USEe=cD6"!fj>-ogp)H6-%Q#^%E]#P5T+hnC,"M0i#L!u7f
%duM`G3LAKQNAN;pj,6+7bsbN)CW&TL3E'jH@855p<A@Z(@niZ;>rA1@Q=ohgC'N'MS2bs*#P!'Xa8:Kc-@8_1Q9ipti^#9%n,U2n
%lBdV*rl+ZF5<32<eEdV&eVebs$3<3fnc,03;J`JM@%J1]&)tJLU29J5iAFNUZNrs@+LuX_FC/T+_*DC\\Z*-Tq/!$4;uDufp!kDO
%D$(UBAei"qi-p)0do+CO.jH\3X@aTE$\hU;6I(dYSQkuj#cn:/VFln-qmVlj9`2a9dZ5EM\CAP'aB]!Xe^ZJbEV;c/RAbEPF2^N8
%Ahk`M@>1j3[0\60V_@h1>Q8@li6R_'OgO.Z1`P>9(i%m\#C*sUqp*Reh1Nsh<hR"tOeVQb@.T-7&4ECYYW55HX3B(1KWh);M]?OO
%)^tUodiOk'Yc/2WD.)JhEtBs_mb%8'j6t\4"UE;gbf+Uq$)@f^!N)hT!RrOTSVM(#VU6.)ATb#r\r%$/`3_YaX4'-ZF!\Ct_L&4!
%NZ;,`]!uR^#]-`;$&FngEiA,FL4!@;=YGh^);IrP,rIk7D1Kq?Q[\+Krl#hO(j(H3JM"Hr'(r1j[37p]=-I\MM?+>]`Nm#o8,$\Q
%"A$_MF8(r:U^a-%3@K?p/kb!:Xbnn4Sk1Fd>tBsmfd,3M1\OIIir^6c;_jTiaq9^uo#ZK5$S/<U,EEBP=1/R^$%PnZ_No^/:SErV
%WV>S_7=frLHP2KkJ7@IJp:-"qNcr3eG`8I^[d68B#B-f9qH_/?(-&3CTgg#-RD+I*CKE<7iYBr9C*ld\6UY6BEshua1idkm7`f(C
%!N]$9L=E"Q$eC`Zm8\">h.FbiSo3V))/>Jd6!<Qj#)FCP^_\f/9I+Ji5+3?jIMQ9I-(e4lhdt+_,R9"-`n")\!+hu$<88\Z-.Oh6
%JA$JC\Mi/;Qtob>W_k.W]lImnlgCoaL)oVIh]?$T_Jnu@-#Tm%]X#hIgP_1pbi3oYfV",VSP0hU%<Zrg1D_k2H4JK;Dof[FfJr<%
%C#\4`JDf6@*3G&"p!GY"h=Yc16\@$;lUGm!JK>+4c&5`_))oDrQsg<Kp#S*l";1]>q802)r!gJT:!m*`pGXsPn_u\-gSK'?pt].N
%(,p^3K8gg^&6E/]^ngjTE]97Rp![7&/ZD-9&f6%A-$Z.1m,Drki83&Ec/4c5FG%4fMu94BHgWfM08a*Xh$m``!%\!?aXgPA]"/gk
%-Boc_H1dB9a)SUlmEsfFord>R:];DEnk*!8%do7jh]H[fD-Kg((-8Q^:N,F0Ngmd4J+oY[Dr:Q6YoSX-:[-kWOq_GD.r9#\IuBi#
%pE0gR\dLo:cOYZ$o\,].g#:(%bk^UE5S6T^l^PeI&5+"!0AQEWiO!7G0`'jL6<k_\-\p/J6m^dV>tFjl:HmFX"[8M*\C;ChU&+Ur
%k([(:FbYh?Qs@jHL1>iclY2*GGC!1]4jJ#j.MQ7f"\5lo'!AZOW7Rfbl0]FiVC.FWPO";/<\$.BbmU_hbX!PZ*^^:09hA;Es'c,R
%8!D-J-aO)ucRDhYO^,3.lF:B"U//jhXiKs]*q@CdHK34":<uPh:mG_<#Da.'\>1I<pYDkHc.,kIMrU3aX&prWr6gK@KkQJK^.=\G
%n*L\KRU8ZBR0FAYg2:B&Lh<T(:%5^G#:]Te&NgCbUu'\'q^<-[mf):qR->F!;#Wq&?H`KL;(q_@A;2k0/g`Y!a*(<Jeoc%WZ)t.<
%U=n3FM+mH3*k\%\5,6Esi)p>T!4P)C(rGKt^6lH`OP5)&\&o%_-gY_Kg/@\Lr4LjVD/2!IK#6?f%,006"=rGL*?6cXcmj;5U!WaV
%YMAuriEZTDTgErX,FO+_l]]66q<2jYB/f!&o^H,9_r3XPk"XTW:N$.Eh2$JfYeQC(L!n2a=k[t]#4Z.)*:)^42+pPTQ7$lTE%'_p
%%!V<D/13Nf]=GRs2+0rmKAEYN=u`V_i9k,s=^K3o&&MWHA.#5`Eqc6_#,7VXGB58u\C>tU1(T_B/t31ElVV<.DC0u_m!a"MCaLWR
%m3(i2R1'ZQeuNQkCp!2U4P3&r<hA)0TRrq@qt8'i^Y4=P.4/(M1u-oH:"S]$G>iuQdU%bhG@Pf?dFEkQl#3bqH?&[&eQg7s@]9(q
%BLWFNHAJb#AgjEEm+pYA:hQM)>1A3[62/NFN-*shO6O[(A/7;>VQt_eoXbg>8$O'[h3$[?c&X2h6Y#R3gH6`,h"F,(B(8W0'IuS&
%d7?-n2p1$5)TWLg33r&\RP5tt8Kee.6)9s8_l.n#eUO6Df6hr,e(_-!%dEH^n^kP@QfD!\dD,QBM$Us<[9r2Ah)F#F=k"fRH`gsO
%5]j[U[/dTt,Jo6GU`M:V.VaP=qK*9cO!qK,i;^&/8JMqJZ8'ruBa8r4a<#m_m+ff;-3DE*P8cGr'>m4#nnt:@K?GRu,$GB1M'Qf"
%d+UN'rK=;LX\,7Rl0+kgV@YCV#9Bcj_NUr'hlHWfO+u$DKhMI0BR\:$XK#D(-0(Q24^'j-e%Cb&2R>;DoTH?i*?4dF4cZ:P^f[8W
%UCP:)*un'N/#@NnG;72Ab/-8+i(G)u:ap_rh1%]JojCFQLAfVk=^Co95P8V0@[id(qBi]=8FT56=kkd_Z6ObP$A(2[Sg5/I)40C1
%+^V,#dgIn>r:]'^6?`.GArlpk#*QT)lah6/U:[Dr@]!38b-eEKAq6T1(aS=H1gHr(9'k:7:2j&kT#!%Hr#TXZm;&?h$fcu\;QVY9
%b.N`I/#]JJfgV/q]QLJFZ@,rBG;CrK3c5=R>=[',BF.93K+=q<^laVN);l*8oQMKq*2qdiB+MrWlLu[Hb915Z%+^%9'<N#0m?LcQ
%.\fSBf/RF#d2P)A?'"-e9T7T_C4A+i":t#2fT[Z`#`qZLb!I9XSE`8X[cn?YaNI/U$EHQ#BYW$$XE]n<N.,@6h+OD^*`qHQn$]dp
%c0H2;&E7Sgk1r-Bqp6!9*'(5p,-:'Jd]KW?@NkFV\%*6/Sd/!YIf0GT<HXZfQ<s7P&utcs>J,"A?YPQ)hl7e7N#l'jDi\M/VFp32
%(\81BWd'^Z,(h.hUAA>_^uCkBob8qhC:Fj;[X?b<]h?:6,RT(Y15pJ+q[m44H()=#@'@"4OYt0XDs!Wb@e'-=gr,kcV[ek5g&jn1
%:dj?LGg<O.>FMnTp=Z5&iOcoWo6t4RLB)Ato(h31$4:V+0AQEU=dt3_W=chm$K'l]HngPkX#R&fRV@9sD^G?,*VNg9m'Q+HSK1Yp
%7Hdp#SkuA!ERMeaV9/.OPS)Zc&HB+`V+&_M.R,DNV2Ge%o;8\%Qslefd/3LXgao+tD\BNI(WCUG(F9Hg]NZF+NWf("$CFIbUd1:+
%f;GZb`lq#-\.9&P4j85%iRGWf@(L$Mn>2R`iS1,qB]Y'Hf@<Q]k*o4m>kF8BOG7E5Ah6fX6^;KTIC>?mB>ncYot;TM9pb:9KAW8"
%ns[^N*m6.;&%2M!4egu+=ih1h`a>@^gdWE(cp9^>j<I(]UTM"(lB(B=`AHN_a._F[Yj.%O6PlRd=HBIamG^>KMQ*AcnEF:oT?Y4L
%fqE.TBjXMNAk32A#6+I4L0`hY4BEM2W;]V!//G@@6ND5l/0$)9Dj;XrJQ4iW=og_=eLl]hlQcZo+S]]LX=gC=X%ePdZ.eYY;0s:f
%LYU-W*BAEIf-2PJ(J[qV!9>RQ!`hmd7.-W`^?S%BYiR@DGa?(4)J0S-5I_7/[[,fW\b5-@o/UH!@#G9bQT$?aC"U35HCLo1.*0BX
%;H]q'belH@eH4Lc2U$r0+pPhEZ0@T$IEWB`7C2.b"43()<U_jhaLTh&Ef$]'(2(:q5#SO<r`T"<es#Nr<LrR,[T+Lf,]6eBGS^DK
%917'X7#.?VnS#n5;KLdZQdO$ADk#I=b7M6JSiXjQ/Nb/#n]9u')$%"&n::=2Qornh.pm;>'c?#<>@2%$&K!_$cT?u\8\^"Q=ZLef
%:\/"/,JKbFc2il$k!QM\_!`kS_:K4YQt1gShIso,,*]p6Q1?@(hc&B-X[^5J==(+L1bTfK7BYpUdulemKqJO;$71"u'I8C<V"n`:
%$5d(aM?3=AUEpeW>6WV&X<p3L<k-'R_PO*mVa@7<jM>Dq_lqgR^9#,:Bp-j'S!MQ>X#`!q7:,c^jT'*&mP!EH/"CNeIAT2Id#G#X
%S3WT\n0nVs;PAMDI04*nrBijk,\]_@5#\,G'W4FZ1`)K;joXC('ik)28ucBh,GS(W<c^YBRoL.>iF>R\DY/Mk<G>BNG@;H5^(`!-
%%b3Z!NJM[ii?Br?[mi6b#pY2iX_0L?4!>/'Ud`0g("m11kj$WS=m6k@=1rJ/rInGpP39`K;9F?C^nmjR6'GIGM@+'rlH9a<AZZ7'
%>XFbhi5q,3r6tbs.-aD7S4Am>*4An-O(/5WW*^eNb\fi.%tW4)36`:,!jA9HoUh#Z[%Zopr,HinP*KG2jg=t5?*Pe-SH7QNLPM[:
%n9T`a4UM!Z"ib&\`jh^9`20+=5DBBTlmW&?&;,39PKR9D.tD>*M6scqK:UH-0g\ur>#qQtU7$<uA6)^2/Z)K)4GpaMb^t:=2Yf[.
%003KJ:%Y!?k(FK0RlZUg3Q\XULD*o>\mkc.$W12kA1sAN=k!N$F!%*=_YcWu57Pt`C9hn?O6$(L8nOt46&ud9;a+6r44@611+oCF
%kSo7ndbJmR:H(7<\ZMGq^.j83R64Y((\^5KVPo`UGte0([^P6BW39e=-0jNFo<ITf_LkGFKYU!AA=\UPI)(!&Gj@?SmF,'*Q)GH\
%j.o#>\PXYhZ#-MSn`_WXL37GkGXqO7&1lSS]F@iELk_FFSO@s'"'aI;NE-U(^N[/ApK0^ZU40#j^U1@LY6="<l8bVE^rfbO>&g7+
%9EZqu6O\P@I7P9:Yt.Vc1MUd.gSbG=TKtg:jm4!_<CGLCE&_\;)9Yt@>]K(a:<d*HmTH3SH#s]Y4+CF5;dcoBnkAndmkT%5C#>[(
%=_>nQ@Ws@0]rea[F$1:i[L]W5OPfB^1;:_fFrlmZJg\iB%=Nl*8SL:YY+HI:?Ygd'+cWHhl)^iCV[CE8N)*SR0m<_U&9KZm`3:bE
%;.(t$[LQS'nJHVOLhr7""pg1+d?Mr0o0[9i'%q$d`Oon_#*Q\j1&/jIPj>)iB!EfLe&r"1$=19T9DLVt-U8"oo*)[$[@;>RJ-du$
%bKZRINjD16\@BL1fpp%E<WlE>D5U"l1?,(.$!IdBF&.N?*gUP^[=bND@$!_)l;>Vt'-Q>EnpLre9>`"JCk>QU5u&=AX%RB#f?2*<
%omStceXtk0dMZq`=DM&XXk(W-7o41_)85ihgeY/K(14G?ZcHU6W5V_0:1D$MgDOnZpit04@;U"FW=^<hOg+VIo?4pKYTXu]*7?p@
%C:ijRfn2p2YNRh9Vpa2`@%5[No4"H_Er[Aq.GdEMN=jE+9SMV40#)?Oc\*bLg^H]7N`rsB]$R3M4-)B13"je.<FH'Eej5u"#;(mU
%D7#coPHa-eP_@af`4ZN`X'.lX#j4Yg[WQh>PoLHnq&J77gPR0@e]/>Yo87bDnkhGT%4FZF4t6n,n<5)fTZG#lAr2frL:nUio3F36
%?"+\SU$^J_hbap8DI+WM&(kCFbjC4GUocjeHZ-B]YXDPX_RUFi!AWl,80Vj:dBe4V9+_c`)rMJ(Whp+R3Kp5V+]>.[F.OJ,*cZch
%2/n3>?@1dT$Cm;"=;;hih/`e)hm&+#_dVLj!2IK"Xd3it\!e'n_\/ia>;DBuC@SV:k:%nDYrlCIQG"]H)$t[#HbP`kf^rEB)-Hs.
%fX@5`fG*>c%`?rX=q]Ch-[pt*^Y']<EiH<V5#(_)+s92n_d(6Io?<*m5`OM_^nA(N*>(SqHs#RoSFF\r#VE3.nJG+Dh,,sME=A#=
%2PV\V_jjJUZ>_S\F6==I[mS[lJk&c42U:E\lo'>B3=Z7r:GIPiGL>\e>8a=8%*8b#75LGHI#\r2dSeIoORPt9WZ<LG],NVB[2mD5
%Qmc/bl$V=9-m"FkRuBm/Bq2am@==?$A2a+'Cm,dj7E@XcLIVp1ni\![A_GFF%4%K!XI5o_>m;k=LdWfVU!#E6H*5EeU=S)e@Tb!8
%eF%_h>)0m;Bml68q'#YAGD$UHaON-_%n+TE/e$ENlR6-J;i_NoFL5e)4boCDLFV4%MS7)rA78LE,BNMnc%rrj\g1BK$&F4bM():Y
%:KFed+5NsS=p9j\El/""ZN*grQ,pf6h73<pRd6S!gXgq]:FBjI2JHbTSIf%JZAK`-hVD?,X-EhAkp#hPXK%O\'"!(F,dC:8k0>Cs
%b;mW;o)_R=g:8Bg8THQr1g.6og5DJ\!Bh,lh+^/!G5'H/[\l[PjftG&[o.9++$YERb"[ff<.*J=?,dKa?>O[SePm.G*JW,ZWU^AA
%:/ft/NNXBJr&uLX$RbpuUEr=qTc*sTh;?FGOq#s@[>huc,U>E!R)/<sP`]gk*0I`4`&)U%^mMs*e&(+iTWTWsX$NGUg1k%,Poqo/
%>2%88mZT@W#>sR/q.ref&F&9TdJ-N?4r1+dSPLb6fMbc`!#AY=&$3R=Pr>KgT!qT"Yq^,&-H5T#jlC.#-EoYIWYC$$;K5O@#\8ki
%LiksLR!.mW[OA27Jg[Gt5Gk;Skn0lsDu&p:V2aqKOG`:V`>"S)ePAd)NtM(;RmA.oX<NuS`GP8T06N&80ToE96n_;hq[e2pkq@6l
%.pV4eL_l<4b;WYGWpO7qC.Gc_9ZR=XeAOQr;t?,$FJu1>lf>:3('d0Lm=,278oJd]nO\AG=9j$XF!6sk!m3Qh0psms5l0-QiOPf-
%l;I4Yo):4]#n#mj%2jak3p(t':.eY_dn]FTM8D46pH`\=OfKAKJ$[#f9UMYn&sVB$kG+G&5og\E)dBVb7^9(YN?4nCYGPji9g+We
%PbsRR?b<5Vh3oU!XN=;'e7Lq5]VNEk*'4R$9:i+ZPTS)$EF'6FdR?8!:S[\Agg;,5kKhsZZPm!N;4Nh%<5s3>pA`C;D`?b8eLWDa
%>.#OI&?,r8\4Ja#PH2FC"W7Ih5(@cO4=tXc.6\\eQ6gTuLkm44-fNhj1NL+XgjrUIQd\lo7KO+L7\]at0kob99EoscPOE\3G^+A:
%KWD4HLO?*m7.hL"[VR8XRK3D\VGcT<+k4go9)eH4GMRj=iI*?&rq>R%"(p*Up<q&IIa9&p[ePeh..p%l"54)&dVlFDq%*SPbqA$I
%q=_j6.V5^!qL9?mc@+YG=3rP:$6n?I&T-36Ph3l8K0:Z:Sj4nS#@MC3kt*uS@3qC!SkM[h_*u1_qu+XC`E5BKV<73g<DYLl,X[o'
%$d<s"Yr-M/MZ?UR(Gl&XS$jd^["f`8!Dtb`lEMjq-=iXcP02IXl=TuC&J':t2m$&H(Wi?Z!D&as67&Bt?e(p6FCk,d.iKb_;Zp/^
%]t$7m_;mHXM:1K@aU3lC%OD"UDU.OkC7Gc,3AF5hjMB%'WF^Nf[=$tVlp":1b98$i*+P6&C!"Dm&#!&QorDB:&p[S,SH=IjSFF7=
%ff`<F7Nt`@,GFk#<3#TsQ>mjYXh[H%=Sp*T-=6'bO??k]9D&5"r5uKoFKmWu<qf!C<-C<^'JkR'q8m?sjmHU-QWQDaY86Plk42$D
%2Vem\c`k7.h:%$h%+laWXb"mM9t'E$MMACU(iW5q["*4dBEu%Wf7nK,6KpO(bTdBY`C$Zi70i;%ZQ3k5*^Z^3g2E^NcS:UnX-F<D
%!>G8A_r!duQsm.=qj:Z*N8*j*m+&FDa^n4pSj<%&k?fml[XVG(5&+l>:<OMF0AJM>X.sMFn5R2Z12\Q9((!&?e$<F)=bIPjO2YG9
%7'W8H@kqiAPI^6Dfhos!:&6IoA4%FaaOWbSA39V`-1/od'-1X"m\>nH.e8Q0G'KqeQ2P)4^/aH2Gah5R*;U+5o2<FbN]>9)?:@Oc
%mIMi/K=a@bVs5;1Hu:-Mq&8rQJrA+'I@?\IOsZW0'L@<>b=c\k(?L7qX$ndeM,Vof"JY<*!(M3AN]o#0%!eNN&[?qMDLW'RY`-gP
%Hou]!aK[>]a92MX_8KIGM?FeU1J'cu\\!3>nKr3cqM1.ZR$N%<U*dn1=e]"YN!/^LX]h(7&"#kOHreOYB<[E(kiDYL!lJk-;CTW:
%bS*E@V^1'mI'QinTYqbjcU@p+nD'kW<,X#V?jB%IZN<N"5a[T4cAQnF`WRFg!/>isAgSNmd@l$MX,TG_[.7PIO:#q_q"eMBAtd^U
%N@mCpN!CJSrN9]=kTi$Aj8OADeFn_e:0tE=]9qp@q<atfmfd4oH#p8^ZaN=Z[8W%@(qKW[l!uLbc7g;)\ib/7;gNUbDQ1I;Eea!H
%=D:X.?X.h4;+gA;j_k;g>iMrEe"7nC$1TkZF3$XG\0[cQ-YM7MUW[-/[O]Z^p3WTKiEa#bVYrDc#c*H18jV9O;i;Hbke6^(NY!ad
%\VkpMmEu=j&MVJlpQXsT],,!!-4!<IZ4U)-)0LYkT\uQh`Z"bf,.r,EQ6k'n6;W?mb@.]MB7".(AVV*K:)*-(d2ms'.i7PlZhmB=
%HYZqI5lT%tqJ>NA&<KCDCYR88URc/<H)Htu4C@hT=1"sa<q\`)\\$qKn#/W_qYZ?biZ'3"&cAVP?td)@lg[U\&:U\'G*f!e"Hpuo
%9RWd]-0&G)H]6C=p+I:9oO6@.'i.m(g$^>_L3!Z5Ba`44qd[o:)1+sSD.I>iD*RDarmh_ZQJ+P[CDVS)+hA/u;bLOhNlV%l'NL/J
%RZa8g%bLO<>U77+fW:3!8\%_9_3j]2]L&!3=[Zssn@%/.J3>?X-%#2<_3hlJ9HY!6="oNF%3qE3;([s^@#BRh9;_4=Zal.qk4;&e
%070l!LLeInb0<\4C8jiV[WpM0!G";0OX,f)l!j'YqIm>Chs=g7ju@p8Hlh$eTVNpp.M8eU,I5nf%9)i?"`[&@iT%8X#*\-AeDB3h
%P/$h(*8\QDe]25P_hY"CL8nRBc"jI9f!KX,V&Mj;RHRO3B"q'$+pgusS(LImQV)3IJca<p/.P9B^PIK-Q#@?/SF2E,VTC8O_Ocg]
%PpC]_@kfat"kV,5TIt=j19.eYLP+EFD756SeTB+=4]H^]YLl2Or7.,0]]gUE5CGjHo^eYI67"7qjB*k,ACU&X8nmh]\[:QR79OM<
%1kB;8k)=U_jAMm9%A3$Y->V;\4\-K[@?9&!9;$EQ"j3G/6cPu^:Z>[<3cd/R7I\%f4P83<3oe<u430R.,:JZN9eI@dB8hA@*+Z"o
%VY*`gW8pXOT3`+sceLVPPdJ"kP>oO=q\=ZQGS5Q2j$_E>%ng[`nq`A0Brn=[q\'de\bF&dVC%];NdYSR'F\ckfiuj)N\[Jn3<!F;
%bn9RD@<g+*;R(>0$a%D!HB"IGOh1GrHYGYcB<a4\m3i'_he'FC4cLUW4Htocq&-igBr(B,[]q3n2F)Je5pY^Mm5"oFI2kMRcEcFt
%(2$G66U6HhaH4>Rod0[(++tkb6;QQO+WOsc1;+nr((>YQimiLf0j44IcA?sXR*eQg-,^hY(O!NT&B2D$//,la)EC1or-PdaIG>lj
%YrBinl8PNP]3!mL1SVdu?eO)PjTSl_UuB#fGiRhj]p!72#Zl3X]kH<+p#]u95'W\j'P$gFGt+/p2+Qt$N<s$FPrjFaZ7u'cK)IKC
%N7m*@ZfkZq^Sh2j@<rggnp6lkb^P@=BAZdK)LsQe`bIZ6Ui*,WT;CAD-F26*L<T<8Y+C/(F,SSs*36a<8rC4FS!MEWr#>#XOHaIi
%N<jO7e@$!"ph;7ln$PC//+F_Lr=XTGC*HFc<d1<H-6;\ohP('m1FTc)1LA<31G?3l#VOS;C?fo7BlbQWZSE7&M(5I=LGjer>8L,\
%kkag\]g0>sHXLebF>%)Da_2\[J`je@loaaed><1"m5fl1UK7=pT_59?!#VOBkau#%f2RbN5OhB\TYjZ_43]08AP=>)E.GH`:eK"W
%eePCmr7Hh8s1paiW8r*BnocrY$!lpO(\Q`@Jnu(>QR'7Ps4IMdEj5nYm-<H`W,@@KVqm;"\<Ws@?P/eDkF#?-p`W?mNgNH&U[Y%L
%LuksN?ToNjh6cktG2ng/ZC2!H]",*1,!aHs'bW&iGc76N<I:u.9dnF![DfB6a9^L^4PU:a&8%d-77L2I5Vt,_aTTPSQk>On_po"D
%Or9"m)rq#r*0KqGS'kr9[75mJo2HsM[^oNj76gO&El<!Zam1W&l"L4NI6KJ\$s?;iDQNGPOIi'@YACJ[9q=RYeM3.#PA&e_2,JF`
%<maNI'3H^'VM=p[_pG*JqKTH?F51O;Cf"07;bG',&'HqU"rgU>R6B"W.)HmF]RmZ'RYGAnq!s?.D;U\^Mm8@@T)/)Bi4EV"P^h%'
%XoZ*Jqu"pt'SG('Sum965l@lF*&8WH(tH>&bY_?*=K31GoRtM,Ki'80X0[ObO+?opNqW.XQEGD`$`pD15d778qp!]+4D"+N4a3,H
%Y]Hj\26[\A&r7L"lfg`SS>=&%;/m8H"!V],AO^<E0kkX)kc3-q!4=,u5p-5W'BW8Z;c&JoL<ahrT:lmp.04)[<Hk-h)FRT*>e_\3
%8)W2^<OqsD4'<5=9@U`)-1[BV-0qiD%]ep.hM)HU%*#_UiY]1-Qg\6_a_hR6X)>k_^AZmg8k_sd+Na_;H%iUr&#MY=Oh^j4Q/7d/
%+Kj:3`<qq:21N0tP!A$Z9XVuPl-Aj2ZVn^hCE*.fDT2a(kJOH-[nT7)'&h!5X)&S#SDC'jH8;5hhH-DNrpDJjCtT&liCbeSU4e"c
%UCD`KEsTi4iNP^k[80DTL!c(MpkDt4[.ZU$`HsLe:FDX<3_XR5oG)82=>T2-5B15C@l&Jpi<J@W;9(6L<mqLO;[]f@l85gI\&K:c
%,e+Z'7IlAl'nu<7RTkHZe05J.p?(/cJ&<@>T;*#7ZJIL@qi:@rl,(Vm4Bi'b>?@8BOS2.F9:1&-1]0d5(@Q'C<XVia^25dVMZM=@
%bj^N*=FH(trAG9M66qbk6TK%*^/6kj+=#mLcEM7N]h=.O1TdR!i@[Rhk//h#]aRU40"0]G=_Al=$^Vc*VcPb_(J%msg9O$@,XYa_
%q5<WHs2h^KFN@mr0NqVZ)&#H\log"E$(QC,b^2`L;K4'S;es=5[h>)-]bg>Ii<'_m/HlYq?_.7nTbIVZ3fDEf#IgW@J1S,ignZH_
%_RWq\XcT(koL8.T_rSq_ep%oq,C(Cl[rUid"I5=/,T3lu8V#l?r)GP5R4HPg]JR[4R'!bQMkc_2Wrt#YMSrW73.s_\k&Ja^!nEBi
%6UN6c+RaJB.q3q@=k)pSh5rU\p\1UYgl508il[[S92ica\tCh%AM\n?OIbH62_!9cXYh4<&(Y'8UC(paT95kR^0BmFeN6;;G;qEO
%3aBf+P3h=pl;)YkDGQ0!+X22!qreZdY=G$TZ9GtO'.clmnhT$N\!H5-7O0p;i)ikSj'M!D(M/MbgFVXpjjA<qpfab5.W7lO3I+Y]
%))heEMI)3$0?dI@/t(#U!lJE*5>&Ol)dp--8]i>L4f,.PD8[q;)'o;52'3F=UI($`_J4<(TTPipXf1<Z1t,7knSCA(6=CUIHu_o]
%U`a#N$!V.@9.UW_<0n)e7mr2*N/r0]#SIH/Haa@3'GPJ0.j[Z^PmXr\".8e4DHu_SEHJU`XQS3//NO5<(G"TBT?]FfLs&\=g_nD]
%eIcp]8-;f840YPQTn.F0Z2:WI=Rp/bqsM)Y+6Q0S!,L!WHdommjr]cRHI2+ea?kt+=;gjPo;ArTFBF>ErG\MJeg*C).?QRL$*I<h
%mImtbiJ%U'*<E03VtmW-jKN?\/cYD-?`CSiWVAXp@`3d\YgR#M8:qXb`u@/l<H+U6O^L;H$(9;r40/4VKNuJG=delpIn3Fs`0e(Z
%$dYDXCYi*''&]amFHk1sd6cuhRAH%<QjhZ'S\jr0]M0-t"ThoMh9$<dbKXq*e>9?tUlPb_WR%aGE^M_mRP2JBe/WYOAQ[h'IrYtF
%i[i%QZ)15O#Fmt-)J>QH)t^@&mnbcrhg_t]pj::W4$ML,j2EI?QqUig+j#XLEsKGWEY/q;PDU't7'Xg&c-&_OJB/Nq^>_tA?W*^l
%J[#4kL)OJ@6N>LH%+#@1Cn)T2Zq>Pn#HNQAVPWI2T*V61bEo#b[N9r/_2;o+R7+DY1&%EQI6]pY+;s^PXrpe?,h&0\8VqYITi82:
%'$=S(fF@*5VBf(iC++\T3-oVLAt:dl&j4AENO>-inlPu_0!\tC**1/p]^XnCmXtr_^gF`!81AU0a1"l`4D)ND9dN@dQj7=d35iNp
%fsuWc/<l0M3eK08L+-T//t('$`gNSjRF[YpAbF(VSrN:Y[*MYj!O@VOF%D9jKeKa0'>gG5,7/rrJjW^RW/O!L]2@8[qJ95#-;h_n
%$ptO+r(".`ZlDfL,T2X_`)gh5jr9X*h.E2FJ;["a@+@raHB[V;(tr%4rpI:"dBb\"0qI>.m6W^t"1n&$ZFng)`Fq&./R'ZI%_2_[
%o!$3EW_UYuPoPZ2G92;#P':Hi<CQO%k7N3UL5Gsn23V'eq:!'*mfW/CBI@rd.Ul_LmX?k[aoH.Z;HH!ifF)H,/.0N4p2c3*GB8A9
%!."W'hPO;:QVt)IRcZ-pC^Y>+Kd'2Eb5b=^6/d@eJ@CX"jnT/XgC3U#]n)\q8!gaC+X#+nD.8iR?2`R58HHf4#<8tS`%6Qj>r+J!
%bVG:\N\l=+0SYn\5o?h<0GC^L8\4$]/<0.ghMc(>iAFn_DOEn1Q/9EL9e$RTI/I7d_tW"0&RTAF`#8SZ)\kA(,VmKX^+Wd'S^P)Q
%(M?!_KB>VuL%f.^g%2"Q;W)CM.:!Q0dt#m8I;Kgl67,$l0M7<qJPb?h]>.ku-)lDb''O,8!8PSI22U:#d9LWmaA:Bg0*cJ5*C-p1
%V0f0V/1G&.0TNf@nlL?<ndF!P,uZ.I8@Ogs,P?DDAo<b#`1bJLF#hZjYhlOCUgh^n:#Xi"a@&)&#R^YKWR2:o0iM";LJ=,R]/u6Z
%7VbOeg`]VV3cPW4/.+1"-@2D^i4#g#1,YHQp$lqYh':QOoGqUJ^%sVD2.k97[ZVd&8#tH3$7B"ukmQW^_F7!MX,q^%U@ICLU*joZ
%p9SEOVe1cW<DbmkM0K1u9joq4LWH1#@n'L&7,J%?*MhA]".`_H<]g&d*5iJfZMma'Z29k%c"1TISf=$'<X<[V/1.)''U>/>[$`p+
%R#^@h>I$qAgZS/nft)MElV`uW:glq-OlBhjLs?'pTUKip$?p(NJsA1T$SVM,W9KW].+."GW^%.r*/8OF-WCQ+m!MN5^2(8.oO8U/
%?@EPBP*M1:1+HFs,19CUgEk5fna="kFt?*7'VcnYG8b7F]!/^l1Wgh:W1l@!K-Iq;g/%hYdG/s@,Et#H^Ci+/<u`=+2%gs1q8FKr
%jZ-pCD)'4EbJdcbcl?RH4kF((OTVQ1.(lQlgg4n0/lW5&gFKK,GhX%kHeP"ph4-&XV;KCn)>AV:^Je\[bF37lALPL3'VReQf:-cW
%mlgN6haLu,SX(P?V0<RR`DVl]DNhAH;$."uD=0&kOMD=7c<\\jmKIQ!W^-:tg<h'K,EX*FoTG44ZBa7KWT*N]./Aqj$SLhsa\Ya"
%j!P6D786GW1[q;ro8GT`TdE!Dad6ma0>nJ:3Lb4KqU6$Gmr#P-1;$NJSYJC&3;.^jO*WY7),6o+QN^&.hE0q\HStu29`.pf)A;EQ
%h$jW&BQ]';f:0nmUY2i[kZ+D3SN=^EOs2QIVgC[]XR\CQ50oKe%oK;fO!k7@m$fKe_`3XFRA!a*"kpu0'ALaiF)F,uIP[H_nR)u!
%*V#UTg_2-\h'MP_S#s=*Ji\g5okkG8i66P&FiB6,GJg8bX&Vhb8u?Ng&$pGXX71LK&JL:=GK\QJ?n/U!`Go"B9VkGcD4b6PrNI7,
%ZsG`ZbYU*/->]j=A:F;W4QJLNgdIUAeDgl$\,ijD/8cn"g.m^Hj7(#DAdOS3dk7O]O]E7SVh,)qRe1(A>qp+NVh,\9OnR#eMU%h@
%]t11`N0Tbn[#WYbHl_Cr;rYt&o'p[WZ80IhC_.6'f_BSf&BLoO]snobP*bn*7Y:o#/!tshVI/`[K)Y?+,4JFYI5?BJbIV\iD6m.T
%8Xp.lVf*dEH1dpra!cE<?AN#d-hB>C"kE7Y#S;M_K$"C=X5fjb>M$lU<K(4#K)m9s!7n97/,'CE6uC;16l@lP>*[gN!f<dh^K1N2
%aVd$&NRHs+Y6>Z.%d1oMWlZ5!FBpNf4X)Ve]I9de`M]*?%e1UE]/Hie0fMe\`1!Rr\uBZZDF8QdmqF*3-kF_.l&BG%iKj2C'u,,W
%#(#6!+)D+dRd,+VqIe4O`*LeOMPg*-&JA^B73emf>6.I9[?mAPe;C9]Wb3"$8i)pEFBaRm-W>!WjUecN+HkdkXn.edjMsae&_VC7
%NagONKb;F/+*#0[#U<;^&TB0fM,39P[Kr8bn,WUF+R)jnN+3W9A71`XCKJ>G(,Kk_Pb=]IJkZ$]fV^"_.]Er:Rf%k856lg*p[=1C
%G[;ctk!->)ptO^+j2Z*<cVK%8Im4CWq(KM]h,"(D&&8&b?[qpiYCH5WJ,/L3qW[CV^]-G5d@^F6r3*TerSaZ(q4I]ZLS*H&jhLiE
%s2Mp2DBJYuDuTJ!rmS'#om[![7a%+~>
%AI9_PrivateDataEnd
